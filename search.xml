<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>超震撼! 裸眼 3D 看冬奥</title>
    <url>/2022/02/10/3d-olympics/</url>
    <content><![CDATA[<p>大家好，我是杰森。北京 2022 冬奥会备受瞩目，吉祥物冰墩墩更是圈粉无数。</p>
<p>不知道你有没有抢到一只呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/bingdwendwen.png"></p>
<p>本文使用 <code>Three.js + React</code> 技术栈，实现冬日和奥运元素，制作了一个充满趣味和纪念意义的冬奥主题 <code>3D</code> 页面。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>实现效果如以下 <code>👇</code> 动图所示，页面主要由 <code>2022</code> 冬奥会吉祥物 <code>冰墩墩</code> 、奥运五环、舞动的旗帜 <code>🚩</code>、树木 <code>🌲</code> 以及下雪效果 <code>❄️</code> 等组成。按住鼠标左键移动可以改为相机位置，获得不同视图。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcb9253a007d4a4a9b749569428036f1~tplv-k3u1fbpfcp-watermark.awebp"></p>
<blockquote>
<p><code>👀</code> 在线预览：<span class="exturl" data-url="aHR0cHM6Ly9kcmFnb25pci5naXRodWIuaW8vM2QvIy9vbHltcGljJUVGJUJDJTg4JUU5JTgzJUE4JUU3JUJEJUIyJUU1JTlDJUE4">https://dragonir.github.io/3d/#/olympic（部署在<i class="fa fa-external-link-alt"></i></span> <code>GitHub</code>，加载速度可能会有点慢 <code>😓</code>）</p>
</blockquote>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本文涉及到的知识点主要包括：<code>TorusGeometry</code> 圆环面、<code>MeshLambertMaterial</code> 非光泽表面材质、<code>MeshDepthMaterial</code> 深度网格材质、<code>custromMaterial</code> 自定义材质、<code>Points</code> 粒子、<code>PointsMaterial</code> 点材质等。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><p>首先引入开发页面所需要的库和外部资源，<code>OrbitControls</code> 用于镜头轨道控制、<code>TWEEN</code> 用于补间动画实现、<code>GLTFLoader</code> 用于加载 <code>glb</code> 或 <code>gltf</code> 格式的 <code>3D</code> 模型、以及一些其他模型、贴图等资源。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">TWEEN</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/libs/tween.module.min.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GLTFLoader</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/loaders/GLTFLoader&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> bingdundunModel <span class="keyword">from</span> <span class="string">&#x27;./models/bingdundun.glb&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="页面-DOM-结构"><a href="#页面-DOM-结构" class="headerlink" title="页面 DOM 结构"></a>页面 DOM 结构</h3><p>页面 <code>DOM</code> 结构非常简单，只有渲染 <code>3D</code> 元素的 <code>#container</code> 容器和显示加载进度的 <code>.olympic_loading</code>元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">loadingProcess</span> === <span class="number">100</span> ? <span class="string">&#x27;&#x27;</span> : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;olympic_loading&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;this.state.loadingProcess&#125; %<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="场景初始化"><a href="#场景初始化" class="headerlink" title="场景初始化"></a>场景初始化</h3><p>初始化渲染容器、场景、相机。关于这部分内容的详细知识点，可以查阅我往期的文章，本文中不再赘述。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line">renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">renderer.<span class="title function_">setPixelRatio</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>);</span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">renderer.<span class="property">shadowMap</span>.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">container.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line">scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line">scene.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(skyTexture);</span><br><span class="line">camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">60</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">100</span>);</span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h3 id="添加光源"><a href="#添加光源" class="headerlink" title="添加光源"></a>添加光源</h3><p>本示例中主要添加了两种光源：<code>DirectionalLight</code> 用于产生阴影，调节页面亮度、<code>AmbientLight</code> 用于渲染环境氛围。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直射光</span></span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DirectionalLight</span>(<span class="number">0xffffff</span>, <span class="number">1</span>);</span><br><span class="line">light.<span class="property">intensity</span> = <span class="number">1</span>;</span><br><span class="line">light.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">16</span>, <span class="number">16</span>, <span class="number">8</span>);</span><br><span class="line">light.<span class="property">castShadow</span> = <span class="literal">true</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">mapSize</span>.<span class="property">width</span> = <span class="number">512</span> * <span class="number">12</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">mapSize</span>.<span class="property">height</span> = <span class="number">512</span> * <span class="number">12</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">top</span> = <span class="number">40</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">bottom</span> = -<span class="number">40</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">left</span> = -<span class="number">40</span>;</span><br><span class="line">light.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">right</span> = <span class="number">40</span>;</span><br><span class="line">scene.<span class="title function_">add</span>(light);</span><br><span class="line"><span class="comment">// 环境光</span></span><br><span class="line"><span class="keyword">const</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0xcfffff</span>);</span><br><span class="line">ambientLight.<span class="property">intensity</span> = <span class="number">1</span>;</span><br><span class="line">scene.<span class="title function_">add</span>(ambientLight);</span><br></pre></td></tr></table></figure>

<h3 id="加载进度管理"><a href="#加载进度管理" class="headerlink" title="加载进度管理"></a>加载进度管理</h3><p>使用 <code>THREE.LoadingManager</code> 管理页面模型加载进度，在它的回调函数中执行一些与加载进度相关的方法。本例中的页面加载进度就是在 <code>onProgress</code> 中完成的，当页面加载进度为 <code>100%</code> 时，执行 <code>TWEEN</code> 镜头补间动画。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> manager = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LoadingManager</span>();</span><br><span class="line">manager.<span class="property">onStart</span> = <span class="function">(<span class="params">url, loaded, total</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">manager.<span class="property">onLoad</span> = <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loading complete!&#x27;</span>)&#125;;</span><br><span class="line">manager.<span class="property">onProgress</span> = <span class="function">(<span class="params">url, loaded, total</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">floor</span>(loaded / total * <span class="number">100</span>) === <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">loadingProcess</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(loaded / total * <span class="number">100</span>) &#125;);</span><br><span class="line">    <span class="comment">// 镜头补间动画</span></span><br><span class="line">    <span class="title class_">Animations</span>.<span class="title function_">animateCamera</span>(camera, controls, &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: -<span class="number">1</span>, <span class="attr">z</span>: <span class="number">20</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;, <span class="number">3600</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">loadingProcess</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(loaded / total * <span class="number">100</span>) &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="创建地面"><a href="#创建地面" class="headerlink" title="创建地面"></a>创建地面</h3><p>本示例中凹凸起伏的地面是使用 <code>Blender</code> 构建模型，然后导出 <code>glb</code> 格式加载创建的。当然也可以只使用 <code>Three.js</code> 自带平面网格加凹凸贴图也可以实现类似的效果。使用 <code>Blender</code> 自建模型的优点在于可以自由可视化地调整地面的起伏效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">GLTFLoader</span>(manager);</span><br><span class="line">loader.<span class="title function_">load</span>(landModel, <span class="keyword">function</span> (<span class="params">mesh</span>) &#123;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="title function_">traverse</span>(<span class="keyword">function</span> (<span class="params">child</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">isMesh</span>) &#123;</span><br><span class="line">      child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.1</span>;</span><br><span class="line">      child.<span class="property">material</span>.<span class="property">roughness</span> = <span class="number">.8</span>;</span><br><span class="line">      <span class="comment">// 地面</span></span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">name</span> === <span class="string">&#x27;Mesh_2&#x27;</span>) &#123;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.5</span>;</span><br><span class="line">        child.<span class="property">receiveShadow</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">rotation</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">4</span>;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">15</span>, -<span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">.9</span>, <span class="number">.9</span>, <span class="number">.9</span>);</span><br><span class="line">  land = mesh.<span class="property">scene</span>;</span><br><span class="line">  scene.<span class="title function_">add</span>(land);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79b71ebf1cfc4e95a8fb3f64461108c8~tplv-k3u1fbpfcp-watermark.awebp"></p>
<h3 id="创建冬奥吉祥物冰墩墩"><a href="#创建冬奥吉祥物冰墩墩" class="headerlink" title="创建冬奥吉祥物冰墩墩"></a>创建冬奥吉祥物冰墩墩</h3><p>现在添加可爱的冬奥会吉祥物熊猫冰墩墩 <code>🐼</code>，冰墩墩同样是使用 <code>glb</code> 格式模型加载的。它的原始模型来源于这里，从这个网站免费现在模型后，原模型是使用 <code>3D max</code> 建的我发现并不能直接用在网页中，需要在 <code>Blender</code> 中转换模型格式，还需要调整调整模型的贴图法线，才能还原渲染图效果。</p>
<p><strong>原模型</strong>：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40de3d65b202431bac1f0673f9f3882e~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p><strong>冰墩墩贴图</strong>:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78bba0afd14345bfbfdbb5ffa44aecb3~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p><strong>转换成 Blender 支持的模型，并在 Blender 中调整模型贴图法线、并添加贴图</strong>:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8881a2307d2a40e1abef87201a26ec9d~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p><strong>导出 glb 格式</strong>:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55b45df468634f3c9670c4b4d03fe6c9~tplv-k3u1fbpfcp-watermark.awebp"></p>
<blockquote>
<p><code>📖</code> 在 <code>Blender</code> 中给模型添加贴图教程传送门：在 Blender 中怎么给模型贴图</p>
</blockquote>
<p>仔细观察<code>冰墩墩 🐼</code>可以发现，它的外面有一层<strong>透明塑料或玻璃质感外壳</strong>，这个效果可以通过修改模型的透明度、金属度、粗糙度等材质参数实现，最后就可以渲染出如 <code>👆 banner图</code> 所示的那种效果，具体如以下代码所示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loader.<span class="title function_">load</span>(bingdundunModel, <span class="function"><span class="params">mesh</span> =&gt;</span> &#123;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="title function_">traverse</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">isMesh</span>) &#123;</span><br><span class="line">      <span class="comment">// 内部</span></span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">name</span> === <span class="string">&#x27;oldtiger001&#x27;</span>) &#123;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.5</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">roughness</span> = <span class="number">.8</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 半透明外壳</span></span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">name</span> === <span class="string">&#x27;oldtiger002&#x27;</span>) &#123;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">transparent</span> = <span class="literal">true</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">opacity</span> = <span class="number">.5</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.2</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">roughness</span> = <span class="number">0</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">refractionRatio</span> = <span class="number">1</span></span><br><span class="line">        child.<span class="property">castShadow</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">rotation</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">24</span>;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">8</span>, -<span class="number">12</span>, <span class="number">0</span>);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>);</span><br><span class="line">  scene.<span class="title function_">add</span>(mesh.<span class="property">scene</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="创建奥运五环"><a href="#创建奥运五环" class="headerlink" title="创建奥运五环"></a>创建奥运五环</h3><p>奥运五环由基础几何模型圆环面 <code>TorusGeometry</code> 来实现，创建五个圆环面，并调整它们的材质颜色和位置来构成<strong>蓝黑红黄绿</strong>顺序的五环结构。五环材质使用的是 <code>MeshLambertMaterial</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fiveCycles = [</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;cycle_0&#x27;</span>, <span class="attr">color</span>: <span class="number">0x0885c2</span>, <span class="attr">position</span>: &#123; <span class="attr">x</span>: -<span class="number">250</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;&#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;cycle_1&#x27;</span>, <span class="attr">color</span>: <span class="number">0x000000</span>, <span class="attr">position</span>: &#123; <span class="attr">x</span>: -<span class="number">10</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">5</span> &#125;&#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;cycle_2&#x27;</span>, <span class="attr">color</span>: <span class="number">0xed334e</span>, <span class="attr">position</span>: &#123; <span class="attr">x</span>: <span class="number">230</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;&#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;cycle_3&#x27;</span>, <span class="attr">color</span>: <span class="number">0xfbb132</span>, <span class="attr">position</span>: &#123; <span class="attr">x</span>: -<span class="number">125</span>, <span class="attr">y</span>: -<span class="number">100</span>, <span class="attr">z</span>: -<span class="number">5</span> &#125;&#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;cycle_4&#x27;</span>, <span class="attr">color</span>: <span class="number">0x1c8b3c</span>, <span class="attr">position</span>: &#123; <span class="attr">x</span>: <span class="number">115</span>, <span class="attr">y</span>: -<span class="number">100</span>, <span class="attr">z</span>: <span class="number">10</span> &#125;&#125;</span><br><span class="line">];</span><br><span class="line">fiveCycles.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> cycleMesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TorusGeometry</span>(<span class="number">100</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>), <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(item.<span class="property">color</span>),</span><br><span class="line">    <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span></span><br><span class="line">  &#125;));</span><br><span class="line">  cycleMesh.<span class="property">castShadow</span> = <span class="literal">true</span>;</span><br><span class="line">  cycleMesh.<span class="property">position</span>.<span class="title function_">set</span>(item.<span class="property">position</span>.<span class="property">x</span>, item.<span class="property">position</span>.<span class="property">y</span>, item.<span class="property">position</span>.<span class="property">z</span>);</span><br><span class="line">  meshes.<span class="title function_">push</span>(cycleMesh);</span><br><span class="line">  fiveCyclesGroup.<span class="title function_">add</span>(cycleMesh);</span><br><span class="line">&#125;);</span><br><span class="line">fiveCyclesGroup.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">.036</span>, <span class="number">.036</span>, <span class="number">.036</span>);</span><br><span class="line">fiveCyclesGroup.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">10</span>, -<span class="number">8</span>);</span><br><span class="line">scene.<span class="title function_">add</span>(fiveCyclesGroup);</span><br></pre></td></tr></table></figure>

<h4 id="💡-TorusGeometry-圆环面"><a href="#💡-TorusGeometry-圆环面" class="headerlink" title="💡 TorusGeometry 圆环面"></a><code>💡</code> TorusGeometry 圆环面</h4><p><code>TorusGeometry</code> 一个用于生成圆环几何体的类。</p>
<p><strong>构造函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TorusGeometry</span>(<span class="attr">radius</span>: <span class="title class_">Float</span>, <span class="attr">tube</span>: <span class="title class_">Float</span>, <span class="attr">radialSegments</span>: <span class="title class_">Integer</span>, <span class="attr">tubularSegments</span>: <span class="title class_">Integer</span>, <span class="attr">arc</span>: <span class="title class_">Float</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>radius</code>：圆环的半径，从圆环的中心到管道（横截面）的中心。默认值是 <code>1</code>。</li>
<li><code>tube</code>：管道的半径，默认值为 <code>0.4</code>。</li>
<li><code>radialSegments</code>：圆环的分段数，默认值为 <code>8</code>。</li>
<li><code>tubularSegments</code>：管道的分段数，默认值为 <code>6</code>。</li>
<li><code>arc</code>：圆环的圆心角（单位是弧度），默认值为 <code>Math.PI * 2</code>。</li>
</ul>
<h4 id="💡-MeshLambertMaterial-非光泽表面材质"><a href="#💡-MeshLambertMaterial-非光泽表面材质" class="headerlink" title="💡 MeshLambertMaterial 非光泽表面材质"></a><code>💡</code> MeshLambertMaterial 非光泽表面材质</h4><p>一种非光泽表面的材质，没有镜面高光。该材质使用基于非物理的 <code>Lambertian</code> 模型来计算反射率。这可以很好地模拟一些表面（例如未经处理的木材或石材），但不能模拟具有镜面高光的光泽表面（例如涂漆木材）。</p>
<p><strong>构造函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MeshLambertMaterial</span>(parameters : <span class="title class_">Object</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>parameters</code>：（可选）用于定义材质外观的对象，具有一个或多个属性。材质的任何属性都可以从此处传入。</li>
</ul>
<h3 id="创建旗帜"><a href="#创建旗帜" class="headerlink" title="创建旗帜"></a>创建旗帜</h3><p>旗面模型是从 sketchfab 下载的，还需要一个旗杆，可以在 <code>Blender</code>中添加了一个柱状立方体，并调整好合适的长宽高和旗面结合起来。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21d2e80561024cb38a89dc75b3e09d50~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p><strong>旗面贴图</strong>：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a1fc0345766451a890ae2d19ef0ad38~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p>旗面添加了动画，需要在代码中执行动画帧播放。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loader.<span class="title function_">load</span>(flagModel, <span class="function"><span class="params">mesh</span> =&gt;</span> &#123;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="title function_">traverse</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">isMesh</span>) &#123;</span><br><span class="line">      child.<span class="property">castShadow</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 旗帜</span></span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">name</span> === <span class="string">&#x27;mesh_0001&#x27;</span>) &#123;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.1</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">roughness</span> = <span class="number">.1</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(flagTexture);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 旗杆</span></span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">name</span> === <span class="string">&#x27;柱体&#x27;</span>) &#123;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">metalness</span> = <span class="number">.6</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">roughness</span> = <span class="number">0</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">refractionRatio</span> = <span class="number">1</span>;</span><br><span class="line">        child.<span class="property">material</span>.<span class="property">color</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xeeeeee</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">rotation</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">24</span>;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">2</span>, -<span class="number">7</span>, -<span class="number">1</span>);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="comment">// 动画</span></span><br><span class="line">  <span class="keyword">let</span> meshAnimation = mesh.<span class="property">animations</span>[<span class="number">0</span>];</span><br><span class="line">  mixer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AnimationMixer</span>(mesh.<span class="property">scene</span>);</span><br><span class="line">  <span class="keyword">let</span> animationClip = meshAnimation;</span><br><span class="line">  <span class="keyword">let</span> clipAction = mixer.<span class="title function_">clipAction</span>(animationClip).<span class="title function_">play</span>();</span><br><span class="line">  animationClip = clipAction.<span class="title function_">getClip</span>();</span><br><span class="line">  scene.<span class="title function_">add</span>(mesh.<span class="property">scene</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="创建树木"><a href="#创建树木" class="headerlink" title="创建树木"></a>创建树木</h3><p>为了充实画面，营造冬日氛围，于是就添加了几棵松树 <code>🌲</code> 作为装饰。添加松树的时候用到一个技巧非常重要：我们知道因为树的模型非常复杂，有非常多的面数，面数太多会降低页面性能，造成卡顿。本文中使用两个如下图 <code>👇</code> 所示的两个交叉的面来作为树的基座，这样的话树只有两个面数，使用这个技巧可以和大程度上优化页面性能，而且树 <code>🌲</code> 的样子看起来也是有 <code>3D</code> 感的。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc12379da4b04b18a643b44ad7198408~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p><strong>材质贴图</strong>：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b12aef79902b4607888d3e270bc3ee25~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p>为了使树<strong>只在贴图透明部分透明、其他地方不透明</strong>，并且可以<strong>产生树状阴影而不是长方体阴影</strong>，需要给树模型添加如下 <code>MeshPhysicalMaterial</code>、<code>MeshDepthMaterial</code> 两种材质，两种材质使用同样的纹理贴图，其中 <code>MeshDepthMaterial</code> 添加到模型的 <code>custromMaterial</code> 属性上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> treeMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhysicalMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">map</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(treeTexture),</span><br><span class="line">  <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span>,</span><br><span class="line">  <span class="attr">metalness</span>: <span class="number">.2</span>,</span><br><span class="line">  <span class="attr">roughness</span>: <span class="number">.8</span>,</span><br><span class="line">  <span class="attr">depthTest</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">depthWrite</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">skinning</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">fog</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">reflectivity</span>: <span class="number">0.1</span>,</span><br><span class="line">  <span class="attr">refractionRatio</span>: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> treeCustomDepthMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshDepthMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">depthPacking</span>: <span class="variable constant_">THREE</span>.<span class="property">RGBADepthPacking</span>,</span><br><span class="line">  <span class="attr">map</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(treeTexture),</span><br><span class="line">  <span class="attr">alphaTest</span>: <span class="number">0.5</span></span><br><span class="line">&#125;);</span><br><span class="line">loader.<span class="title function_">load</span>(treeModel, <span class="function"><span class="params">mesh</span> =&gt;</span> &#123;</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="title function_">traverse</span>(<span class="function"><span class="params">child</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">isMesh</span>) &#123;</span><br><span class="line">      child.<span class="property">material</span> = treeMaterial;</span><br><span class="line">      child.<span class="property">custromMaterial</span> = treeCustomDepthMaterial;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">14</span>, -<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">  mesh.<span class="property">scene</span>.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">  scene.<span class="title function_">add</span>(mesh.<span class="property">scene</span>);</span><br><span class="line">  <span class="comment">// 克隆另两棵树</span></span><br><span class="line">  <span class="keyword">let</span> tree2 = mesh.<span class="property">scene</span>.<span class="title function_">clone</span>();</span><br><span class="line">  tree2.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">10</span>, -<span class="number">8</span>, -<span class="number">15</span>);</span><br><span class="line">  tree2.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">  scene.<span class="title function_">add</span>(tree2)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>实现效果也可以从 <code>👆</code> 上面 <code>Banner</code> 图中可以看到，为了画面更好看，我取消了树的阴影显示。</p>
<blockquote>
<p><code>📌</code> 在 <code>3D</code> 功能开发中，一些不重要的装饰模型都可以采取这种策略来优化。</p>
</blockquote>
<h4 id="💡-MeshDepthMaterial-深度网格材质"><a href="#💡-MeshDepthMaterial-深度网格材质" class="headerlink" title="💡 MeshDepthMaterial 深度网格材质"></a><code>💡</code> MeshDepthMaterial 深度网格材质</h4><p>一种按深度绘制几何体的材质。深度基于相机远近平面，白色最近，黑色最远。</p>
<p><strong>构造函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MeshDepthMaterial</span>(<span class="attr">parameters</span>: <span class="title class_">Object</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>parameters</code>：（可选）用于定义材质外观的对象，具有一个或多个属性。材质的任何属性都可以从此处传入。</li>
</ul>
<p><strong>特殊属性</strong>：</p>
<ul>
<li><code>.depthPacking[Constant]</code>：<code>depth packing</code> 的编码。默认为 <code>BasicDepthPacking</code>。</li>
<li><code>.displacementMap[Texture]</code>：位移贴图会影响网格顶点的位置，与仅影响材质的光照和阴影的其他贴图不同，移位的顶点可以投射阴影，阻挡其他对象，以及充当真实的几何体。</li>
<li><code>.displacementScale[Float]</code>：位移贴图对网格的影响程度（黑色是无位移，白色是最大位移）。如果没有设置位移贴图，则不会应用此值。默认值为 <code>1</code>。</li>
<li><code>.displacementBias[Float]</code>：位移贴图在网格顶点上的偏移量。如果没有设置位移贴图，则不会应用此值。默认值为 <code>0</code>。</li>
</ul>
<h4 id="💡-custromMaterial-自定义材质"><a href="#💡-custromMaterial-自定义材质" class="headerlink" title="💡 custromMaterial 自定义材质"></a><code>💡</code> custromMaterial 自定义材质</h4><p>给网格添加 <code>custromMaterial</code> 自定义材质属性，可以实现透明外围 <code>png</code> 图片贴图的内容区域阴影。</p>
<h3 id="创建雪花"><a href="#创建雪花" class="headerlink" title="创建雪花"></a>创建雪花</h3><p>创建雪花 <code>❄️</code>，就要用到<strong>粒子知识</strong>。<code>THREE.Points</code> 是用来创建点的类，也用来批量管理粒子。本例中创建了 <code>1500</code> 个雪花粒子，并为它们设置了限定三维空间的随机坐标及横向和竖向的随机移动速度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 雪花贴图</span></span><br><span class="line"><span class="keyword">let</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(snowTexture);</span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>();</span><br><span class="line"><span class="keyword">let</span> range = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> pointsMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.8</span>,</span><br><span class="line">  <span class="attr">map</span>: texture,</span><br><span class="line">  <span class="comment">// 背景融合</span></span><br><span class="line">  <span class="attr">blending</span>: <span class="variable constant_">THREE</span>.<span class="property">AdditiveBlending</span>,</span><br><span class="line">  <span class="comment">// 景深衰弱</span></span><br><span class="line">  <span class="attr">sizeAttenuation</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">depthTest</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1500</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> vertice = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * range - range / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>() * range * <span class="number">1.5</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>() * range - range / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 纵向移速</span></span><br><span class="line">  vertice.<span class="property">velocityY</span> = <span class="number">0.1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() / <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 横向移速</span></span><br><span class="line">  vertice.<span class="property">velocityX</span> = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) / <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 加入到几何</span></span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(vertice);</span><br><span class="line">&#125;</span><br><span class="line">geometry.<span class="title function_">center</span>();</span><br><span class="line">points = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(geometry, pointsMaterial);</span><br><span class="line">points.<span class="property">position</span>.<span class="property">y</span> = -<span class="number">30</span>;</span><br><span class="line">scene.<span class="title function_">add</span>(points);</span><br></pre></td></tr></table></figure>

<h4 id="💡-Points-粒子"><a href="#💡-Points-粒子" class="headerlink" title="💡 Points 粒子"></a><code>💡</code> Points 粒子</h4><p><code>Three.js</code> 中，雨 <code>🌧️</code>、雪 <code>❄️</code>、云 <code>☁️</code>、星辰 <code>✨</code> 等生活中常见的粒子都可以使用 <code>Points</code> 来模拟实现。</p>
<p><strong>构造函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(geometry, material);</span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数可以接受两个参数，一个几何体和一个材质，几何体参数用来制定粒子的位置坐标，材质参数用来格式化粒子；</li>
<li>可以基于简单几何体对象如 <code>BoxGeometry</code>、<code>SphereGeometry</code>等作为粒子系统的参数；</li>
<li>一般来讲，需要自己指定顶点来确定粒子的位置。</li>
</ul>
<h4 id="💡-PointsMaterial-点材质"><a href="#💡-PointsMaterial-点材质" class="headerlink" title="💡 PointsMaterial 点材质"></a><code>💡</code> PointsMaterial 点材质</h4><p>通过 <code>THREE.PointsMaterial</code> 可以设置粒子的属性参数，是 <code>Points</code> 使用的默认材质。</p>
<p><strong>构造函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PointsMaterial</span>(parameters : <span class="title class_">Object</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>parameters</code>：（可选）用于定义材质外观的对象，具有一个或多个属性。材质的任何属性都可以从此处传入。</li>
</ul>
<h4 id="💡-材质属性-blending"><a href="#💡-材质属性-blending" class="headerlink" title="💡 材质属性 .blending"></a><code>💡</code> 材质属性 .blending</h4><p>材质的<code>.blending</code> 属性主要控制纹理融合的叠加方式，<code>.blending</code> 属性的值包括：</p>
<ul>
<li><code>THREE.NormalBlending</code>：默认值</li>
<li><code>THREE.AdditiveBlending</code>：加法融合模式</li>
<li><code>THREE.SubtractiveBlending</code>：减法融合模式</li>
<li><code>THREE.MultiplyBlending</code>：乘法融合模式</li>
<li><code>THREE.CustomBlending</code>：自定义融合模式，与 <code>.blendSrc</code>, <code>.blendDst</code> 或 <code>.blendEquation</code> 属性组合使用</li>
</ul>
<h4 id="💡-材质属性-sizeAttenuation"><a href="#💡-材质属性-sizeAttenuation" class="headerlink" title="💡 材质属性 .sizeAttenuation"></a><code>💡</code> 材质属性 .sizeAttenuation</h4><p>粒子的大小是否会被相机深度衰减，默认为 <code>true</code>（仅限透视相机）。</p>
<h4 id="💡-Three-js-向量"><a href="#💡-Three-js-向量" class="headerlink" title="💡 Three.js 向量"></a><code>💡</code> Three.js 向量</h4><p>几维向量就有几个分量，二维向量 <code>Vector2</code> 有 <code>x</code> 和 <code>y</code> 两个分量，三维向量 <code>Vector3</code> 有<code>x</code>、<code>y</code>、<code>z</code> 三个分量，四维向量 <code>Vector4</code> 有 <code>x</code>、<code>y</code>、<code>z</code>、<code>w</code> 四个分量。</p>
<p><strong>相关 API</strong>：</p>
<ul>
<li><code>Vector2</code>：二维向量</li>
<li><code>Vector3</code>：三维向量</li>
<li><code>Vector4</code>：四维向量</li>
</ul>
<h3 id="镜头控制、缩放适配、动画"><a href="#镜头控制、缩放适配、动画" class="headerlink" title="镜头控制、缩放适配、动画"></a>镜头控制、缩放适配、动画</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, renderer.<span class="property">domElement</span>);</span><br><span class="line">controls.<span class="property">target</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">controls.<span class="property">enableDamping</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 禁用平移</span></span><br><span class="line">controls.<span class="property">enablePan</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 禁用缩放</span></span><br><span class="line">controls.<span class="property">enableZoom</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 垂直旋转角度限制</span></span><br><span class="line">controls.<span class="property">minPolarAngle</span> = <span class="number">1.4</span>;</span><br><span class="line">controls.<span class="property">maxPolarAngle</span> = <span class="number">1.8</span>;</span><br><span class="line"><span class="comment">// 水平旋转角度限制</span></span><br><span class="line">controls.<span class="property">minAzimuthAngle</span> = -<span class="number">.6</span>;</span><br><span class="line">controls.<span class="property">maxAzimuthAngle</span> = <span class="number">.6</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  camera.<span class="property">aspect</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  camera.<span class="title function_">updateProjectionMatrix</span>();</span><br><span class="line">  renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">  controls &amp;&amp; controls.<span class="title function_">update</span>();</span><br><span class="line">  <span class="comment">// 旗帜动画更新</span></span><br><span class="line">  mixer &amp;&amp; mixer.<span class="title function_">update</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Clock</span>().<span class="title function_">getDelta</span>());</span><br><span class="line">  <span class="comment">// 镜头动画</span></span><br><span class="line">  <span class="variable constant_">TWEEN</span> &amp;&amp; <span class="variable constant_">TWEEN</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="comment">// 五环自转</span></span><br><span class="line">  fiveCyclesGroup &amp;&amp; (fiveCyclesGroup.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">.01</span>);</span><br><span class="line">  <span class="comment">// 顶点变动之后需要更新，否则无法实现雨滴特效</span></span><br><span class="line">  points.<span class="property">geometry</span>.<span class="property">verticesNeedUpdate</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 雪花动画更新</span></span><br><span class="line">  <span class="keyword">let</span> vertices = points.<span class="property">geometry</span>.<span class="property">vertices</span>;</span><br><span class="line">  vertices.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">    v.<span class="property">y</span> = v.<span class="property">y</span> - (v.<span class="property">velocityY</span>);</span><br><span class="line">    v.<span class="property">x</span> = v.<span class="property">x</span> - (v.<span class="property">velocityX</span>);</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="property">y</span> &lt;= <span class="number">0</span>) v.<span class="property">y</span> = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="property">x</span> &lt;= -<span class="number">20</span> || v.<span class="property">x</span> &gt;= <span class="number">20</span>) v.<span class="property">velocityX</span> = v.<span class="property">velocityX</span> * -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>🔗</code> 完整代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyYWdvbmlyLzNkL3RyZWUvbWFzdGVyL3NyYy9jb250YWluZXJzL09seW1waWM=">https://github.com/dragonir/3d/tree/master/src/containers/Olympic<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>💡</code> 本文中主要包含的新知识点包括：</p>
<ul>
<li><code>TorusGeometry</code> 圆环面</li>
<li><code>MeshLambertMaterial</code> 非光泽表面材质</li>
<li><code>MeshDepthMaterial</code> 深度网格材质</li>
<li><code>custromMaterial</code> 自定义材质</li>
<li><code>Points</code> 粒子</li>
<li><code>PointsMaterial</code> 点材质</li>
<li>材质属性 <code>.blending</code>、<code>.sizeAttenuation</code></li>
<li><code>Three.js</code> 向量</li>
</ul>
<p><strong>进一步优化的空间</strong>:</p>
<ul>
<li>添加更多的交互功能、界面样式进一步优化；</li>
<li>吉祥物冰墩墩添加骨骼动画，并可以通过鼠标和键盘控制其移动和交互。</li>
</ul>
<hr>
<p>如此硬核的项目，真的是膜拜 <code>dragonir</code> 大牛。</p>
<blockquote>
<p>声明：本文转载自 dragonir，侵删致歉<br>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDYwMjkyOTQzNjA4ODA3NDYw">https://juejin.cn/post/7060292943608807460<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>超火 3D 照片墙，你学废了吗？</title>
    <url>/2022/04/20/3d-pictures-wall/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>用前端的知识实现<strong>立体滚动照片墙</strong></strong><br>💖💖感觉本文还不错的话，还请各位小伙伴👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2d38694568334676a6f610b9735ac426.gif#pic_center"></p>
<span id="more"></span>

<hr>
<p>话不多说，直接上源码！！！</p>
<h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-20 11:38:07</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-20 12:27:05</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>超火🔥照片墙<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://coder-jason.cn/images/favicon-32x32.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;perspective&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgwrap&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/6.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/7.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/8.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/9.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/10.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/11.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/12.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/13.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/14.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/15.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/16.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/17.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/18.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/19.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/20.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-20 11:38:07</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-20 12:27:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">* &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#222</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      user-select: none;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./img/bgi.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.perspective</span> &#123;</span><br><span class="line">      <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">95px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">20deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">      <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">0px</span>);</span><br><span class="line">      <span class="attribute">background</span>: transparent;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(center center, <span class="number">600px</span> <span class="number">600px</span>, <span class="built_in">rgba</span>(<span class="number">122</span>, <span class="number">122</span>, <span class="number">122</span>, .<span class="number">5</span>), <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">600px</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">600px</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="script-js"><a href="#script-js" class="headerlink" title="script.js"></a>script.js</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-20 12:19:54</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-20 12:25:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> len = oImg.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len)</span><br><span class="line"><span class="keyword">var</span> deg = <span class="number">360</span> / len;</span><br><span class="line"><span class="keyword">var</span> oWrap = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imgwrap&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(oImg, <span class="keyword">function</span> (<span class="params">ele, index, self</span>) &#123;</span><br><span class="line">            ele.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateY(&quot;</span> + deg * index + <span class="string">&quot;deg) translateZ(350px)&quot;</span>;</span><br><span class="line">            ele.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&quot;1s &quot;</span> + (len - index) * <span class="number">0.1</span> + <span class="string">&quot;s&quot;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newX, newY, lastX, lastY, minusX, minusY, rotX = -<span class="number">20</span>, rotY = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      lastX = e.<span class="property">clientX</span>;</span><br><span class="line">      lastY = e.<span class="property">clientY</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            newX = e.<span class="property">clientX</span>;</span><br><span class="line">            newY = e.<span class="property">clientY</span>;</span><br><span class="line">            minusX = newX - lastX;</span><br><span class="line">            minusY = newY - lastY;</span><br><span class="line">            rotX -= minusY * <span class="number">0.2</span>;</span><br><span class="line">            rotY += minusX * <span class="number">0.1</span>;</span><br><span class="line">            oWrap.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateX(&quot;</span> + rotX + <span class="string">&quot;deg) rotateY(&quot;</span> + rotY + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">            lastX = newX;</span><br><span class="line">            lastY = newY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整项目地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BEUEVORy9zaGFyZS1jb2Rl">https://github.com/PDPENG/share-code<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 中图片资源无法加载问题</title>
    <url>/2022/04/25/Idea-resource-load-error/</url>
    <content><![CDATA[<blockquote>
<p>以下为<strong>新手</strong>错误，大神请绕道，谢谢！</p>
</blockquote>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天在看一个 Java 的小游戏时，遇到项目图片资源无法加载的问题，运行显示界面如图</p>
<p><img src="https://img-blog.csdnimg.cn/7f110ce32e2e44f8a829cf19d821af3b.png"></p>
<span id="more"></span>

<p>但是代码一定是没有问题的，逻辑之类的肯定都是通的，毕竟是人家写好的，咱拿来看看是吧</p>
<p>最后发现问题原来如此简单！！！大家看到这样的问题，首先应该想到的都是图片资源路径问题</p>
<p>首先我尝试的是在路径前面加 <code>./ 或 ../</code>，甚至用上了绝对路径（但是不推荐，兼容性太差），发现更改绝对路径后显示是没有问题的</p>
<p><img src="https://img-blog.csdnimg.cn/dacec60bc49f4f94be4ed2c94083d86a.png"></p>
<p>然后又回归到了相对路径上，因为在学习数据库部分时，同样遇到过路径问题，那时候是让程序显示当前路径解决的，因为会涉及到<strong>添加包名</strong>的问题</p>
<p>最后解决</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>为了避免路径引用这类的错误，直接复制图片在项目中当前的位置，操作在这里</p>
<p><img src="https://img-blog.csdnimg.cn/5dcc38836fac48f6b58453c80c50ea29.png"></p>
<p>查看路径</p>
<p><img src="https://img-blog.csdnimg.cn/0006cff97f1643b5b6a4bfcd91cc868c.png"></p>
<p>对比源代码，发现少了 <code>sxt</code> ，加入后，资源正常加载，问题解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span> <span class="variable">bg</span> <span class="operator">=</span> Toolkit.getDefaultToolkit().getImage(<span class="string">&quot;sxt/imgs/bg.jpg&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://img-blog.csdnimg.cn/1d0685b1590b49898f87e9dc55e7241e.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>我的一周年创作纪念日</title>
    <url>/2022/05/08/anniversary-creation01/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>攻城狮杂谈，谈谈对创作的感受</strong><br>💖💖希望对你有所帮助👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/e2b2f16a48b14478a8b44222999d4cb5.png" width="320"></center>

<hr>
<blockquote>
<p>今天咱们不聊技术，不谈知识要点，单纯聊聊✒️<strong>写博客</strong>✒️这件事情，分享下我的收获</p>
</blockquote>
<span id="more"></span>

<p>现在是 2022 年 5 月 8 日 23:00:51，为什么是这个时间来写下这篇博客呢？</p>
<p><img src="https://img-blog.csdnimg.cn/d66549cfc61d4b2db7abc2f4b3ab8757.png#pic_center"></p>
<p>当然是贴心的 CSDN 官方记录下了杰森的第一篇博客，记得当时是学习 C++ 编程语言时写下的</p>
<blockquote>
<p>杰森的第一篇博客：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTY1MjUzNzg=">拷贝构造函数剖析【C++】<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>那时的我不会排版，不懂专业知识（虽然现在也不懂，hah），更别说什么 Markdown 了，直接用富文本编辑的文章</p>
<p>没有炫酷的页面，缺乏逻辑性的文字，构成了残缺的第一篇博客。一路走来，成长、收货了许多……许多……</p>
<h1 id="🎯机缘巧合"><a href="#🎯机缘巧合" class="headerlink" title="🎯机缘巧合"></a>🎯机缘巧合</h1><p>杰森目前是一名计算机专业在校学生，偶然在学习 C++ 时发现第一个我认为比较重要的问题，并且是争论了好久才搞明白的问题</p>
<p>然后为了整理思路，就想着以网络笔记的形式写下来。奈何不知道用什么去写，在我学习过程中，浏览器输入任何专业词汇及知识，弹出的前三个标签页中总有一个叫 CSDN</p>
<p>于是我便注册了账号，在 CSDN 平台下笔耕不辍到现在，一发不可收拾***</p>
<hr>
<h1 id="🎯收获所得"><a href="#🎯收获所得" class="headerlink" title="🎯收获所得"></a>🎯收获所得</h1><p>首先是专业知识，我们在学习完一个知识点后，可能自己并不是很清楚。但是如果你可以写下来，并尝试着让别人看懂，那么才是真正的学到了。我也一直在用这样的方法 去巩固专业重点知识，效果那叫一个 NICE ！</p>
<p>然后就是知识面的快速扩充，写博客时你会发现，可能本来是在解决问题 A ，但是解着解着发现 B 问题也不会，这样一连串下去。解决完一个问题后你会发现收获的远远不止这些，无形中触类旁通又学到了很多</p>
<p>最后就是 CSDN 的社交圈，这个圈子里可以认识到很多大佬，可以和他们一起交流，共同进步。同时也欢迎大家加入 <span class="exturl" data-url="aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvZm9ydW1zL2Z1bGxzdGFjaw==">全栈攻城狮论坛<i class="fa fa-external-link-alt"></i></span>，一起冲击大厂哦！</p>
<p><img src="https://img-blog.csdnimg.cn/160794a334444ef4960e89d1d15aeb28.png"></p>
<p>在这个平台中，每天都可以接触到最新的技术，全新的领域内容以及行业大咖独到的看法。时不时还有小伙伴👍点赞➕收藏⭐➕评论💭，激励自己不断学习心的知识</p>
<p>两年来，在 C 站也收获许多，结识了很多志同道合的朋友。感谢你们，是你们的支持让我继续前行，不断奋斗</p>
<p><img src="https://img-blog.csdnimg.cn/362e9438bbd7438bb852f922a3e1ed6f.png#pic_center"></p>
<p>未来杰森也会持续输出，不断向前哒~~</p>
<hr>
<h1 id="🎯日常工作"><a href="#🎯日常工作" class="headerlink" title="🎯日常工作"></a>🎯日常工作</h1><p>学习与创作的关系，我觉得他俩更像是好朋友，一个负责输入，另一个负责输出，相辅相成，齐头并进</p>
<p>目前，有限的学习生活中，创作已经成为日常学习生活中的一部分，不断的正向反馈反向刺激我接触更多的知识领域，学习更多的专业技能</p>
<p>有限的精力下，如何平衡创作和工作学习？？关于这个问题呢，我想引用鱼皮大佬的一句话</p>
<blockquote>
<p>相信会有，那么你就真的会有！</p>
</blockquote>
<p>确实，我们的精力是有限的，时间也是有限的。但比起每天浑浑噩噩、打打游戏、刷刷剧的平凡生活，我更愿意深耕在专业技能上</p>
<p>我们真正投下的有价值的筹码，是时间。面对着足以改变你人生轨迹的黄金时间，你是否感到了它的沉重?你又是否想过要如何计划这笔巨额投资?</p>
<p>如果你是一名乖孩子，每天从早晨开始好好上课，好好做作业，好好预习、复习,直到熄灯时间好好睡觉,过着这种积极健康，平稳中庸的生活，但是缺乏有效自我支配的生活。如果按照学校的规划，你会发现你可以自由支配的业余时间少得可怜。</p>
<p>那么，你这样退守下去，无异于把自己的青春放在保险箱里让他随着时间而凋谢。摘自《上海交通大学学生生存手册》</p>
<p>你觉得，他说的对吗？你又是如何看待的呢？欢迎评论区留言📝</p>
<hr>
<h1 id="🎯未来憧憬"><a href="#🎯未来憧憬" class="headerlink" title="🎯未来憧憬"></a>🎯未来憧憬</h1><p>一句话：打铁必须自身硬，BAT 更要本领强！</p>
<p>友友们，一起加油吧，未来有更多的挑战与困难等着你我来攻克👊👊</p>
<p>现在到了晚上 23:33:52，时间就是海绵里的水，大家都是一天 24h ，想要多学多做，就得多付出，加油鸭！！</p>
<hr>
<center><strong><font size=5>💥让我们期待明天会更好💥</font></strong></center>

<p><img src="https://img-blog.csdnimg.cn/a20625f94d9e43619671c065f629ff97.png"></p>
]]></content>
      <categories>
        <category>攻城狮杂谈</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>快速计算约数的个数——从基础到高级</title>
    <url>/2022/04/29/approximate-number-calculate/</url>
    <content><![CDATA[<blockquote>
<p>题目来源：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjQyODIyNjc=">【欧拉计划第 12 题】 高度可除的三角数 Highly divisible triangular number<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>这道题我们在枚举完三角数后，最重要的是去判断何时某个三角数约数的个数大于 500</p>
<p>下面我们来看下，针对<strong>计算约数的个数</strong>问题，用不同的算法解决，逐步求得最优解</p>
<span id="more"></span>

<h1 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h1><p>最简单，更是非常容易理解的方法</p>
<blockquote>
<p>复杂度：$\large O_{\left ( n^{2} \right )}$</p>
</blockquote>
<p>主要思想：定义变量，使其在小于传入判断值的条件下从 1 开始自增，如果判断值和该变量进行<strong>模取</strong>运算后的值为 0，则说明该变量此时的值是判断值得一个约数。那么，程序计数器自增，记录下此值。循环结束后，输出计数器保存的值即为判断值约数的个数</p>
<p>这种方法优点除易于理解外，怕是没有优点了。缺点当然就是时间复杂度太高，一个值就需要去从 1 一直判断到该值。试想，如果数据量呈指数增长，这种方法恐怕在一般的计算机上不容易很快得到答案</p>
<p>实现代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; <span class="comment">//注意数据范围</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="comment">//成立,这说明此时 i 为 n 的一个约数</span></span><br><span class="line">        &#123;</span><br><span class="line">            count++; <span class="comment">//计数器自增</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++; <span class="comment">//继续判断下一个数字是否为 i 的约数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h1><blockquote>
<p>复杂度：$\large O_{\left ( \sqrt{n} \right )}$</p>
</blockquote>
<p>主要思想：对比可以看出，方法一和方法二差别不大，但影响最关键的是它们的复杂度，直接由 $O_{\left ( n^{2} \right )}$ 降至 $O_{\left ( \sqrt{n} \right )}$ </p>
<p>同样，仍然是<strong>暴力枚举</strong>，只不过这里的判断条件由 <code>i &lt; = n</code> 变为 <code>i * i &lt; = n</code>，复杂度优化了些许。进入 <code>for()</code> 循环后，如果 <code>n % i == 0</code> ，那么说明此时的 <code>i</code> 值是 <code>n</code> 的一个约数</p>
<p>大家在这里要注意的是 <code>if...else</code> 语句内容，这里主要解释下此处和方法一的差别</p>
<p>举个例子，如果 <code>n = 4</code> ，<code>i = 2</code>，满足 <code>2 × 2 = 4</code> 的条件，但此时 <code>4</code> 的两个约数 <code>2</code> 相当于一个，程序计数器只能自增 <code>1</code> ，而不是 <code>2</code></p>
<p>当然，如果进入 <code>for()</code> 循环后，不满足条件 <code>i * i = n</code> ，那么自然是两个不同的约数，此时程序计数器需要增加 <code>2</code>，而不是 <code>1</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * i == n) <span class="comment">// 区别所在,重点理解</span></span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                count += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h1><blockquote>
<p><strong>试除法</strong>求解</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / i; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != n / i)</span><br><span class="line">                res.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LeetCode <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZm91ci1kaXZpc29ycy9zb2x1dGlvbi9zaGktY2h1LWZhLXFpdS15dWUtc2h1LWdlLXNodS15dWUtc2h1LXpoaS1oZS1ieS1obC8=">题解思路<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h1><p><strong>约数个数定理</strong></p>
<p>设一个数可以表示为其素数幂的乘积，即：</p>
<p>$$<br>\large n&#x3D;{p_{1}}^{e_{1}} \cdot {p_{2}}^{e_{2}} \cdot\cdot\cdot {p_{m}}^{e_{m}}<br>$$</p>
<p>则该数的约数个数为：</p>
<p>$$<br>\large \left ( e_{1}+1 \right )\cdot \left ( e_{2}+1 \right )\cdot \cdot \cdot \left ( e_{m}+1 \right )<br>$$</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N, n, i, s, r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (N--)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; n;</span><br><span class="line">            s = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                r = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    r++;</span><br><span class="line">                    n /= i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    r++;</span><br><span class="line">                    s *= r;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">                s *= <span class="number">2</span>;</span><br><span class="line">            cout &lt;&lt; s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【Apsara Clouder 认证】API 接口调用真题</title>
    <url>/2022/04/08/apsara-clouder-api/</url>
    <content><![CDATA[<h1 id="Apsara-Clouder-专项技能认证：实现调用API接口"><a href="#Apsara-Clouder-专项技能认证：实现调用API接口" class="headerlink" title="Apsara Clouder 专项技能认证：实现调用API接口"></a>Apsara Clouder 专项技能认证：实现调用API接口</h1><blockquote>
<p>API 是一组封装好的函数，通过 API，你可以为应用快速扩展功能，而无需理解它们是如何实现的，从而提升开发效率</p>
</blockquote>
<span id="more"></span>

<p><strong>1、调用API时，由于API服务商设置的用户流控值导致被流控，这种情况返回的错误码是（ ）</strong>【D】<br>A.400<br>B.401<br>C.402<br>D.403</p>
<p><strong>2、关于API，下面说法错误的是（ ）</strong>【C】<br>A. 可以避免重复开发，提高开发效率<br>B. 减低代码的耦合度<br>C. 无论何时，都应该优先考虑使用API<br>D. 调用API实现某个功能时，无需了解该功能的原理和源码</p>
<p><strong>3、关于JSON数据，以下哪个是错误的？</strong>【D】<br>A. 并列的数据之间用“，”分隔<br>B. 映射用：表示<br>C. 映射的集合（对象）用大括号{}表示<br>D. 并列数据的集合（数组）用大括号{}表示</p>
<p><strong>4、关于API授权，说法错误的是（）</strong>【D】<br>A. 可以通过从数据市场购买API服务以及提供方主动授权方式获得API的授权<br>B. 购买了API服务就意味着已经获得了授权<br>C. 账号获得了授权，不代表每个APP都获得了授权，需要手动操作将已购买的API授权给哪些APP<br>D. 用户有权操作购买的API与APP的授权和解除授权，也可以解除由服务提供方授权给APP的API</p>
<p><strong>5、通过Java代码调用阿里云市场中提供的ip查询API在应用中实现ip查询功能，这种API属于（）</strong>【C】<br>A. 系统API<br>B. 编程语API<br>C. Web API<br>D. 框架API</p>
<p><strong>6、下面的JSON格式，写法正确的是（）</strong>【B】<br>A.{ firstName &#x3D; “Johm” }<br>B.{ “firstName” : “John” }<br>C.{ firstName : ‘John’ }<br>D.{ firstName : “John” }</p>
<p><strong>7、阿里云API网关中，默认调用API的流控限制为单个IP的QPS不超过（）</strong>【B】<br>A.50<br>B.100<br>C.200<br>D.500</p>
<p><strong>8、调用API，表示服务器端错误的返回码是（）</strong>【D】<br>A.2XX<br>B.3XX<br>C.4XX<br>D.5XX</p>
<p><strong>9、HTTP&#x2F;HTTPS请求的返回结果包含（）（正确答案的数量：3）</strong>【BCD】<br>A. 请求方式<br>B. 状态码<br>C. 返回头（Header）<br>D. 返回体（Body）</p>
<p><strong>10、调用云市场API需要的基础条件是（）（正确答案的数量：3）</strong>【ABD】<br>A. 即将要调用的API，明确API参数定义<br>B. 应用APP，作为调用API时的身份，有AppKey和AppSecret用于验证身份<br>C. API协议<br>D. API和APP的权限关系</p>
<p><strong>11、通过阿里云API网关API需要的条件是？（）（正确答案的数量：3）</strong>【ABD】<br>A. 即将要调用的API，明确API参数定义。<br>B. 应用app(作为调用API时的身份，有AppKey和AppSecret用于验证身份）<br>C. API协议<br>D. API和App的权限关系</p>
<p><strong>12、关于常用的API请求方式，下面说法正确的有（）（正确答案数量：3个）</strong>【ABD】<br>A. GET：请求服务器获取一个资源<br>B. POST：请求服务器创建一个新的资源<br>C. UPDATE：请求服务器编辑或更新一个已存在的资源<br>D. DELETE：请求服务器删除一个资源</p>
<p><strong>13、关于HTTP请求响应模型，下面说法正确的有（）（正确答案的数量：2）</strong>【AB】<br>A. 客户端发起请求，服务器返回响应信息<br>B. 同一个客户端的这次请求和上次请求没有对应关系<br>C. 即时客户端没有发起请求，服务器也能将消息推送给客户端<br>D. 客户端发送请求时，请求类型可以省略</p>
<p><strong>14、调用云市场API，可以使用下面哪些身份认证方法（）（正确答案的数量：2）</strong>【AC】<br>A. APPCODE简单身份认证<br>B. SSL身份认证<br>C. AppKey &amp; AppSecret签名认证<br>D. HTTP Basic认证</p>
<p><strong>15、调用云市场中的图像识别API前，应该了解哪些元素（）（正确答案的数量：2）</strong>【AD】<br>A. 调用地址和请求方式<br>B. 图像识别功能的源码<br>C. 深度学习相关知识<br>D. APPCODE或者AppKey&#x2F;AppSecret</p>
<p><strong>16、在调用阿里云市场中的Web API时，为构造有效的HTTP请求，报文中一般包含哪几个部分？（正确答案数量：4个）</strong>【ABDE】<br>A.URL（API调用地址）<br>B.请求方式<br>C.状态码<br>D.Headers（请求头）<br>E.Body（请求体）</p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>职业认证</tag>
      </tags>
  </entry>
  <entry>
    <title>C++课程设计：图书管理系统</title>
    <url>/2021/07/15/c++course-design-BMS/</url>
    <content><![CDATA[<h3 id="课程设计目的"><a href="#课程设计目的" class="headerlink" title="课程设计目的"></a>课程设计目的</h3><div class="note info"><p>作为软件工程和计算机科学与技术专业的基本课程，课程设计不仅涵盖了C++语言的知识体系，又与工程的实际需要切实相关。通过课程设计的综合性训练，对开发者解决实际问题能力，编程能力，动手能力有很大的提升，更有助于样成良好的编程习惯</p>
</div>
<h3 id="图书管理系统需求分析"><a href="#图书管理系统需求分析" class="headerlink" title="图书管理系统需求分析"></a>图书管理系统需求分析</h3><p>某高校为更好的管理图书馆，现需设计一简易图书管理系统，实现新书录入，图书资料查询，显示总图书信息功能。要求开发的系统需要具备以下功能：</p>
<div class="note info"><p>1.实现读者借阅图书；<br>2.实现读者归还图书；<br>3.实现对图书信息的综合管理： （设置二级子目录实现信息的增，删，改，查等操作）<br>4.实现对读者信息的综合管理： （设置二级子目录实现信息的增，删，改，查等操作）<br>5.显示用户信息：显示所有用户信息，含学号、姓名、借阅状况等信息；<br>6.返回主界面；</p>
</div>

<span id="more"></span>

<h3 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h3><div class="note info"><p>本部分设计内容包括：类的设计、数据成员设计、成员函数设计，以及主程序设计（模块函数实现，主函数） 【源码中详细解释，此处不作赘述】</p>
</div>

<h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><ul>
<li><em><strong>book.h</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once   <span class="comment">//包含此语句的文件只会被编译一次,表示在编译时, 该文件只被包含一次, 减少整个编译过程中打开该文件次数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图书管理模块</span></span><br><span class="line"><span class="comment">//图书类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">book</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> no;            <span class="comment">//图书编号</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];     <span class="comment">//图书名称</span></span><br><span class="line">    <span class="type">int</span> b_flag;        <span class="comment">//1:在架 2:借出</span></span><br><span class="line">    <span class="type">int</span> b_del;         <span class="comment">//1:存在 2:删除</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">book</span>() &#123;&#125;        <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setno</span><span class="params">(<span class="type">int</span> n)</span></span>;    <span class="comment">//设置图书编号</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getno</span><span class="params">()</span></span>;    <span class="comment">//返回图书编号值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setname</span><span class="params">(<span class="type">char</span> na[])</span></span>;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">getname</span><span class="params">()</span></span>;    <span class="comment">//返回图书名称</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">borbook</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">delbook</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addbook</span><span class="params">(<span class="type">int</span> no, <span class="type">char</span> na[])</span></span>;  <span class="comment">//增加图书功能</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图书数据库类</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BMAX = <span class="number">50</span>;       <span class="comment">//定义书本最大值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bdatabase</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    book btarray[BMAX];    <span class="comment">//图书集合</span></span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bdatabase</span>();</span><br><span class="line">    ~<span class="built_in">bdatabase</span>();       <span class="comment">//析构函数,将btarray[]写到book.txt文件中</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addbooks</span><span class="params">()</span></span>;                 <span class="comment">//在图书数据库中添加图书</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findbooks</span><span class="params">(<span class="type">int</span> suffix)</span></span>;      <span class="comment">//查找图书,该函数用于借书操作,suffix是数组下标</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findbooks</span><span class="params">()</span></span>;                 <span class="comment">//查找图书,该函数用于图书维护</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">editbooks</span><span class="params">()</span></span>;     <span class="comment">//编辑图书</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">delbooks</span><span class="params">()</span></span>;  <span class="comment">//删除图书</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">listbooks</span><span class="params">()</span></span>;      <span class="comment">//显示全部图书</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">booksmanage</span><span class="params">()</span></span>; <span class="comment">//图书信息管理界面 声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">borrow_or_return</span><span class="params">(<span class="type">char</span> br)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>interface.h</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Main_Interface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Book_Maintenance_Interface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reader_Maintenance_Interface</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UI</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>reader.h</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;book.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读书管理模块</span></span><br><span class="line"><span class="comment">//读者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reader</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> r_del;      <span class="comment">//1存在    2删除</span></span><br><span class="line">    <span class="type">int</span> r_bor;      <span class="comment">//1借过书  2未借书</span></span><br><span class="line">    book brbook;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addreader</span><span class="params">(<span class="type">int</span> id, <span class="type">char</span> na[])</span></span>;   <span class="comment">//增加读者</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setbrbook</span><span class="params">(book bt)</span></span>; <span class="comment">//设置借书标记</span></span><br><span class="line">    <span class="function">book <span class="title">getbrbook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brbook;  <span class="comment">//返回借书信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读者数据库类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">rdatabase</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    reader rdarray[BMAX];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">rdatabase</span>();</span><br><span class="line">    ~<span class="built_in">rdatabase</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addreaders</span><span class="params">()</span></span>;   <span class="comment">//添加读者</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findreaders</span><span class="params">(<span class="type">int</span> suffix)</span></span>;      <span class="comment">//查找读者,该函数用于借书还书操作,suffix是数组下标</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findreaders</span><span class="params">()</span></span>;        <span class="comment">//查找读者,该函数用于读者维护操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">editreaders</span><span class="params">()</span></span>;     <span class="comment">//编辑读者信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">delreaders</span><span class="params">()</span></span>;  <span class="comment">//删除读者,读者如果借书,需要还书后才能删除</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">listreaders</span><span class="params">()</span></span>;      <span class="comment">//显示所有读者</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readersmange</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h4><ul>
<li><em><strong>main.cpp</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;          </span><br><span class="line">    <span class="type">char</span> in = <span class="number">-1</span>; <span class="comment">//因为VS环境不能使用为初始化的变量,所以首先赋值为不可能使用的变量值以通过编译 char in=-1</span></span><br><span class="line">    <span class="built_in">login</span>();</span><br><span class="line">    <span class="keyword">do</span>&#123;<span class="comment">//退出系统限制条件</span></span><br><span class="line">       <span class="built_in">UI</span>();  <span class="comment">//系统界面改变</span></span><br><span class="line">       <span class="built_in">Main_Interface</span>();</span><br><span class="line">       cin &gt;&gt; in;</span><br><span class="line">       <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">       <span class="keyword">case</span><span class="number">&#x27;1&#x27;</span>:</span><br><span class="line">           <span class="built_in">borrow_or_return</span>(in);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span><span class="number">&#x27;2&#x27;</span>:</span><br><span class="line">           <span class="built_in">borrow_or_return</span>(in);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span><span class="number">&#x27;3&#x27;</span>:</span><br><span class="line">           <span class="built_in">booksmanage</span>();</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span><span class="number">&#x27;4&#x27;</span>:</span><br><span class="line">           <span class="built_in">readersmange</span>();</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span><span class="number">&#x27;0&#x27;</span>: &#123;</span><br><span class="line">           cout &lt;&lt; <span class="string">&quot;感谢您使用本系统,再见!&quot;</span> &lt;&lt; endl;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">           cout &lt;&lt; <span class="string">&quot;In Put Error!!! Please try again!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (in != <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>book.cpp</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图书管理模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图书类函数实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">book::setno</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	no = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">book::getno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">book::setname</span><span class="params">(<span class="type">char</span> na[])</span> </span>&#123;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(name, na);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* book:: <span class="built_in">getname</span>() &#123;</span><br><span class="line">	<span class="keyword">return</span> name;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">book::borbook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	b_flag = <span class="number">2</span>;          <span class="comment">//借书标志</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">book::delbook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	b_del = <span class="number">2</span>;           <span class="comment">//删除标志</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">book::addbook</span><span class="params">(<span class="type">int</span> no, <span class="type">char</span> na[])</span> </span>&#123;</span><br><span class="line">	<span class="built_in">setno</span>(no);</span><br><span class="line">	<span class="built_in">setname</span>(na);</span><br><span class="line">	b_flag = <span class="number">1</span>;</span><br><span class="line">	b_del = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图书数据库类</span></span><br><span class="line">bdatabase::<span class="built_in">bdatabase</span>() &#123;</span><br><span class="line">	book b;            <span class="comment">//建立book类对象并b</span></span><br><span class="line">	top = <span class="number">-1</span>;          <span class="comment">//数组下标从0开始,此处top值置为-1可保证从数组第一个元素开始存储信息</span></span><br><span class="line">	<span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">&quot;book.txt&quot;</span>, ios::in)</span></span>;<span class="comment">//打开文件进行读操作,若文件不存在则出错.输入输出指:内存与硬盘间的信息传递</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		file.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;b, <span class="built_in">sizeof</span>(b));<span class="comment">//从文件中读取b个字符到char*指向的缓存中(book类对象b的地址)</span></span><br><span class="line">		<span class="keyword">if</span> (!file) <span class="comment">//若读取到文件尾EOF,返回非0值(一般为1),结束书本数量的计数,关闭文件</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		top++;</span><br><span class="line">		btarray[top] = b;</span><br><span class="line">	&#125;</span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bdatabase::~<span class="built_in">bdatabase</span>() &#123;</span><br><span class="line">	<span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">&quot;book.txt&quot;</span>, ios::out)</span></span>;<span class="comment">//输出:内存-&gt;硬盘</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (btarray[i].b_del == <span class="number">1</span>)</span><br><span class="line">			file.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;btarray[i], <span class="built_in">sizeof</span>(btarray[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bdatabase::addbooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	book bk;                       <span class="comment">//创建book类对象bk</span></span><br><span class="line">	<span class="type">int</span> no;                        <span class="comment">//书号</span></span><br><span class="line">	<span class="type">char</span> bname[<span class="number">20</span>];                <span class="comment">//书名 用数组存放</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入书号:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; no;</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入书名:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; bname;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	bk.b_flag = <span class="number">1</span>;</span><br><span class="line">	bk.<span class="built_in">addbook</span>(no, bname);          <span class="comment">//类中成员函数addbook(),设置书号与书名 修改标志</span></span><br><span class="line">	top++;</span><br><span class="line">	btarray[top] = bk;</span><br><span class="line">	<span class="keyword">return</span>;                           <span class="comment">//返回上个操作界面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bdatabase::findbooks</span><span class="params">(<span class="type">int</span> suffix)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> no;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入书号:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; no;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (btarray[i].no == no &amp;&amp; btarray[i].b_del == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bdatabase::findbooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> no;</span><br><span class="line">	<span class="type">char</span> value[<span class="number">6</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入书号:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; no;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (btarray[i].no == no &amp;&amp; btarray[i].b_del == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (btarray[i].b_flag == <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">strcpy_s</span>(value, <span class="string">&quot;在架&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (btarray[i].b_flag == <span class="number">2</span>)</span><br><span class="line">				<span class="built_in">strcpy_s</span>(value, <span class="string">&quot;借出&quot;</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;书号:&quot;</span> &lt;&lt; btarray[i].no &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;书名:&quot;</span> &lt;&lt; btarray[i].name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;图书状态:&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bdatabase::editbooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> cur;</span><br><span class="line">	cur = <span class="built_in">findbooks</span>();</span><br><span class="line">	<span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;该书不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;当前图书信息--&quot;</span> &lt;&lt; <span class="string">&quot;书号:&quot;</span> &lt;&lt; btarray[cur].no &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;书名:&quot;</span> &lt;&lt; btarray[cur].name &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请继续操作以修改图书信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;书名:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; btarray[cur].name;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bdatabase::delbooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> cur;</span><br><span class="line">	cur = <span class="built_in">findbooks</span>();</span><br><span class="line">	<span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (btarray[cur].b_flag == <span class="number">2</span>) &#123;       <span class="comment">//删除时判断图书是否借出</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;该图书已经借出,请归还后删除!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	btarray[cur].b_del = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bdatabase::listbooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> value[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (btarray[i].b_del == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (btarray[i].b_flag == <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">strcpy_s</span>(value, <span class="string">&quot;在架&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (btarray[i].b_flag == <span class="number">2</span>)</span><br><span class="line">				<span class="built_in">strcpy_s</span>(value, <span class="string">&quot;借出&quot;</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;书号:&quot;</span> &lt;&lt; btarray[i].no &lt;&lt; <span class="string">&quot;书名:&quot;</span> &lt;&lt; btarray[i].name &lt;&lt; <span class="string">&quot;图书状态:&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">borrow_or_return</span><span class="params">(<span class="type">char</span> br)</span> </span>&#123; <span class="comment">//借书、还书函数，参数br:判断 “借书”,“还书”.  1 借书 2 还书</span></span><br><span class="line">	<span class="type">int</span> reader_ID = <span class="number">0</span>;  <span class="comment">//读者id</span></span><br><span class="line">	<span class="type">int</span> book_ID = <span class="number">0</span>;    <span class="comment">//书的id</span></span><br><span class="line">	<span class="type">int</span> rsuffix, bsuffix;</span><br><span class="line">	bdatabase t_bd;</span><br><span class="line">	rdatabase t_rd;</span><br><span class="line">	<span class="keyword">if</span> (br == <span class="string">&#x27;1&#x27;</span>) &#123;    <span class="comment">//借书</span></span><br><span class="line">		rsuffix = t_rd.<span class="built_in">findreaders</span>(reader_ID);</span><br><span class="line">		bsuffix = t_bd.<span class="built_in">findbooks</span>(book_ID);</span><br><span class="line">		<span class="keyword">if</span> (rsuffix == <span class="number">-1</span> || bsuffix == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (t_bd.btarray[bsuffix].b_flag == <span class="number">2</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;图书已经借出,请选择其它图书&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		t_bd.btarray[bsuffix].b_flag = <span class="number">2</span>;</span><br><span class="line">		t_rd.rdarray[rsuffix].r_bor = <span class="number">1</span>;</span><br><span class="line">		t_rd.rdarray[rsuffix].brbook = t_bd.btarray[bsuffix];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (br == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		rsuffix = t_rd.<span class="built_in">findreaders</span>(reader_ID);</span><br><span class="line">		bsuffix = t_bd.<span class="built_in">findbooks</span>(book_ID);</span><br><span class="line">		<span class="keyword">if</span> (rsuffix == <span class="number">-1</span> || bsuffix == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (t_rd.rdarray[rsuffix].brbook.no == t_bd.btarray[bsuffix].no) &#123;</span><br><span class="line">			t_bd.btarray[bsuffix].b_flag = <span class="number">1</span>;</span><br><span class="line">			t_rd.rdarray[rsuffix].r_bor = <span class="number">2</span>;</span><br><span class="line">			t_rd.rdarray[rsuffix].brbook = t_bd.btarray[bsuffix];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;请重新输入,读者借阅图书书号错误&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">booksmanage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> in;</span><br><span class="line">	bdatabase bd;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//切换UI时,刷新缓冲区当前内容,完成下次更新</span></span><br><span class="line">		<span class="built_in">UI</span>();</span><br><span class="line">		<span class="built_in">Book_Maintenance_Interface</span>();</span><br><span class="line">		cin &gt;&gt; in;</span><br><span class="line">		<span class="keyword">switch</span> (in) &#123;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;1&#x27;</span>:</span><br><span class="line">			bd.<span class="built_in">addbooks</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;2&#x27;</span>:</span><br><span class="line">			bd.<span class="built_in">editbooks</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;3&#x27;</span>:</span><br><span class="line">			bd.<span class="built_in">delbooks</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;4&#x27;</span>:</span><br><span class="line">			bd.<span class="built_in">findbooks</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;5&#x27;</span>:</span><br><span class="line">			bd.<span class="built_in">listbooks</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;6&#x27;</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;In Put Error!!! Please try again!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (in != <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>interface.cpp</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span>      <span class="comment">//system() 库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> passward[<span class="number">2</span>] = <span class="string">&quot;2&quot;</span>; <span class="comment">//此变量用于存储登录密码      </span></span><br><span class="line">    <span class="type">char</span> s[<span class="number">2</span>];<span class="comment">//获取输入的密码,用于验证和登录密码是否相同  </span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;      <span class="comment">//限定输入错误次数是3次</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入登录密码: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s, passward)) &#123; <span class="comment">//若密码正确</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您登陆成功!!!请稍等......\n\n&quot;</span>;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Waring!!!密码输入错误,请退出系统后重新尝试\n&quot;</span>;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Main_Interface</span><span class="params">()</span> </span>&#123;               <span class="comment">//主界面 </span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>); <span class="comment">//清屏函数 clean screen</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;title                图书管理系统   项目开发人员 : XXX &quot;</span>);<span class="comment">//对控制台文件名重命名</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t***************欢 迎 进 入 图 书 管 理 系 统***********************\n&quot;</span>;<span class="comment">//与case顺序一致</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            1.   借书                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            2.   还书                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            3.   图书信息管理                             * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            4.   读者信息管理                             * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            0.   退出                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*******************************************************************\n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;                                                             &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t         Copyright (C) 2020-2021. All Rights Reserved  \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t\n请选择您要执行的操作编号(1-4-0): &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Book_Maintenance_Interface</span><span class="params">()</span> </span>&#123;                           <span class="comment">//图书维护子菜单</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t***************图 书 信 息 维 护 管 理 员 后 台********************\n&quot;</span>;<span class="comment">//与case顺序一致</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            1.   添加                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            2.   修改                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            3.   删除                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            4.   查找                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            5.   显示                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            6.   返回上级操作                             * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*******************************************************************\n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;                                                             &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t\n请选择您要执行的操作编号(1-6): &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reader_Maintenance_Interface</span><span class="params">()</span> </span>&#123;                            <span class="comment">//读者维护子菜单</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t***************读 者 信 息 维 护 管 理 员 后 台********************\n&quot;</span>;<span class="comment">//与case顺序一致</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            1.   添加                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            2.   修改                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            3.   删除                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            4.   查找                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            5.   显示                                     * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*\t            6.   返回上级操作                             * \n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t*******************************************************************\n &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;                                                             &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t\t\n请选择您要执行的操作编号(1-6): &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UI</span><span class="params">()</span> <span class="comment">//自定义函数实现颜色变化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;color F0&quot;</span>);<span class="comment">//前景黑 背景亮白 白底黑字 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>reader.cpp</strong></em></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;interface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读书管理模块</span></span><br><span class="line"><span class="comment">//读者类函数实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reader::addreader</span><span class="params">(<span class="type">int</span> id, <span class="type">char</span> na[])</span> </span>&#123;</span><br><span class="line">    no = id;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(name, na);</span><br><span class="line">    r_del = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reader::setbrbook</span><span class="params">(book bt)</span> </span>&#123;</span><br><span class="line">    brbook = bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rdatabase::<span class="built_in">rdatabase</span>() &#123;</span><br><span class="line">    reader rd;</span><br><span class="line">    top = <span class="number">-1</span>;</span><br><span class="line">    <span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">&quot;reader.txt&quot;</span>, ios::in)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        file.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;rd, <span class="built_in">sizeof</span>(rd));</span><br><span class="line">        <span class="keyword">if</span> (!file) <span class="keyword">break</span>;</span><br><span class="line">        top++;</span><br><span class="line">        rdarray[top] = rd;</span><br><span class="line">    &#125;</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rdatabase::~<span class="built_in">rdatabase</span>() &#123;</span><br><span class="line">    <span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">&quot;reader.txt&quot;</span>, ios::out)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rdarray[i].r_del == <span class="number">1</span>)</span><br><span class="line">            file.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;rdarray[i], <span class="built_in">sizeof</span>(rdarray[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rdatabase::addreaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    reader rd;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    <span class="type">char</span> rname[<span class="number">20</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入学号:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; no;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入姓名:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; rname;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    rd.<span class="built_in">addreader</span>(no, rname);</span><br><span class="line">    rd.r_bor = <span class="number">2</span>;</span><br><span class="line">    top++;</span><br><span class="line">    rdarray[top] = rd;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rdatabase::findreaders</span><span class="params">(<span class="type">int</span> suffix)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入学号:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; no;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rdarray[i].no == no &amp;&amp; rdarray[i].r_del == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rdatabase::findreaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    <span class="type">char</span> value[<span class="number">3</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入学号:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; no;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rdarray[i].no == no &amp;&amp; rdarray[i].r_del == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rdarray[i].r_bor == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">strcpy_s</span>(value, <span class="string">&quot;借&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rdarray[i].r_bor == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">strcpy_s</span>(value, <span class="string">&quot;无&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;学号:&quot;</span> &lt;&lt; rdarray[i].no &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; rdarray[i].name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;是否借书:&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rdatabase::editreaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    cur = <span class="built_in">findreaders</span>();</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到该学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请修改数据:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;姓名:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; rdarray[cur].name;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rdatabase::delreaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    cur = <span class="built_in">findreaders</span>();</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rdarray[cur].r_bor == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;该用户已借出图书,请归还后删除!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rdarray[cur].r_del = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rdatabase::listreaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> value[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rdarray[i].r_del == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rdarray[i].r_bor == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">strcpy_s</span>(value, <span class="string">&quot;借&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rdarray[i].r_bor == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">strcpy_s</span>(value, <span class="string">&quot;无&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;学号:&quot;</span> &lt;&lt; rdarray[i].no &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; rdarray[i].name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;是否借书:&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readersmange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> in;</span><br><span class="line">    rdatabase bd;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停界面,以便显示所需数据</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="built_in">UI</span>();</span><br><span class="line">        <span class="built_in">Reader_Maintenance_Interface</span>();</span><br><span class="line">        cin &gt;&gt; in;</span><br><span class="line">        <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;1&#x27;</span>:</span><br><span class="line">            bd.<span class="built_in">addreaders</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;2&#x27;</span>:</span><br><span class="line">            bd.<span class="built_in">editreaders</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;3&#x27;</span>:</span><br><span class="line">            bd.<span class="built_in">delreaders</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;4&#x27;</span>:</span><br><span class="line">            bd.<span class="built_in">findreaders</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;5&#x27;</span>:</span><br><span class="line">            bd.<span class="built_in">listreaders</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;6&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;In Put Error!!! Please try again!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (in != <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>注：本程序在Visual Studio 2019正常运行，其他配置环境可能有所差异，有问题的朋友可以留言 &#x2F; 私信解决，欢迎交流学习</p>
]]></content>
      <categories>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN 网站部署全站加速服务</title>
    <url>/2022/02/17/cdn-config/</url>
    <content><![CDATA[<blockquote>
<p>本篇主要叙述如何为站点配置 cdn 加速服务，大家可以选择合适的服务供应商</p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当我配置完成后，我发现：为什么站点的打开速度还不如从前呢？不是 cdn 加速吗？这怎么还降速呢？</p>
<p><img src="https://img-blog.csdnimg.cn/78a4af16744749758ed25d10a206fcfb.png"><br>于是我便开始了复盘，最后的结果是：<strong>CNAME 解析错误</strong>，就是跟没没有解析到供应商。我天呐，原来我开了近一个月的服务，都是未开启的状态啊，瞬间崩溃，下面我们就来看看如何正确<strong>开启 cdn 全站加速</strong>服务</p>
<span id="more"></span>

<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>为了让大家了解的更清楚呢，这里搬运一波词条的解释，然后通俗讲解</p>
<h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><blockquote>
<p>域名解析（Domain Name System）是把域名指向网站空间 IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP 地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替 IP 地址标识站点地址。域名解析就是域名到 IP 地址的转换过程。域名的解析工作由 DNS 服务器完成。<br>域名解析也叫域名指向、服务器设置、域名配置以及反向 IP 登记等等。说得简单点就是将好记的域名解析成 IP，服务由 DNS 服务器完成，是把域名解析到一个 IP 地址，然后在此 IP 地址的主机上将一个子目录与域名绑定。</p>
</blockquote>
<p>通俗来讲就是用一串你自己可以定义的<strong>域名</strong>，来解析到复杂、不便记忆的<strong>IP 地址</strong>上。互联网中的地址是数字的 IP 地址，域名解析的作用主要就是为了便于记忆。</p>
<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><blockquote>
<p>CDN（Content Delivery Network），即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</p>
</blockquote>
<p>简言之，用户访问服务器资源时，不同地区的用户根据距离服务器的远近有着不同的响应速度，你可以理解成双十一秒杀购物，如果你就在服务器旁边，理论上你秒杀到对应商品的概率是远大于其他用户的</p>
<p><img src="https://img-blog.csdnimg.cn/9a88c99241414787b77c01e725d2f58e.png"><br>cdn 的供应商有很多台分布在不同地区的服务器，当你需要访问的资源加入 cdn 后，cdn 服务器会定期从你的服务器拷贝资源。这样当用户访问你服务器上的资源时，cdn 会自动让用户访问到距离他们最近的一台 cdn 服务器上的资源</p>
<p>根据距离的远近，将用户的请求分配到不同的服务器上，从而实现加速的作用，也就是 <strong>内容分发网络</strong></p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><blockquote>
<p>HTTPS （Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在 HTTP 的基础下加入 SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。 HTTPS 存在不同于 HTTP 的默认端口及一个加密&#x2F;身份验证层（在 HTTP 与 TCP 之间）。这个系统提供了身份验证与加密通讯方法。它被广泛用于万维网上安全敏感的通讯，例如交易支付等方面。</p>
</blockquote>
<p>看图，相信你一定遇到过这样的网站<br><img src="https://img-blog.csdnimg.cn/831fcf4f66c44969afa501871e1885b4.png"><br>出现这样的情况，表示这个网站使用了 HTTP 协议传输数据，提醒用户谨慎访问网站。 HTTP 协议是明文传输协议，无法加密传输数据或校验数据完整性，也无法进行身份验证，这时候就有必要了解下 <strong>SSL</strong> 证书</p>
<h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><blockquote>
<p>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS 与 SSL 在传输层与应用层之间对网络连接进行加密。</p>
</blockquote>
<p>个人使用的话，没有更高的要求，我们到供应商处申购免费的证书就好，下文配置会详细讲到</p>
<h1 id="配置-CDN-服务"><a href="#配置-CDN-服务" class="headerlink" title="配置 CDN 服务"></a>配置 CDN 服务</h1><blockquote>
<p>这里以又拍云为例，演示配置过程，其他供应商类比操作即可</p>
</blockquote>
<h2 id="绑定-upyun"><a href="#绑定-upyun" class="headerlink" title="绑定 upyun"></a>绑定 upyun</h2><p>这里提醒大家，使用一个新的产品时一定要仔细阅读官方文档，不然怎么会有：没有好文档的产品不是合格产品的说法呢？有关于 upyun 资源的绑定和注册，请直接访问<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9jZG4tcXVpY2stc3RhcnQv">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h2><p>这里我主要想强调的一点就是 dns 记录的添加，大家在<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9jZG4tcXVpY2stc3RhcnQvIzFlODhlYjdlNThmOTYtY25hbWUtZTU5ZjlmZTU5MDhk">这里<i class="fa fa-external-link-alt"></i></span>获取到对应的 <strong>CNAME 域名</strong> 后，到域名的供应商出添加解析记录，这里我以万网接入为例</p>
<p>在 <strong>云解析 DNS 控制台</strong> 找到 <strong>添加记录</strong><br><img src="https://img-blog.csdnimg.cn/a85a01c2e7cd4b878842f3837990d1c4.png"><br><strong>主机记录</strong> 位置处要特别注意，有以下两种情况</p>
<ul>
<li>顶级域名：主机记录为 <strong>@</strong></li>
<li>子域名：主机记录为 <strong>二级域</strong>，例如：<code>synopsis.coder-jason.cn</code> 这个二级域名，主机记录处填写 <code>synopsis</code></li>
</ul>
<p>其余项按照下图配置就好<br><img src="https://img-blog.csdnimg.cn/f50a3d70bcec4c47b03fd352e752f63b.png"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们在本地打开命令行工具，输入 <code>ping</code> 指令到自己的域名，查看 dns 配置是否生效，得到图示响应即配置成功，也可以通过<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9jZG4tcXVpY2stc3RhcnQvI2U5ODU4ZGU3YmRhZWU2YjU4YmU4YWY5NQ==">官方方法<i class="fa fa-external-link-alt"></i></span>测试配置<br><img src="https://img-blog.csdnimg.cn/a0bf25a1f9f241fdbfcd88040cfcd7ee.png"></p>
<h1 id="安全性提升"><a href="#安全性提升" class="headerlink" title="安全性提升"></a>安全性提升</h1><h2 id="SSL-证书部署"><a href="#SSL-证书部署" class="headerlink" title="SSL 证书部署"></a>SSL 证书部署</h2><p>大家在域名的提供商处可以找到 <strong>数字证书管理服务控制台</strong> ，填写信息后提交申请即可<br><img src="https://img-blog.csdnimg.cn/489ecf1ec61844f9ac36a7920e3edadf.png"><br>待审核通过后，我们下载部署就好，这里以 <strong>Nginx</strong> 部署为例。服务器安装 <strong>宝塔面板</strong> 后（详细步骤请参考文），点击 <strong>ssl 证书</strong>，在对应窗口粘贴我们下载好的证书就可以了，注意区分文件后缀，不要粘贴错误<br><img src="https://img-blog.csdnimg.cn/45aa6104f3304ca4a5ca861c08d93f61.png" alt="在这里插入图片描述"><br>因为使用了又拍云的 cdn 服务，所以也需在图示位置添加证书<br><img src="https://img-blog.csdnimg.cn/87e6e7e029e84d3f8a5e4cdeb8af80a9.png"><br>至此，网站就实现加密访问啦，您可以通过<span class="exturl" data-url="aHR0cHM6Ly9teXNzbC5jb20vc3NsLmh0bWw=">ssl 状态检测工具<i class="fa fa-external-link-alt"></i></span>查看配置状态</p>
<h2 id="IP-访问限制"><a href="#IP-访问限制" class="headerlink" title="IP 访问限制"></a>IP 访问限制</h2><p>upyun <strong>cdn 管理控制台</strong> 下拉找到 <strong>Ip 访问限制</strong><br><img src="https://img-blog.csdnimg.cn/f5cb1bb9156047c9ac5d99ea3a1894f5.png"><br>点击管理添加限制规则<br><img src="https://img-blog.csdnimg.cn/fccefbdfc3e1433fb13bd224a8f99bb0.png"><br>点击保存<br><img src="https://img-blog.csdnimg.cn/1aafa1d7407142e48349cb2a6ec3ccb0.png"></p>
<h2 id="CC-防护"><a href="#CC-防护" class="headerlink" title="CC 防护"></a>CC 防护</h2><p>在 upyun <strong>cdn 管理控制台</strong> 访问控制中找到<strong>CC 防护</strong>，添加防护规则<br><img src="https://img-blog.csdnimg.cn/bb58f6a635374f8b96a4edcd63d1cb48.png"><br>点击保存<br><img src="https://img-blog.csdnimg.cn/74bdc6e161a146a29a8ac129a3cac1d0.png"></p>
<h1 id="又拍云联盟"><a href="#又拍云联盟" class="headerlink" title="又拍云联盟"></a>又拍云联盟</h1><p>如果不介意站点下方添加服务商 logo ，可以加入<span class="exturl" data-url="aHR0cHM6Ly93d3cudXB5dW4uY29tL2xlYWd1ZQ==">又拍云联盟<i class="fa fa-external-link-alt"></i></span>免费获取每月 10GB 存储空间 + 15GB 流量<br><img src="https://img-blog.csdnimg.cn/3e65f5e958d347fc99c054970c7adddc.png"><br><span class="exturl" data-url="aHR0cHM6Ly9jb2Rlci1qYXNvbi5jbi8=">点击这里<i class="fa fa-external-link-alt"></i></span>预览添加效果<br><img src="https://img-blog.csdnimg.cn/e4884368d6af4f3cb667594b7018d9ea.png"></p>
<hr>
<p>配置教程</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kcC1qc29uLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzEyMDgxMTY4Mw==">服务器安装宝塔面板<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>网站建设</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>常见字符编码介绍</title>
    <url>/2022/03/25/character-encoding/</url>
    <content><![CDATA[<h1 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h1><p>ASCII是美国(国家)信息交换标准(代)码，一种使用7个或8个二进制位进行编码的方案，最多可以给<code>256(2^80)</code>个字符 (包括字母、数字、标点符号、控制字符及其他符号)分配(或指定)数值。基本的 ASCII 字符集共有 <code>128</code> 个字符，其中有 <code>96</code> 个可打印字符，包括常用的字母、数字、标点符号等，另外还有 <code>32</code> 个控制字符。</p>
<p>文件中每一个字都是美标形象码或空格码，这类文件称为“美标文本文件”，或略为“文本文件”，通常可在不同电脑系统间直接交换。 文件中含有控制码或非美标码的文件，通常不能在不同电脑系统间直接交换。这类文件有一个通称，叫“二进制文件”</p>
<h1 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h1><p>为了扩充ASCII编码，以用于显示本国的语言，不同的国家和地区制定了不同的标准，由此产生了<code>GB2312</code>, <code>BIG5</code>, <code>JIS</code> 等各自的编码标准。这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 <code>ANSI</code> 编码，又称为<code>MBCS（Muilti-Bytes Charecter Set，多字节字符集）</code>。在简体中文系统下，<code>ANSI</code> 编码代表 <code>GB2312</code> 编码，在日文操作系统下，<code>ANSI</code> 编码代表 <code>JIS</code> 编码，所以在中文 windows下要转码成<code>GB2312</code>,<code>GBK</code>(gb2312的扩展)只需要把文本保存为<code>ANSI</code> 编码即可。 不同 <code>ANSI</code> 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 <code>ANSI</code> 编码的文本中。一个很大的缺点是，同一个编码值，在不同的编码体系里代表着不同的字。这样就容易造成混乱</p>
<span id="more"></span>

<h1 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h1><p><code>GB2312</code>是<code>ANSI</code>编码里的一种，对<code>ANSI</code>编码最初始的<code>ASCII</code>编码进行扩充，为了满足国内在计算机中使用汉字的需要，中国国家标准总局发布了一系列的汉字字符集国家标准编码，统称为GB码，或国标码。其中最有影响的是于1980年发布的《信息交换用汉字编码字符集 基本集》，标准号为GB 2312-1980,因其使用非常普遍，也常被通称为国标码。GB2312编码通行于我国内地；新加坡等地也采用此编码。几乎所有的中文系统和国际化的软件都支持<code>GB2312</code>。 <code>GB2312</code>是一个简体中文字符集，由<code>6763</code>个常用汉字和<code>682</code>个全角的非汉字字符组成</p>
<h1 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h1><p><code>GB 2312</code>的出现，基本满足了汉字的计算机处理需要，但对于人名、古汉语等方面出现的罕用字，<code>GB 2312</code>不能处理，这导致了后来<code>GBK</code>及<code>GB 18030</code>汉字字符集的出现 <code>GBK</code>共收入21886个汉字和图形符号，其中汉字（包括部首和构件）<code>21003</code>个，图形符号<code>883</code>个。<code>GBK</code>编码标准兼容<code>GB2312</code>，共收录汉字<code>21003</code>个、符号<code>883</code>个，并提供<code>1894</code>个造字码位，简、繁体字融于一库。<code>GB2312</code>码是中华人民共和国国家汉字信息交换用编码，全称《信息交换用汉字编码字符集——基本集》，1980年由国家标准总局发布。基本集共收入汉字<code>6763</code>个和非汉字图形字符<code>682</code>个，通行于中国大陆。新加坡等地也使用此编码。GBK是对GB2312-80的扩展.</p>
<h1 id="Big5"><a href="#Big5" class="headerlink" title="Big5"></a>Big5</h1><p>在台湾、香港与澳门地区，使用的是繁体中文字符集。而1980年发布的<code>GB2312</code>面向简体中文字符集，并不支持繁体汉字。在这些使用繁体中文字符集的地区，一度出现过很多不同厂商提出的字符集编码，这些编码彼此互不兼容，造成了信息交流的困难。为统一繁体字符集编码，1984年，台湾五大厂商宏碁、神通、佳佳、零壹以及大众一同制定了一种繁体中文编码方案，因其来源被称为五大码，英文写作Big5，后来按英文翻译回汉字后，普遍被称为大五码。大五码是一种繁体中文汉字字符集，其中繁体汉字<code>13053</code>个，<code>808</code>个标点符号、希腊字母及特殊符号。</p>
<h1 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h1><p>为什么电子邮件和网页都经常会出现乱码，就是因为信息的提供者可能是日文的ANSI编码体系和信息的读取者可能是中文的编码体系，他们对同一个二进制编码值进行显示，采用了不同的编码，导致乱码。这个问题促使了unicode码的诞生。 如果有一种编码，将世界上所有的符号都纳入其中，无论是英文、日文、还是中文等，大家都使用这个编码表，就不会出现编码不匹配现象。每个符号对应一个唯一的编码，乱码问题就不存在了。这就是Unicode编码。</p>
<p><code>unicode</code>，中文叫万国码，统一码，是统一码联盟为了世界上大多数文字系统进行整理和编码。 和<code>unicode</code>类似，iso组织也在做同样的事情，iso开展了 <code>ISO/IEC 10646</code>项目，名字叫<code>“ Universal Multiple-Octet Coded Character Set”</code>，简称<code>UCS</code>。 后来，双方意识到时间上不需要2套通用的字符集，所以双方开始进行整合，到<code>unicode2.0</code>时，<code>unicode</code>的编码和<code>ucs</code>的编码都基本一致。 但是又略有不同。</p>
<p><code>Unicode</code>深入人心，且<code>UTF-8</code>(Unicode中的一种)大行其道，<code>UCS</code>编码基本被等同于<code>UTF-16</code>，<code>UTF-32</code>了，所以目前UCS基本谈出人们的视野中。</p>
<h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p><code>Unicode</code>固然统一了编码方式，但是它的效率不高，比如<code>UCS-4</code>(Unicode的标准之一)规定用4个字节存储一个符号，那么每个英文字母前都必然有三个字节是0，这对存储和传输来说都很耗资源。 为了提高<code>Unicode</code>的编码效率，于是就出现了<code>UTF-8</code>编码。<code>UTF-8</code>可以根据不同的符号自动选择编码的长短。比如英文字母可以只用1个字节就够了。</p>
<h1 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h1><p><code>UTF-16</code>是<code>Unicode</code>的其中一个使用方式,<code>UTF-16</code>比起<code>UTF-8</code>，好处在于大部分字符都以固定长度的字节 (2字节) 储存，但<code>UTF-16</code>却无法兼容于<code>ASCII</code>编码。</p>
<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><p>有的电子邮件系统(比如国外信箱)不支持非英文字母(比如汉字)传输，这是历史原因造成的(认为只有美国会使用电子邮件?)。因为一个英文字母使用ASCII编码来存储，占存储器的1个字节(8位)，实际上只用了7位2进制来存储，第一位并没有使用，设置为0，所以，这样的系统认为凡是第一位是1的字节都是错误的。而有的编码方案(比如GB2312)不但使用多个字节编码一个字符，并且第一位经常是1，于是邮件系统就把1换成0，这样收到邮件的人就会发现邮件乱码。</p>
<p>为了能让邮件系统正常的收发信件，就需要把由其他编码存储的符号转换成ASCII码来传输。比如，在一端发送GB2312编码－&gt;根据Base64规则－&gt;转换成ASCII码，接收端收到ASCII码－&gt;根据Base64规则－&gt;还原到GB2312编码。</p>
<h1 id="BMP"><a href="#BMP" class="headerlink" title="BMP"></a>BMP</h1><p>UCS-4根据最高位为0的最高字节分成2^7&#x3D;128个group。每个group再根据次高字节分为256个plane。每个plane根据第3个字节分为256行 (rows)，每行包含256个cells。当然同一行的cells只是最后一个字节不同，其余都相同。 group 0的plane 0被称作Basic Multilingual Plane, 即BMP。或者说UCS-4中，高两个字节为0的码位被称作BMP。 将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。在UCS-2的两个字节前加上两个零字节，就得到了UCS-4的BMP。而目前的UCS-4规范中还没有任何字符被分配在BMP之外</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>公众号接入 chatGPT 教程（附源码）</title>
    <url>/2023/02/16/chatgpt-for-wechat/</url>
    <content><![CDATA[<blockquote>
<p>声明：本文仅供技术交流使用，阅读本文需具备一定的开发能力</p>
</blockquote>
<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><ol>
<li>一个域名</li>
<li>一台服务器</li>
<li>一个公众号</li>
</ol>
<h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p>在你的域名服务商新建二级域名并绑定服务器主机IP</p>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>上传下面的python文件到你的服务器，并修改代码段中相应位置代码（token、api-key、port）</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,make_response,request</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_caching <span class="keyword">import</span> Cache</span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">my_wx_token = <span class="string">&quot;&quot;</span> <span class="comment"># 自定义字母和数字组合即可，后续需要填入公众号后台</span></span><br><span class="line">my_gpt_key = <span class="string">&quot;&quot;</span> <span class="comment"># 这里填写你在OpenAI后台创建的API-KEY</span></span><br><span class="line">my_switch_chatgpt = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">env_dist = os.environ</span><br><span class="line">cache = Cache(app, config=&#123;<span class="string">&#x27;CACHE_TYPE&#x27;</span>: <span class="string">&#x27;simple&#x27;</span>, <span class="string">&quot;CACHE_DEFAULT_TIMEOUT&quot;</span>: <span class="number">30</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wechat</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        signature = request.args.get(<span class="string">&quot;signature&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        timestamp= request.args.get(<span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        nonce= request.args.get(<span class="string">&quot;nonce&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        echostr= request.args.get(<span class="string">&quot;echostr&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(signature, timestamp, nonce, echostr)</span><br><span class="line"></span><br><span class="line">        token=my_wx_token</span><br><span class="line"></span><br><span class="line">        data =[token, timestamp, nonce]</span><br><span class="line"></span><br><span class="line">        data.sort()</span><br><span class="line"></span><br><span class="line">        temp = <span class="string">&#x27;&#x27;</span>.join(data)</span><br><span class="line"></span><br><span class="line">        sha1 = hashlib.sha1(temp.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        hashcode=sha1.hexdigest()</span><br><span class="line">        <span class="built_in">print</span>(hashcode)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashcode == signature:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;wechat commit check OK&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> echostr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;GET error input msg&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error-return\r\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xmlData = ET.fromstring(request.stream.read())</span><br><span class="line">        msg_type = xmlData.find(<span class="string">&#x27;MsgType&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> msg_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">            ToUserName = xmlData.find(<span class="string">&#x27;ToUserName&#x27;</span>).text</span><br><span class="line">            FromUserName = xmlData.find(<span class="string">&#x27;FromUserName&#x27;</span>).text</span><br><span class="line">            CreateTime = xmlData.find(<span class="string">&#x27;CreateTime&#x27;</span>).text</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(ToUserName)</span><br><span class="line">            <span class="built_in">print</span>(FromUserName)</span><br><span class="line">            <span class="built_in">print</span>(CreateTime)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">global</span> cnt</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-------&gt; &#x27;</span> + <span class="built_in">str</span>(cnt))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> generate_response_xml(FromUserName, ToUserName, xmlData.find(<span class="string">&#x27;Content&#x27;</span>).text)</span><br><span class="line">                           </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text_reply</span>(<span class="params">FromUserName, ToUserName, output_content</span>):</span><br><span class="line">    reply = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;xml&gt;</span></span><br><span class="line"><span class="string">    &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</span></span><br><span class="line"><span class="string">    &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</span></span><br><span class="line"><span class="string">    &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</span></span><br><span class="line"><span class="string">    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</span></span><br><span class="line"><span class="string">    &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</span></span><br><span class="line"><span class="string">    &lt;/xml&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    response = make_response(reply % (FromUserName, ToUserName, <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())), output_content))</span><br><span class="line">    response.content_type = <span class="string">&#x27;application/xml&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_response_xml</span>(<span class="params">FromUserName, ToUserName, input_content</span>):</span><br><span class="line">    output_content = generate_response(input_content)</span><br><span class="line">    <span class="keyword">return</span> text_reply(FromUserName, ToUserName, output_content)</span><br><span class="line"></span><br><span class="line">outofsevice_txt = <span class="string">&quot;抱歉，&lt;a href=\&quot;https://mp.weixin.qq.com/s/0LN37YiERJgMyvIDpzRcAQ\&quot;&gt;攻城狮杰森的ChatGPT服务助手&lt;/a&gt;正在维护中，暂时无法预估维护持续时间，请明天再来尝试吧。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cache.memoize(<span class="params">timeout=<span class="number">60</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_response</span>(<span class="params">prompt</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> my_switch_chatgpt:</span><br><span class="line">        <span class="keyword">return</span> outofsevice_txt</span><br><span class="line">        </span><br><span class="line">    openai.api_key = my_gpt_key</span><br><span class="line">    </span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">        model=<span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        temperature=<span class="number">0</span>,</span><br><span class="line">        max_tokens=<span class="number">1024</span>,</span><br><span class="line">        top_p=<span class="number">1</span>,</span><br><span class="line">        frequency_penalty=<span class="number">0.0</span>,</span><br><span class="line">        presence_penalty=<span class="number">0.0</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    message = response.choices[<span class="number">0</span>].text</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    </span><br><span class="line">    ans = message.strip()</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">               </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=xxxx, debug=<span class="literal">True</span>)<span class="comment">#开放xxxx端口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<strong>宝塔</strong>是比较快捷的配置方式，安装宝塔面板后，进入<strong>软件商店</strong>，安装下面两个插件</p>
<p><img src="https://img-blog.csdnimg.cn/f2afb78b514c433089ea7eca423c93a1.png"></p>
<p>打开 <strong>python 项目管理器</strong> ，简单配置下我们要启动的项目</p>
<p><img src="https://img-blog.csdnimg.cn/45312fd500064250acdcd551b10811d5.png"></p>
<p>启动后映射项目域名，顶级域和二级域都可以，比如我这里填入的是 <code>chatgpt.coder-jason.cn</code> </p>
<p><img src="https://img-blog.csdnimg.cn/aef70f2d35f74717a0c8ebcca5ecaff1.png"></p>
<h1 id="公众号配置"><a href="#公众号配置" class="headerlink" title="公众号配置"></a>公众号配置</h1><p>进入公众号后台，找到<strong>设置与开发</strong>，进入<strong>基本配置</strong>，由于我这里已经配置好了，这里仅演示下怎么添加启用</p>
<p><img src="https://img-blog.csdnimg.cn/584e6501e75344feb6f1d59b15dd280b.png"></p>
<p>点击<strong>添加配置</strong></p>
<p><img src="https://img-blog.csdnimg.cn/53196088a4ec47caa23c0884618b011f.png"></p>
<p>token 值就是在上述代码段中填入的值，自定义字母和数字组合即可</p>
<p>点击提交后，如果服务器中的项目启动无误，则会提示 <strong>token校验成功</strong></p>
<p><img src="https://img-blog.csdnimg.cn/28eeabde89f2455996d74124a0940b7e.png"></p>
<p>接下来就可以回到公众号和 chatGPT 愉快的交流啦~，欢迎来公粽号 <strong>攻城狮杰森</strong> 体验</p>
<p><img src="https://img-blog.csdnimg.cn/ef7646192602477a82e129abf7d888c8.jpeg"></p>
<p>如果你对 chatGPT 感兴趣或配置过程中遇到任何问题，欢迎与我取得联系，vx：jasoni996</p>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用命令将代码推送到远端</title>
    <url>/2021/09/18/cmd-push-code/</url>
    <content><![CDATA[<blockquote>
<p>环境配置完成后，使用如下的命令快速完成代码推送</p>
</blockquote>
<h1 id="git命令推送步骤"><a href="#git命令推送步骤" class="headerlink" title="git命令推送步骤"></a>git命令推送步骤</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init	//初始化本地仓库</span><br><span class="line"></span><br><span class="line">git remote add origin URL	//添加远程</span><br><span class="line"></span><br><span class="line">git add .	//添加所有文件到暂存区,add后可跟单个文件</span><br><span class="line"></span><br><span class="line">git commit -m<span class="string">&quot;注释&quot;</span>    //提交,提交备注</span><br><span class="line"></span><br><span class="line">git push  --set-upstream origin master    //第一次需配置分支</span><br><span class="line"></span><br><span class="line">git push    //推送到远程</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f --set-upstream origin master</span><br></pre></td></tr></table></figure>
<p>如果是协同开发，为了避免后期出现问题，还是不要用的好</p>
<blockquote>
<p>如果在开发过程中遇到了文件”丢失”的问题，可以这样解决</p>
</blockquote>
<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>纳入版本控制的文件并不会“丢失”，这里所说的丢失只是因为你的操作在本地看不到了，但是远端仓库都会保留，只是暂时性“隐藏”</p>
<p><code>git</code> 会记录你每一步的操作，这也正是我们将代码纳入版本控制的原因之一</p>
<p>比如我早上刚刚提交的代码，过了个周末就不见了，真是吓得我出了一身冷汗，莫慌，我们这样解决</p>
<p><img src="https://img-blog.csdnimg.cn/6cdb202220a947d8a70dabb2e198e6fa.png"></p>
<p>项目名称位置右键找到本地历史，选中修改的版本完成回退</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python | Java】代码绘制圣诞树</title>
    <url>/2021/12/14/code-draw-christmas-tree/</url>
    <content><![CDATA[<blockquote>
<p>马上圣诞节了，祝大家圣诞快乐，快来看看程序员的圣诞节都做了什么</p>
</blockquote>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/4805d7a5daf0487192f813c5dab13b5e.gif"></p>
<span id="more"></span>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: coder-jason</span></span><br><span class="line"><span class="string">Date: 2021-12-14 15:49:17</span></span><br><span class="line"><span class="string">LastEditTime: 2021-12-14 16:21:45</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n = <span class="number">94.0</span> <span class="comment"># main line height</span></span><br><span class="line"></span><br><span class="line">speed(<span class="string">&quot;normal&quot;</span>) <span class="comment"># setting speeds: fast slow fastest slowest</span></span><br><span class="line">setup(<span class="number">700</span>,<span class="number">650</span>)  <span class="comment"># setting window size</span></span><br><span class="line">screensize(bg=<span class="string">&#x27;seashell&#x27;</span>)</span><br><span class="line">left(<span class="number">90</span>)</span><br><span class="line">forward(<span class="number">3</span> * n)</span><br><span class="line">color(<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line">left(<span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    forward(n / <span class="number">5</span>)</span><br><span class="line">    right(<span class="number">144</span>)</span><br><span class="line">    forward(n / <span class="number">5</span>)</span><br><span class="line">    left(<span class="number">72</span>)</span><br><span class="line">end_fill()</span><br><span class="line">right(<span class="number">126</span>)</span><br><span class="line"></span><br><span class="line">color(<span class="string">&quot;dark green&quot;</span>)</span><br><span class="line">backward(n * <span class="number">4.8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">d, s</span>):</span><br><span class="line">    <span class="keyword">if</span> d &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    forward(s)</span><br><span class="line">    tree(d - <span class="number">1</span>, s * <span class="number">.8</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    tree(d - <span class="number">3</span>, s * <span class="number">.5</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    tree(d - <span class="number">3</span>, s * <span class="number">.5</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    backward(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree(<span class="number">15</span>, n)</span><br><span class="line">backward(n / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    a = <span class="number">200</span> - <span class="number">400</span> * random.random()</span><br><span class="line">    b = <span class="number">10</span> - <span class="number">20</span> * random.random()</span><br><span class="line">    up()</span><br><span class="line">    forward(b)</span><br><span class="line">    left(<span class="number">90</span>)</span><br><span class="line">    forward(a)</span><br><span class="line">    down()</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">        color(<span class="string">&#x27;tomato&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        color(<span class="string">&#x27;wheat&#x27;</span>)</span><br><span class="line">    circle(<span class="number">2</span>)</span><br><span class="line">    up()</span><br><span class="line">    backward(a)</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    backward(b)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/9c40fb51e6f64a669fc74f1e1b181405.gif"></p>
<h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><h3 id="Start-类"><a href="#Start-类" class="headerlink" title="Start 类"></a>Start 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2021-12-14 15:26:49</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-12-14 16:43:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.christmasTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Start</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Frame-类"><a href="#Frame-类" class="headerlink" title="Frame 类"></a>Frame 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2021-12-14 15:26:49</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-12-14 16:43:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.christmasTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Frame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    Panel p;</span><br><span class="line"></span><br><span class="line">    Frame() &#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        add(p);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">650</span>, <span class="number">500</span>); <span class="comment">//设置窗口尺寸和位置 x,y坐标 width,height窗口宽高</span></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        validate();</span><br><span class="line">        setDefaultCloseOperation(Frame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Panel-类"><a href="#Panel-类" class="headerlink" title="Panel 类"></a>Panel 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.christmasTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.Applet;</span><br><span class="line"><span class="keyword">import</span> java.applet.AudioClip;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Panel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    JButton onOff;</span><br><span class="line">    Timer time;</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="type">boolean</span> color;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;your music location&quot;</span>);</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">AudioClip</span> <span class="variable">clip</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    Panel() &#123;</span><br><span class="line">        setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;off.png&quot;</span>);</span><br><span class="line">        icon.setImage(icon.getImage().getScaledInstance(<span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>));</span><br><span class="line">        onOff = <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        onOff.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        onOff.setIcon(icon);</span><br><span class="line">        onOff.setBorder(<span class="literal">null</span>);</span><br><span class="line">        onOff.setContentAreaFilled(<span class="literal">false</span>);</span><br><span class="line">        onOff.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        add(onOff);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        color = <span class="literal">true</span>;</span><br><span class="line">        time = <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">300</span>, <span class="built_in">this</span>);</span><br><span class="line">        time.stop();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            uri = file.toURI();</span><br><span class="line">            url = uri.toURL();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e1) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        clip = Applet.newAudioClip(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        x = <span class="number">380</span>;</span><br><span class="line">        y = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (color) &#123;</span><br><span class="line">            <span class="type">ImageIcon</span> <span class="variable">image1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;star1.png&quot;</span>);</span><br><span class="line">            g.drawImage(image1.getImage(), x - <span class="number">3</span>, y - <span class="number">25</span>, <span class="number">28</span>, <span class="number">26</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ImageIcon</span> <span class="variable">image1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;star2.png&quot;</span>);</span><br><span class="line">            g.drawImage(image1.getImage(), x - <span class="number">3</span>, y - <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">red</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">Color</span> <span class="variable">yellow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">241</span>, <span class="number">0</span>);</span><br><span class="line">        drawTree(<span class="number">1</span>, <span class="number">4</span>, g);</span><br><span class="line">        <span class="keyword">if</span> (color) &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">6</span>, yellow, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">8</span>, red, g);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">6</span>, red, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">8</span>, yellow, g);</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">380</span> - <span class="number">2</span> * <span class="number">22</span>;</span><br><span class="line">        drawTree(<span class="number">3</span>, <span class="number">6</span>, g);</span><br><span class="line">        <span class="keyword">if</span> (color) &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">10</span>, yellow, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">12</span>, red, g);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">10</span>, red, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">12</span>, yellow, g);</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">380</span> - <span class="number">4</span> * <span class="number">22</span>;</span><br><span class="line">        drawTree(<span class="number">5</span>, <span class="number">8</span>, g);</span><br><span class="line">        <span class="keyword">if</span> (color) &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">14</span>, yellow, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">16</span>, red, g);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawDecoration(x + <span class="number">22</span>, y - <span class="number">44</span>, <span class="number">14</span>, red, g);</span><br><span class="line">            drawDecoration(x, y - <span class="number">22</span>, <span class="number">16</span>, yellow, g);</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">380</span> - <span class="number">1</span> * <span class="number">22</span>;</span><br><span class="line">        drwaRoot(g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawTree</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, Graphics g)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">9</span>, <span class="number">124</span>, <span class="number">37</span>);</span><br><span class="line">        g.setColor(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> from; i &lt;= to; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (i * <span class="number">2</span> - <span class="number">1</span>); j++) &#123;</span><br><span class="line">                g.fillRect(x, y, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">                x += <span class="number">22</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = <span class="number">380</span> - i * <span class="number">22</span>;</span><br><span class="line">            y += <span class="number">22</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawDecoration</span><span class="params">(<span class="type">int</span> tx, <span class="type">int</span> ty, <span class="type">int</span> num, Color c, Graphics g)</span> &#123;</span><br><span class="line">        g.setColor(c);</span><br><span class="line">        g.fillRoundRect(tx, ty, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">        g.fillRoundRect(tx + num * <span class="number">22</span>, ty, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drwaRoot</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">131</span>, <span class="number">78</span>, <span class="number">0</span>);</span><br><span class="line">        g.setColor(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                g.fillRect(x, y, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">                x += <span class="number">22</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = <span class="number">380</span> - <span class="number">1</span> * <span class="number">22</span>;</span><br><span class="line">            y += <span class="number">22</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == onOff) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;on.png&quot;</span>);</span><br><span class="line">                icon.setImage(icon.getImage().getScaledInstance(<span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>));</span><br><span class="line">                onOff.setIcon(icon);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                clip.loop();</span><br><span class="line">                time.restart();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;off.png&quot;</span>);</span><br><span class="line">                icon.setImage(icon.getImage().getScaledInstance(<span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>));</span><br><span class="line">                onOff.setIcon(icon);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                time.stop();</span><br><span class="line">                clip.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == time) &#123;</span><br><span class="line">            repaint();</span><br><span class="line">            color = !color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/5b03a8744c8c42f69d1bacf73fbf7cc2.png"></p>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>拷贝构造函数剖析</title>
    <url>/2021/05/08/copy-constructor-function-explain/</url>
    <content><![CDATA[<h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><blockquote>
<p>解释：拷贝构造函数是一种特殊的构造函数，它具有一般构造函数的所有特性，但其形参是本类对象的引用</p>
</blockquote>
<blockquote>
<p>作用：使用一个已经存在的对象（由拷贝构造函数参数指定）去初始化同类的一个新对象</p>
</blockquote>
<blockquote>
<p>定义格式：<strong>构造函数名 （&amp;类名）；</strong></p>
</blockquote>
<span id="more"></span>

<p>三种使用情况</p>
<div class="note info"><ol>
<li>用一个对象去初始化同类的另一个对象；</li>
<li>函数的形参是类的对象，调用函数时形参与实参的结合；</li>
<li>函数返回值是类的对象，函数执行返回调用；</li>
</ol>
</div>

<p>注意</p>
<div class="note danger"><ol>
<li>拷贝构造函数的参数采用引用方式。若把一个真实的类对象作为参数传到拷贝构造函数，引起无穷递归;</li>
<li>拷贝构造函数的名字必须与类名相同，且无返回值;</li>
<li>拷贝构造函数只有一个参数，必须为本类对象的引用；</li>
<li>每一个类必须有一个拷贝构造函数。若用户定义类时未给出拷贝构造函数，则系统会自动产生一个缺省的拷贝构造函数;</li>
</ol>
</div>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>该例重点阐述：为什么拷贝构造函数的参数必须为同类对象的引用?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="type">double</span> real, image;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i);   <span class="comment">//声明构造函数</span></span><br><span class="line">		<span class="built_in">Complex</span>(Complex &amp;c);           <span class="comment">//声明拷贝构造函数 </span></span><br><span class="line">		<span class="function">Complex <span class="title">add</span><span class="params">(Complex c)</span></span>;</span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i): <span class="built_in">real</span>(r), <span class="built_in">image</span>(i) &#123;   <span class="comment">//构造函数初始化列表</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;调用两个参数的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(Complex &amp;c) &#123;</span><br><span class="line">	real = c.real;</span><br><span class="line">	image = c.image;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; real &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; image &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">Complex::add</span><span class="params">(Complex c)</span> </span>&#123;</span><br><span class="line">	<span class="function">Complex  <span class="title">y</span><span class="params">(real + c.real, image + c.image)</span></span>;</span><br><span class="line">	<span class="keyword">return</span>  y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(Complex n)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;n=&quot;</span>;</span><br><span class="line">	n.<span class="built_in">Output</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">3.0</span>, <span class="number">4.0</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">5.6</span>, <span class="number">7.9</span>)</span></span>;  <span class="comment">//创建Complex类的两个对象a,b</span></span><br><span class="line">	<span class="function">Complex <span class="title">c</span><span class="params">(a)</span></span>;                      <span class="comment">//使用拷贝构造函数,用已创建的对象a初始化要建立的另一个对象c</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a=&quot;</span>;</span><br><span class="line">	a.<span class="built_in">Output</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c=&quot;</span>;</span><br><span class="line">	c.<span class="built_in">Output</span>();</span><br><span class="line">	<span class="built_in">f</span>(b);</span><br><span class="line">	c = a.<span class="built_in">add</span>(b);</span><br><span class="line">	c.<span class="built_in">Output</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">调用两个参数的构造函数</span><br><span class="line">调用两个参数的构造函数</span><br><span class="line">调用拷贝构造函数</span><br><span class="line">a=(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">c=(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">调用拷贝构造函数</span><br><span class="line">n=(<span class="number">5.6</span>,<span class="number">7.9</span>)</span><br><span class="line">调用拷贝构造函数</span><br><span class="line">调用两个参数的构造函数</span><br><span class="line">(<span class="number">8.6</span>,<span class="number">11.9</span>)</span><br></pre></td></tr></table></figure>

<div class="note info"><ol>
<li>本例中，当程序执行到main()函数 Complex c(a); 语句时，程序会到拷贝构造函数完成“用存在的类对象a，初始化c的工作”。但是，若此时拷贝构造函数的参数是一个真实的类对象而非同类对象的引用，则无法完成对类对象c的初始化工作</li>
<li>因为没有一块儿内存空间去接收传递的对象，&amp;c就相当于是a的一个别称，该临时对象用于完成对c的赋值，拷贝构造函数定义中 real&#x3D;c.real; real就是c的实部,c.real就是用a的实部去给c的实部赋值,虚部部分同理,所以会无限次调用该函数，即引起无穷递归</li>
</ol>
</div>


]]></content>
      <categories>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSS】设置 border 长度</title>
    <url>/2022/04/04/css-border-length/</url>
    <content><![CDATA[<h1 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h1><blockquote>
<p>如何实现 <strong>在线课程</strong> 字体下方的 <strong>短横线</strong> 样式效果</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/c343f1537cc941c4b3be74f822405453.png"></p>
<span id="more"></span>

<h1 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h1><h2 id="1-常规方案"><a href="#1-常规方案" class="headerlink" title="1.常规方案"></a>1.常规方案</h2><p>看到这样的样式效果，大多数人首先想到的一定是 <code>border-bottom</code> 吧，但是真正写在 <code>css</code> 中，你会发现，效果是这样的</p>
<p><img src="https://img-blog.csdnimg.cn/d1842b761b974e828e12ef4eebb0ba17.png"></p>
<p>实现了，却又好像没实现，无法设置长度，那么下面我们试着换一种思路去实现这个效果</p>
<h2 id="2-优化方案"><a href="#2-优化方案" class="headerlink" title="2.优化方案"></a>2.优化方案</h2><p>我们不要把这个短横线看做 <strong>border</strong> ，使用 <strong>伪元素</strong> 实现，可以随意更改大小、宽度、长度等，非常的方便</p>
<p><strong>伪元素</strong></p>
<blockquote>
<p>用于设置元素指定部分的样式，可用于设置元素的首字母、首行的样式，在元素的内容之前或之后插入内容等</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector::pseudo-element &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">	<span class="comment">/* 必须设置 content 属性才能生效 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* border 宽度 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="comment">/* border 高度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="comment">/* border 位置 absolute(绝对定位) */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">295px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">705px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">918px</span>;</span><br><span class="line">    <span class="comment">/* 自动内减 */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h1><blockquote>
<p>抽象上述代码为通用格式，日后可应用在其他场景下</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc0MTg2Ny9hcnRpY2xlL2RldGFpbHMvMTA0OTYwNjY4">border-position属性详解<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Web 前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>一文辨析 Java、JSP、JavaScript</title>
    <url>/2022/03/31/distinction-language/</url>
    <content><![CDATA[<blockquote>
<p>还在傻傻分不清？Java、JSP、JavaScript ，本文带你辨析其区别与联系</p>
</blockquote>
<span id="more"></span>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><img src="https://img-blog.csdnimg.cn/b7b065f2953d475c9bda7f7301c2b923.png"></p>
<p><strong>文件格式：</strong> <code>.java</code></p>
<p>Java 是印度尼西亚“爪哇岛”的英文名，因气候环境，地理位置等因素盛产咖啡而闻名。Java 语言中的许多命名都与其有关：如<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9KYXZhQmVhbnMvNTE1NTYxMg==">JavaBeans<i class="fa fa-external-link-alt"></i></span>。所以 Sun 和 Java 的 Logo 是个非常形象的图标—冒热气儿的咖啡</p>
<p>早期的 Java 只是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TdW4lMjBNaWNyb3N5c3RlbXM=">Sun MicroSystems<i class="fa fa-external-link-alt"></i></span>公司在 1990 年 12 月开始研究的一个内部项目。Sun 公司一位名为帕特里克·诺顿的工程师因为其公司难于操作的 C++&#x2F;C 语言编译器而决定改用<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9uZXh0LzE3MTk0OTY=">NeXT<i class="fa fa-external-link-alt"></i></span>，同时他也获得了研究公司的一个叫做 “Stealth 计划” 的项目的机会</p>
<p>“Stealth 计划”后来改名为“Green 计划”，詹姆斯·高斯林和 Mike Sheridan 也加入了帕特里克的工作小组。根据有限资金，乔伊决定开发一种集 C 语言和 Mesa 语言大成的新语言，在一份报告上，乔伊把它叫做“未来”。他将要创造出一种全新的语言，被他命名为 “Oak”，以办公室外的橡树命名</p>
<blockquote>
<p>总结：<code>Java</code> 是一种广泛使用的计算机<strong>编程语言</strong>，广泛应用于企业级 Web 应用开发和移动应用开发</p>
</blockquote>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p><img src="https://img-blog.csdnimg.cn/b9a8008a90ce4894a2043805fc860148.png"></p>
<p><strong>文件格式：</strong> <code>.jsp</code></p>
<p>JSP（JavaServer Pages）由 Sun Microsystems 公司主导创建的一种<strong>动态网页技术标准</strong>。JSP 部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者</p>
<p>从上面的两张图片也可看出来，JSP 和 Java 编程语言存在联系，没错，JSP 技术<strong>以Java语言作为脚本语言</strong>，为用户的 HTTP 请求提供服务，并能与服务器上的其它 Java 程序共同处理复杂的业务需求</p>
<blockquote>
<p>总结：<code>JSP</code> 主要部署在服务器，构建动态网页</p>
</blockquote>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p><img src="https://img-blog.csdnimg.cn/102ea97610ca47bc809117197c505170.png"></p>
<p><strong>文件格式：</strong> <code>.js</code></p>
<p>JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言，是 Web 编程语言，几乎所有现代的 HTML 页面都使用 JavaScript，人们通常将 <code>html</code>、<code>css</code>、<code>javascript</code> 称为<strong>前端三件套</strong></p>
<p>&#x3D;&#x3D;JavaScript 不缩写为 JSP，这里一定不要弄混淆了！！！&#x3D;&#x3D;</p>
<p>JS 中有一条比较有意思的定律：</p>
<p><strong>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript .</strong></p>
<p>意思是说，<strong>任何可以用 JavaScript 编写的应用程序，最终都会用 JavaScript 编写</strong></p>
<p>这足以体现它的重要性</p>
<blockquote>
<p>总结：<code>JavaScript</code> 是一种脚本，一种计算机编程语言，用于在网页上实现复杂的功能</p>
</blockquote>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNvZGluZ2hvcnJvci5jb20vdGhlLXByaW5jaXBsZS1vZi1sZWFzdC1wb3dlcg==">The Principle of Least Power<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>秒懂 Git 与 Gitee（码云）</title>
    <url>/2021/08/02/distinguish-git-gitee/</url>
    <content><![CDATA[<h1 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h1><p>声明一个误区：Git并不是我们常用的GitHub，GitHub是基于Git的代码托管服务平台，而Git则是分布式版本控制系统。相信不少人都认为他们是同一个东西，最开始我也这么认为。</p>
<span id="more"></span>
<h1 id="Git环境"><a href="#Git环境" class="headerlink" title="Git环境"></a>Git环境</h1><p>既然要使用Git，那么我们首先就要安装并配置Git的环境，<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">点击这里<i class="fa fa-external-link-alt"></i></span>下载（Windows操作系统），点击Download按钮即可</p>
<image src="https://img-blog.csdnimg.cn/2348e786eb7a4c2da133338a12aa6670.png" width="80%">

<p>安装过程不再叙述，直接使用默认配置，一“Next(站)” 到底</p>
<p>下面我们配置环境变量信息（前段时间的博客中已经详细解释过，不了解的朋友可以<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTg4NzU5Njc=">点击这里<i class="fa fa-external-link-alt"></i></span>查看），打开 Path 变量后，添加本地环境安装目录【确认好文件到达 cmd 】</p>
<p><img src="https://img-blog.csdnimg.cn/3c49d776d6dd4ee4bc20bb3bde0cb9ba.png"></p>
<p>安装完成后，你可能没有看到桌面的快捷方式，不要着急。我们在Windows搜索框中搜索Git就可以看到这样几个图标</p>
<p><img src="https://img-blog.csdnimg.cn/ba1113bb892c45d6bbf5906242cf2de4.png"></p>
<p>可以直接点击 Git Bash 或者在桌面任意位置右键，打开 Git Bash Here</p>
<p><img src="https://img-blog.csdnimg.cn/1d89848f17c144a6a3823098892c6c44.png"></p>
<p>Git 提供了一个叫做 git config 的工具，用来配置、读取相应的工作环境变量。我们使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的昵称&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>命令配置个人的用户名称和电子邮件信息。</p>
<p>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<p>查看已有配置信息</p>
<p>列举一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init  //初始化仓库</span><br><span class="line">git add . //添加文件到暂存区</span><br><span class="line">git commit -m <span class="string">&quot;注释信息&quot;</span>  //提交暂存区内容到仓库中</span><br><span class="line">git status  //查看仓库状态，显示修改文件</span><br><span class="line">git <span class="built_in">clone</span>  //下载远程仓库中的项目</span><br><span class="line">git remote //查看现有的远程库</span><br><span class="line"></span><br><span class="line">git pull //下载远程库代码并合并</span><br><span class="line">git push //推送代码到远程</span><br></pre></td></tr></table></figure>



<h1 id="链接Gitee"><a href="#链接Gitee" class="headerlink" title="链接Gitee"></a>链接Gitee</h1><p>虽然我忠爱GitHub，但是由于网络问题，使用Gitee还是较多；首先你需要有一个码云账号，<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20v">点击这里<i class="fa fa-external-link-alt"></i></span>注册，进去之后右上角头像位置找到SSH公钥添加位置。</p>
<image src="https://img-blog.csdnimg.cn/49e41598e4014fd4a935815f914a6458.png" width="75%">

<p>我们在桌面右键进入git bash here，运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>因为我已经添加过了，所以提示：“是否再次写入？”，注意：这里输入邮箱回车后，&#x3D;&#x3D;不要输密码，不要输密码，不要输密码！！！&#x3D;&#x3D;（重要的事情说三遍）不然你会发现以后每次上传时仍然需要输入密码【不是吧，不是吧，不会还有人想每次提交都输一遍密码吧（有的话请略过该条）emmm..】</p>
<p>在本地路径下找到 id_rsa.pub 文件，记事本打开后复制里面的内容</p>
<p><img src="https://img-blog.csdnimg.cn/24777a7eb4794cadb4d0ce999c34f3ed.png"></p>
<p>然后粘贴在Gitee这里，标题可以更改（一般输入的邮箱就是标题，自动生成），保存即可</p>
<image src="https://img-blog.csdnimg.cn/6f1e73dfa6c049ea802b11127117de0f.png" width="90%">

<p>现在就可以去体验Git的妙用啦！！</p>
<hr>
<p>Tips：IDEA中的使用都会有对应的按钮进行操作，比命令行更方便，使用方法一致，不同的状态还有不同的颜色标识提示，快去试试吧。</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Dos 命令运行 Java 版 HelloWorld</title>
    <url>/2021/08/30/dos-java-helloworld/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>写给刚刚入坑 Java 的各位，无论你是计算机领域从业者，亦或是科班出身的专业人才。当然也包括我在内，Hello World 相信大家都不陌生，找了好久才找到我入行以来的第一段程序</p>
<image src="https://img-blog.csdnimg.cn/68bda6e17f79487e825d2e0d13c87438.png" width="50%">

<p>有没有让你回想起当年用 VC ++ 6.0 码代码的日子呢？像 Python、C、C++、VB 等编程语言，它们有着不同的语法结构，实现方式各不相同，今天使用 Dos命令实现 Java 版 Hello World</p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>在这之前请确保设备已安装好 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9qZGsvMTAxMQ==">JDK<i class="fa fa-external-link-alt"></i></span>，配置详情<span class="exturl" data-url="aHR0cHM6Ly9kcC1qc29uLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzExODg3NTk2Nw==">参阅这里<i class="fa fa-external-link-alt"></i></span><br>D盘下建立 HelloWorld.txt 文件，输入代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另存文件格式为 <mark class="label ">.java</mark></p>
<image src="https://img-blog.csdnimg.cn/6d9c585f1af44388af9572a89483836e.png" width="65%">

<p>组合键 <a class="btn" href="#">Windows</a>+<a class="btn" href="#">R</a>，输入 cmd 打开命令提示工具 cmd.exe</p>
<image src="https://img-blog.csdnimg.cn/383d0fffa9ca4ff1aad0aacb4e15657a.png" width="40%">

<p>依次输入命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d:                         <span class="comment">//切换到该目录下</span></span><br><span class="line">javac HelloWorld.java      <span class="comment">//javac:编译器,将程序转换成字节码</span></span><br><span class="line">java HelloWorld            <span class="comment">//java:运行编译后的java程序(文件后缀.class)</span></span><br></pre></td></tr></table></figure>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><image src="https://img-blog.csdnimg.cn/419c6eb0be714bf88cf460f7b5f7f875.png" width="50%">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【Emmet —— HTML + CSS】 超实用开发技巧</title>
    <url>/2022/03/29/emmet-html-css/</url>
    <content><![CDATA[<h1 id="Emmet-介绍"><a href="#Emmet-介绍" class="headerlink" title="Emmet 介绍"></a>Emmet 介绍</h1><blockquote>
<p>Emmet (前身为： Zen Coding) 是一个能大幅度提高前端开发效率的一个工具。在前端开发的过程中，一大部分的工作是写 HTML、CSS 代码。特别是手动编写 HTML 代码的时候，效率会特别低下，因为需要敲打很多尖括号，而且很多标签都需要闭合标签等<br>于是，就有了 Emmet，它可以极大的提高代码编写的效率，它提供了一种非常简练的语法规则，然后立刻生成对应的 HTML 结构或者 CSS 代码，同时还有多种实用的功能帮助进行前端开发（源：Wikipedia）</p>
</blockquote>
<p>简单来说，<code>Emmet</code> 能帮助我们快速进行前端代码的编写，在主流开发工具 <code>Vscode</code> 中也已集成。我们只需要键入相应标签的缩略语，按 <code>Tab</code> 键就可快速生成对应代码，下面介绍几组开发中常用的语法</p>
<span id="more"></span>

<h1 id="常用语法格式"><a href="#常用语法格式" class="headerlink" title="常用语法格式"></a>常用语法格式</h1><table>
<thead>
<tr>
<th>名称</th>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>类选择器</td>
<td>.blue</td>
<td><code>&lt;div class=&quot;blue&quot;&gt;&lt;div&gt;</code></td>
</tr>
<tr>
<td>id 选择器</td>
<td>#test</td>
<td><code>&lt;div id=&quot;test&quot;&gt;&lt;div&gt;</code></td>
</tr>
<tr>
<td>子代选择器</td>
<td>ul&gt;li</td>
<td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>交集选择器</td>
<td>p.blue#test</td>
<td><code>&lt;p class=&quot;blue&quot; id=&quot;test&quot;&gt;&lt;/p&gt;</code></td>
</tr>
<tr>
<td>标签名称</td>
<td>span</td>
<td><code>&lt;span&gt;&lt;/span&gt;</code></td>
</tr>
<tr>
<td>多层级样式</td>
<td>ul&gt;li*3</td>
<td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>内嵌文本</td>
<td>ul&gt;li{ li 文本内容 }</td>
<td><code>&lt;ul&gt;&lt;li&gt; li 文本内容 &lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>换行</td>
<td>br</td>
<td><code>&lt;br&gt;</code></td>
</tr>
<tr>
<td>分割线</td>
<td>hr</td>
<td><code>&lt;hr&gt;</code></td>
</tr>
<tr>
<td>btn</td>
<td>ul&gt;li{ li 文本内容 }</td>
<td><code>&lt;button&gt;&lt;/button&gt;</code></td>
</tr>
</tbody></table>
<h1 id="扩展示例"><a href="#扩展示例" class="headerlink" title="扩展示例"></a>扩展示例</h1><h2 id="信息输入"><a href="#信息输入" class="headerlink" title="信息输入"></a>信息输入</h2><table>
<thead>
<tr>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>input</td>
<td><code>&lt;input type=&quot;text&quot;&gt;</code></td>
</tr>
<tr>
<td>input:radio</td>
<td><code>&lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>input:checkbox</td>
<td><code>&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>input:email</td>
<td><code>&lt;input type=&quot;email&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>input:password</td>
<td><code>&lt;input type=&quot;password&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>inp</td>
<td><code>&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>input:hidden &#x2F; input:h</td>
<td><code>&lt;input type=&quot;hidden&quot; name=&quot;&quot;&gt;</code></td>
</tr>
</tbody></table>
<h2 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h2><table>
<thead>
<tr>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>btn</td>
<td><code>&lt;button&gt;&lt;/button&gt;</code></td>
</tr>
<tr>
<td>btn:r</td>
<td><code>&lt;button type=&quot;reset&quot;&gt;&lt;/button&gt;</code></td>
</tr>
<tr>
<td>btn:s</td>
<td><code>&lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;</code></td>
</tr>
</tbody></table>
<h2 id="HTML-标准"><a href="#HTML-标准" class="headerlink" title="HTML 标准"></a>HTML 标准</h2><table>
<thead>
<tr>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>html:4s</td>
<td><code>生成 html4 严格文档类型，DOCTYPE 为 html 4.01 </code></td>
</tr>
<tr>
<td>html:5</td>
<td><code>生成 html5 标准的包含 body 为空基本 DOM </code></td>
</tr>
<tr>
<td>html:xt</td>
<td><code>生成 html 过渡文档类型，DOCTYPE 为 xhtml </code></td>
</tr>
</tbody></table>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><table>
<thead>
<tr>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>a:link</td>
<td><code>&lt;a href=&quot;http://&quot;&gt;&lt;/a&gt; </code></td>
</tr>
<tr>
<td>a:mail</td>
<td><code>&lt;a href=&quot;mailto:&quot;&gt;&lt;/a&gt;</code></td>
</tr>
<tr>
<td>link</td>
<td><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>base</td>
<td><code>&lt;base href=&quot;&quot;&gt;</code></td>
</tr>
</tbody></table>
<h2 id="样式类"><a href="#样式类" class="headerlink" title="样式类"></a>样式类</h2><table>
<thead>
<tr>
<th>Emmet 格式</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>form:get</td>
<td><code>&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code></td>
</tr>
<tr>
<td>option</td>
<td><code>&lt;option value=&quot;&quot;&gt;&lt;/option&gt;</code></td>
</tr>
<tr>
<td>bq</td>
<td><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></td>
</tr>
<tr>
<td>label</td>
<td><code>&lt;label for=&quot;&quot;&gt;&lt;/label&gt;</code></td>
</tr>
<tr>
<td>base</td>
<td><code>&lt;base href=&quot;&quot;&gt;</code></td>
</tr>
<tr>
<td>bgi</td>
<td><code>background-image: url();</code></td>
</tr>
<tr>
<td>bgr</td>
<td><code>background-repeat: no-repeat;</code></td>
</tr>
<tr>
<td>bgc</td>
<td><code>background-color: #fff;</code></td>
</tr>
<tr>
<td>bgp</td>
<td><code>background-position: 0 0;</code></td>
</tr>
</tbody></table>
<h1 id="Vscode-演示"><a href="#Vscode-演示" class="headerlink" title="Vscode 演示"></a>Vscode 演示</h1><p><code>!</code> + <code>Tab</code> 快速生成 <code>Html</code> 主体框架</p>
<p><img src="https://img-blog.csdnimg.cn/83aefac7efc344c1ab8b1cbb9ab72bbc.gif"></p>
<p>部分常用标签演示</p>
<p><img src="https://img-blog.csdnimg.cn/0d2d44cee8df4b5db241c7e208cec53f.gif"></p>
<p><img src="https://img-blog.csdnimg.cn/9251dfe00a314a01b7596f137841d243.gif"></p>
]]></content>
      <categories>
        <category>Web 前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>练习1—数据逆序存放</title>
    <url>/2021/08/07/exercise1/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写程序，将一个数组中的值按逆序重新存放。例如原来顺序为：8，6，5，4，1，要求改为：1，4，5，6，8。</p>
</blockquote>
<span id="more"></span>

<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）建立两个存放数据的数组；<br>（2）for循环输出原数据顺序；<br>（3）逆序；<br>（4）复制；<br>（4）for循环输出新数据顺序；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="type">int</span>[] array1 =&#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;,array2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">       System.out.print(<span class="string">&quot;The original data order:&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           System.out.print(array1[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125; <span class="comment">//old array</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">4</span>; i &lt; <span class="number">5</span>; i++, j--) &#123;</span><br><span class="line">           array2[i] = array1[j];</span><br><span class="line">       &#125; <span class="comment">// reverse order</span></span><br><span class="line">       System.arraycopy(array2, <span class="number">0</span>, array1, <span class="number">0</span>, <span class="number">5</span>);  <span class="comment">// put back</span></span><br><span class="line">       System.out.println();</span><br><span class="line">       System.out.print(<span class="string">&quot;Data order after reverse order:&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">           System.out.print(array1[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125; <span class="comment">//new array</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] array1 =&#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;,array2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        System.out.print(<span class="string">&quot;The original data order:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.print(array1[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125; <span class="comment">//old array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">4</span>; i &lt; <span class="number">5</span>; i++, j--) &#123;</span><br><span class="line">            array2[i] = array1[j];</span><br><span class="line">        &#125; <span class="comment">// reverse order</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;Data order after reverse order:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            System.out.print(array2[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125; <span class="comment">//new array</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="Java中的自动复制数组-函数参数表示意义"><a href="#Java中的自动复制数组-函数参数表示意义" class="headerlink" title="Java中的自动复制数组,函数参数表示意义:"></a>Java中的自动复制数组,函数参数表示意义:</h4><blockquote>
<p>src：源数组  srcPos：源数组复制的起始位置  dest：目标数组  destPos：目标数组放置的起始位置  length：复制的长度</p>
</blockquote>
<h4 id="数组复制部分，手动操作："><a href="#数组复制部分，手动操作：" class="headerlink" title="数组复制部分，手动操作："></a>数组复制部分，手动操作：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">5</span>; k++) &#123;</span><br><span class="line">   array[k] = array2[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分析优化"><a href="#分析优化" class="headerlink" title="分析优化:"></a>分析优化:</h4><blockquote>
<p>对于步骤（4）复制，本质上就是拷贝了数组1中的数据到数组2中。最开始有这步的原因是在最后一个for循环中，输出的数组为 array1（Demo1 Line14），这时候就需要使用array2中交换后的数据”覆盖“array1中的原数据，实现输出结果。但是我们可以直接输出array2的数据（Demo2），这样使程序更为简单。</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[N], temp, i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter %d data:&quot;</span>, N);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125; <span class="comment">//Input Data</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You enter the order of data:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125; <span class="comment">//Display Input Data</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="built_in">array</span>[i] = <span class="built_in">array</span>[N - i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">array</span>[N - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125; <span class="comment">//Exchange Order</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reverse Sequence Output:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><blockquote>
<p>接收用户输入值时，使用<code>scanf();</code>不要忘记加<code>&amp;</code>符。当然，使用<code>printf();</code>也不要多加。</p>
</blockquote>
<h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点:"></a>关键点:</h4><blockquote>
<ol>
<li>C语言版，最重要的是数据顺序的交换，考虑常量N的奇偶性。中间变量temp设定为数组起点，由于数组从0开始分配下标的特性，数组中最后一个元素指定为 N - i - 1。</li>
<li>此处需要的交换顺序只是位置上的改变，并不考虑队列中各个元素大小的比较。因此，只考虑一半的数据可提高程序运行速度。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习10-素数判断</title>
    <url>/2021/08/17/exercise10/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写一个判断素数的函数，在主函数输入一个整数，输出该数是否为素数的信息。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）函数思想；<br>（2）素数定义；<br>（3）变量定义；<br>（4）接收用户输入；<br>（5）判断输出；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> input)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>) Math.sqrt(input);</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="number">1</span> || input &lt;= <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (input % i == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> input;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;please enter an integer:&quot;</span>);</span><br><span class="line">        input = user.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (isPrime(input))</span><br><span class="line">            System.out.println(input + <span class="string">&quot; is prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(input + <span class="string">&quot; not prime&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>调用数学函数<code>sqrt()</code>时，注意不同数据类型之间的转换；</li>
<li>使用布尔型函数判断是否为素数，注意这时的返回值不再是 0 和 1，而是<code>true</code>和<code>false</code>。</li>
</ol>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">1</span> || input &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sqrt</span>(input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (input % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//若条件满足,能被其他数整除,不是素数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input, i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter the data:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">    <span class="keyword">if</span> (isPrime(input))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is prime&quot;</span>, input);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d not prime&quot;</span>, input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><h3 id="素数定义："><a href="#素数定义：" class="headerlink" title="素数定义："></a>素数定义：</h3><blockquote>
<p>素数又名质数，是指一个大于1的自然数，除了1及其自身外，不能整除其他自然数的数。</p>
</blockquote>
<h3 id="判断思想："><a href="#判断思想：" class="headerlink" title="判断思想："></a>判断思想：</h3><blockquote>
<ol>
<li>判断一个自然数是否为素数，我们可以这么想：什么样的数不是素数？答案是：负数、0、1以及任何“除1和它本身外还能被其他数整除的数”；</li>
<li>这样我们的条件就非常明确：排除负数、0、1，利用“不是素数的数都满足<strong>小因数&lt;&#x3D;sqrt(n)&lt;&#x3D;大因数</strong>“这个条件进行判断，其中，n 是待判断的数；</li>
<li>只需要判断一个数能否被小于或等于<strong>sqrt(n)</strong> 的数整除即可，降低了算法的时间复杂度。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习11-计算器实现</title>
    <url>/2021/08/29/exercise11/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><image src="https://img-blog.csdnimg.cn/1abc14782f09498baebf11f48a750508.png" width="90%">

<span id="more"></span>

<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）分别定义不同功能变量；<br>（2）输出主页面；<br>（3）分功能实现；<br>（4）使用系统函数；<br>（5）分类输出计算结果；</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayMenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       欢迎进入计算器\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          1.加法         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          2.减法         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          3.乘法         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          4.除法         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          5.求余         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          6.阶乘         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          7.累加         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*          8.结束         *\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入计算类型编号:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="number">1</span> || e == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> e * function(e - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> user, y;</span><br><span class="line">    <span class="type">int</span> input, a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否进入计算器,y/n(是/否):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;user);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        displayMenu();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (user == <span class="string">&#x27;n&#x27;</span>) </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);         </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入有误,请重新输入&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input); <span class="comment">//接收计算类型参数</span></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (input)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>, a, b, a + b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-%d=%d\n&quot;</span>, a, b, a - b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\n&quot;</span>, a, b, a * b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%d\n&quot;</span>, a, b, a / b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d mold %d=%d\n&quot;</span>, a, b, a % b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>, e, function(e));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> input1;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出请按任意键,计算请按M键:&quot;</span>); </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;input1);</span><br><span class="line">            <span class="keyword">if</span> (input1 == <span class="string">&#x27;M&#x27;</span> || input1 == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> c, d;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c, &amp;d);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;result=%d\n&quot;</span>, result += (c + d)); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;谢谢使用,再见!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error,please try again!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现图"><a href="#实现图" class="headerlink" title="实现图"></a>实现图</h2><p><img src="https://img-blog.csdnimg.cn/f886098ca0434247a2b37eca0abc5153.png"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>完整包含所使用函数的头文件；</li>
<li>“阶乘” 功能使用递归思想解决，找到计算过程中的递归体 <code>e * function(e - 1)</code>，并注意特殊位置的处理，如 0 和 1；</li>
<li>定义<code>char</code>类型变量时，若参与比较，本质是比较其 ASCII码 值大小，使用<code>==</code>符号判断是否相等时需要加单引号<code>‘’</code>；</li>
<li>“累加“ 功能实现中，第一次及第二次接收数据合并处理，都放入循环。否则输出结果和实际运算结果存在偏差，且差值为第一次数据计算结果，此处使用<code>result += (c + d)</code>保留上次计算结果。</li>
</ol>
</blockquote>
<hr>
<p>不知道机智的你有没有发现，如果按照题目的要求，我们只需要输出界面，很easy。额，后知后觉，写完才发现，权当练手啦！</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习12-统计特定字符个数</title>
    <url>/2021/08/29/exercise12/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>输入一行字符，分别统计出其中英文字母，空格，数字和其他字符的个数。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）定义变量接收输入；<br>（2）定义特定变量；<br>（3）循环计算；<br>（4）多分支结构判断；<br>（5）输出结果；</p>
</blockquote>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> input;									 </span><br><span class="line">	<span class="type">int</span> word = <span class="number">0</span>, num = <span class="number">0</span>, blank = <span class="number">0</span>, other = <span class="number">0</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;please enter the character and press enter to confirm:&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (; (input = getchar()) != <span class="string">&#x27;\n&#x27;</span>;) <span class="comment">//注意括号位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((input &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; input &lt;= <span class="string">&#x27;z&#x27;</span>) || (input &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; input &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">			word++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (input &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; input &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			num++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">			blank++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			other++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;word=%d,num=%d,blank=%d,other=%d\n&quot;</span>, word, num, blank, other);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>C语言中没有字符串变量，因此一次只能接收一个字符并放入缓存区中；</li>
<li>这里我们接收用户输入的一行字符，并不知道用户输入的长度以及开始位置是什么，所以 for 循环中循环变量的声明和更新都无需设定，即从开始位置进入，结束位置输出。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习13-几何求算</title>
    <url>/2021/08/29/exercise13/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>设圆半径 r&#x3D;1.5，圆柱高 h&#x3D;3，求圆周长、圆面积、圆球表面积、圆球体积、圆柱体积。取小数点后2位数字，请编写程序。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）变量、常量定义；<br>（2）函数定义；<br>（3）函数调用；<br>（4）输出结果；</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">CirclePerimeter</span><span class="params">(<span class="type">float</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">CircleArea</span><span class="params">(<span class="type">float</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * <span class="built_in">pow</span>(radius, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">SphereSurfaceArea</span><span class="params">(<span class="type">float</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * PI * <span class="built_in">pow</span>(radius, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">SphereVolume</span><span class="params">(<span class="type">float</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> / <span class="number">3</span> * PI * <span class="built_in">pow</span>(radius, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">CylinderVolume</span><span class="params">(<span class="type">float</span> radius, <span class="type">float</span> height)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * <span class="built_in">pow</span>(radius, <span class="number">2</span>) * height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> r = <span class="number">1.5</span>, h = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CirclePerimeter=%.2f\n&quot;</span>, CirclePerimeter(r));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CircleArea=%.2f\n&quot;</span>, CircleArea(r));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SphereSurfaceArea=%.2f\n&quot;</span>, SphereSurfaceArea(r));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SphereVolume=%.2f\n&quot;</span>, SphereVolume(r));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CylinderVolume=%.2f\n&quot;</span>, CylinderVolume(r, h));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>对需求进行拆分，在一个个函数中 “逐个击破”，“分而治之”思想；</li>
<li>使用C语言中<code>&lt;math.h&gt;</code>头文件下的数学函数<code>pow()</code>计算次方，例如<code>pow(x,y)</code>表示 x 的 y 次方；</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习14-元素求和</title>
    <url>/2021/08/30/exercise14/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>从键盘输入n (个数不限)个整形数字，放入数组PArray， 调用函数 int *Calc(int *PA,int Num); 计算数组中所有元素的和返回到 main 函数，输出计算结果。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）定义数组、变量；<br>（2）接收设定值；<br>（3）分配内存空间；<br>（4）元素求和；<br>（5）输出；</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">Calc</span><span class="params">(<span class="type">int</span> *PA, <span class="type">int</span> Num)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += PA[i];</span><br><span class="line">    &#125;</span><br><span class="line">    PA[<span class="number">0</span>] = sum;</span><br><span class="line">    <span class="keyword">return</span> PA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *PArray = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> Total = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;enter the number of elements in arrays:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Total);</span><br><span class="line">    PArray = (<span class="type">int</span> *)<span class="built_in">malloc</span>(Total * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;give %d element assignment:\n&quot;</span>, Total);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;PArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    PArray = Calc(PArray, Total);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum=%d\n&quot;</span>, *PArray);</span><br><span class="line">    <span class="built_in">free</span>(PArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>使用指针，及时初始化；</li>
<li>动态分配内存空间，包含头文件<code>&lt;stdlib.h&gt;</code>，函数原型<code>void* malloc (size_t size); </code>返回值类型是<code>void *</code>，void 表示返回未知指针类型。</li>
<li>通常，<code>malloc()</code>使用时需要进行强制类型转换，如<code>(int *)malloc(Total * sizeof(int)); </code>修改 void 指针为所需类型；</li>
<li><code>Calc()</code>为指针类型函数，值 sum 返回主函数时不可直接返回。将 sum 值存入数组首地址，也就是作为第一个元素，返回数组首地址即可；</li>
<li>动态申请的内存空间最后要使用<code>free()</code>释放；</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习2—数据查找</title>
    <url>/2021/08/10/exercise2/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>有一组数12，56，45，78，90，80，23，16，8，63 保存在一个数组中，从键盘任意接收一个数，并在数组中查找该数给出是否找到的信息。如果找到了，要求输出该数在数组中所处的位置；如果找不到，输出没有找到的提示信息。</p>
</blockquote>
<span id="more"></span>

<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）接收；<br>（2）查找数据；<br>（3）对比；<br>（4）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">12</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">80</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">63</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;please enter the data you are looking for:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> input.nextInt(), i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user == array[i]) &#123;</span><br><span class="line">                System.out.println(user + <span class="string">&quot; &quot;</span> + <span class="string">&quot;is element&quot;</span> + <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">9</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;no data &quot;</span> + user + <span class="string">&quot; &quot;</span> + <span class="string">&quot;found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">12</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">80</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">63</span>&#125;, TakeOver, Tag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter any data:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;TakeOver);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TakeOver == <span class="built_in">array</span>[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;data %d location is array[%d];&quot;</span>, TakeOver, i);</span><br><span class="line">            Tag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Tag == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;did not find %d&quot;</span>, TakeOver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>本题关于“未找到信息的输出”，我们还可以这样想：如果一组数据，比对到最后一个都没有满足条件的，那么就认定为队列中没有该数据。</li>
<li>用这样的思想我们可以进行这样的改动：删除Tag标签，增加条件判断直接输出。这里注意变量<code>i</code>的自增，为了在<code>i=10</code>时仍能进入循环输出信息，判断条件应修改为<code>i &lt;= 10</code>。</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">12</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">80</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">63</span>&#125;, TakeOver;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter any data:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;TakeOver);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TakeOver == <span class="built_in">array</span>[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;data %d location is array[%d];&quot;</span>, TakeOver, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;data %d was not found&quot;</span>, TakeOver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>本题中最重要的是如何将已有数据和用户输入数据进行对比，也就是 “查找” 这一操作，代码1给出的是查找算法中最简单的 “顺序查找” 。</li>
<li>由于每次进入循环，变量<code>i</code>依次自增、逐个查找，如果我们仅仅只将单一的输出信息放在语句中而不进行其它判断的话，就会造成输出错误。所以增加变量<code>Tag</code>用于判断条件：如果数据相等（找到了），<code>Tag</code>值置 1 。如果没有找到，<code>Tag</code>值置0，循环外进行一次判断输出没有找到的提示信息。</li>
<li>我竟然试图用二分法解决，但是却忽略了使用二分（折半）查找的前提必须是有序表顺序存储。这里给出两种版本的二分法，注意算法适用条件。</li>
</ol>
</blockquote>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Search1</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> low, high, mid;  <span class="comment">//定义最低位,最高位,中间位</span></span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = n<span class="number">-1</span>;   <span class="comment">//数据从0开始,则最后一个为n-1,总数仍为n</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]==value)    <span class="comment">//中间值和待查找值相等,直接返回</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;value)     <span class="comment">//中间值大于待查找值,待查找值在中间值左边,最高位high置为mid-1</span></span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&lt;value)     <span class="comment">//中间值小于待查找值,待查找值在中间值右边,最低为low置为mid+1</span></span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Search2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> low, <span class="type">int</span> high)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid = low+(high-low)/<span class="number">2</span>;      <span class="comment">//组中值 mid=(low+high)/2等价于mid=low+1/2*(high-low);</span></span><br><span class="line">    <span class="keyword">if</span>(a[mid]==value)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span>(a[mid]&gt;value)</span><br><span class="line">        <span class="keyword">return</span> Search2(a, value, low, mid<span class="number">-1</span>);  <span class="comment">//函数递归调用</span></span><br><span class="line">    <span class="keyword">if</span>(a[mid]&lt;value)</span><br><span class="line">        <span class="keyword">return</span> Search2(a, value, mid+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习3-元素最大值</title>
    <url>/2021/08/10/exercise3/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>有一个3*4矩阵，数据为{1, 2, 3, 4}, {9, 8, 7, 6}, {-10, 10, -5, 2}，编写程序，通过比较输出最大元素的值及其所在的行标和列标。</p>
</blockquote>
<span id="more"></span>

<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）理解 3 * 4 矩阵；<br>（2）循环求最大值；<br>（3）保存行列标；<br>（4）输出；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>&#125;, &#123;-<span class="number">10</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> i, j, Max = array[<span class="number">0</span>][<span class="number">0</span>], x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j] &gt; Max) &#123;</span><br><span class="line">                    Max = array[i][j];</span><br><span class="line">                    x = i;</span><br><span class="line">                    y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Max=&quot;</span> + Max);</span><br><span class="line">        System.out.println(<span class="string">&quot;array index:&quot;</span> + <span class="string">&quot;[&quot;</span> + x + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;[&quot;</span> + y + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="注意区分Java语言中三种数组初始化的方式："><a href="#注意区分Java语言中三种数组初始化的方式：" class="headerlink" title="注意区分Java语言中三种数组初始化的方式："></a>注意区分Java语言中三种数组初始化的方式：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array=<span class="keyword">new</span> <span class="title class_">type</span>[][]&#123;值 <span class="number">1</span>,值 <span class="number">2</span>,值 <span class="number">3</span>,…,值 n&#125;;</span><br><span class="line"></span><br><span class="line">array=<span class="keyword">new</span> <span class="title class_">type</span>[][]&#123;<span class="keyword">new</span> 构造方法(参数列表),…&#125;;</span><br><span class="line"></span><br><span class="line">type[][]array=&#123;&#123;第<span class="number">1</span>行第<span class="number">1</span>列的值,第<span class="number">1</span>行第<span class="number">2</span>列的值,…&#125;,&#123;第<span class="number">2</span>行第<span class="number">1</span>列的值,第<span class="number">2</span>行第<span class="number">2</span>列的值,…&#125;,…&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">-10</span>,<span class="number">10</span>,<span class="number">-5</span>,<span class="number">2</span>&#125;,i,j,Max=<span class="built_in">array</span>[<span class="number">0</span>][<span class="number">0</span>],x,y;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[i][j]&gt;Max)&#123;</span><br><span class="line">                Max=<span class="built_in">array</span>[i][j];</span><br><span class="line">                x=i;</span><br><span class="line">                y=j;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;            </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Max=%d\n&quot;</span>,Max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;array index:[%d][%d]&quot;</span>,x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>重在如何保存下标，循环的确是每个数据都进行比较，但是，若队列后面的数据不满足<code>array[i][j]&gt;Max</code>条件的话，也不会保存它们的下标。所以，直接在循环中增加赋值，以起到保留最大值下标的效果。</p>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习4-寻求特定值</title>
    <url>/2021/08/10/exercise4/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写程序，从键盘上输入N个学生的考试成绩存入一维数组中，求该数组中成绩的最高分、最低分及平均分并输出到屏幕。</p>
</blockquote>
<span id="more"></span>

<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）定义常量N值；<br>（2）建立用于存放数据的一维数组；<br>（3）接收用户输入；<br>（4）查询 &#x2F; 计算特定值；<br>（5）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">float</span>[] array = <span class="keyword">new</span> <span class="title class_">float</span>[N];</span><br><span class="line">        <span class="type">float</span> Max, Min, Average = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;please enter the &quot;</span> + N + <span class="string">&quot; students test results in order:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            array[i] = input.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Max = Min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt; Max)</span><br><span class="line">                Max = array[i];</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; Min)</span><br><span class="line">                Min = array[i];</span><br><span class="line">            Average += array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Average /= N;</span><br><span class="line">        System.out.format(<span class="string">&quot;highest score:%.1f,lowest score:%.1f,the average score:%.2f&quot;</span>,Max,Min,Average);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>注意Java中接收用户输入的方法，同时考虑对一维数组“动态赋值”的操作。</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> <span class="built_in">array</span>[N], Max,Min,Average;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter the N students test results in order:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;<span class="built_in">array</span>[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    Max =Min=<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; Max)</span><br><span class="line">            Max = <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[i] &lt; Min)</span><br><span class="line">            Min = <span class="built_in">array</span>[i];</span><br><span class="line">        Average += <span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Average /= N;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;highest score:%.1f,lowest score:%.1f,the average score:%.3f&quot;</span>, Max, Min, Average);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<mark class="label ">`scanf()`中别丢弃 `& `取地址符</mark>(异常：输入数据后无输出)。求平均值无需增加变量`Sum`，可将变量`Average`放入循环体内求总和，在循环体外进行平均值求算。
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习5-冒泡排序</title>
    <url>/2021/08/10/exercise5/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写程序，从键盘上任意接收10个整数存入一维数组中（无序），利用冒泡排序将该数组元素由小到大进行排序，并输出排序后数组。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）建立用于存放数据的一维数组；<br>（2）接收用户输入；<br>（3）冒泡排序；<br>（4）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> i, j, temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;please enter 10 integers:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            array[i] = user.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i; j++)</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;data from small to large:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.format(<span class="string">&quot;%d &quot;</span>, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>], i, j, temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter 10 integers:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j + <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data from small to large:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="Bubble-Sort介绍："><a href="#Bubble-Sort介绍：" class="headerlink" title="Bubble Sort介绍："></a>Bubble Sort介绍：</h4><blockquote>
<ol>
<li>冒泡排序是一种简单直观的排序算法。通过”重复性地比较需要排序的数列，一次比较两个元素，若顺序错则交换”的方法完成排序。</li>
<li>算法步骤:<br>（1）比较相邻位置的两个元素，若前者大于后者，则交换顺序；<br>（2）重复步骤一，对所有数据遍历走访，此时，末尾元素最大；<br>（3）对除末尾元素外的其他元素重复以上操作；<br>（4）上述步骤重复次数逐渐减少，直到没有任何数据需要进行比较；</li>
</ol>
</blockquote>
<h4 id="核心"><a href="#核心" class="headerlink" title="核心:"></a>核心:</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)         <span class="comment">//i控制比较趟数</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++) <span class="comment">//j控制每趟比较次数</span></span><br><span class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])        <span class="comment">//根据实际情况从大到小或从小到大输出,此处为从小到大</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = a[j];</span><br><span class="line">            a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">            a[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习6-数据插入</title>
    <url>/2021/08/11/exercise6/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写程序，有一维数组数据为：23，34，45，60，67，88，96，从键盘上输入一个数据，将数据插入到数组，使得插入后的数组元素依然保持有序并输出到屏幕。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）数组建立；<br>（2）接收用户输入数据；<br>（3）查找位置；<br>（4）移动元素；<br>（5）插入（赋值）；<br>（6）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] array=<span class="keyword">new</span> <span class="title class_">int</span> []&#123;<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">96</span>,<span class="number">0</span>&#125;;<span class="comment">//此处的0表示占位(否则创建的数组为[7]</span></span><br><span class="line">        <span class="type">int</span> i,input,location;</span><br><span class="line">        Scanner user=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please enter an integer:&quot;</span>);</span><br><span class="line">        input=user.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)   <span class="comment">//因为0占位,所以相当于只有7个元素,不能改为8</span></span><br><span class="line">            <span class="keyword">if</span>(input&lt;=array[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        location=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">6</span>;i&gt;=location;i--)  <span class="comment">//注意i初始值6,最大下标为6（未插入数据前）</span></span><br><span class="line">            array[i+<span class="number">1</span>]=array[i];  <span class="comment">//前方数据后移</span></span><br><span class="line">        array[location]=input;</span><br><span class="line">        System.out.println(<span class="string">&quot;insert &quot;</span>+input+<span class="string">&quot;after the array elements are:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            System.out.format(<span class="string">&quot;%d  &quot;</span>, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>Java处最关键的是分清楚插入数据前后，数组元素的下标值以及数组的建立过程。</p>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">8</span>] = &#123;<span class="number">23</span>, <span class="number">34</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">88</span>, <span class="number">96</span>&#125;, i, input, location = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter any integer:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) <span class="comment">//i&lt;现有元素个数,寻找位置</span></span><br><span class="line">        <span class="keyword">if</span> (input &lt;= <span class="built_in">array</span>[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    location = i;                   <span class="comment">//标记此处位置,占位</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">7</span>; i &gt;= location; i--) <span class="comment">//顺次后移</span></span><br><span class="line">        <span class="built_in">array</span>[i + <span class="number">1</span>] = <span class="built_in">array</span>[i];</span><br><span class="line">    <span class="built_in">array</span>[location] = input;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Insert %d housing number element:&quot;</span>, input);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %d&quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>难点在于如何找到待插入数据合适位置以及如何移动数组元素位置。这里使用循环求解：<code>for</code>循环实现位置查找功能，判断条件为待插入数据<code>&lt;=</code>数组元素值。若满足条件，则退出循环并保留位置下标给<code>location</code>。</li>
<li>找到位置后需要插入数据，并且不能覆盖掉原数据，这时候需要对原数据整体移动。同样使用<code>for</code>循环实现，<code>i=7</code>就相当于指针指向了数组中最后一个元素，所有在<code>location</code>之后的元素都得为它 “让位”，即后移。最后<code>location</code>位置便是空值，只需对它赋值（用户输入值）便实现数据插入。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习7-数组求值</title>
    <url>/2021/08/12/exercise7/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>编写程序，实现如下功能：一个学习小组有5个人，每个人有Math，C，Database三门课的考试成绩，求该组各科成绩的平均分及所有成绩的平均分并输出到屏幕。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）给出结构体；<br>（2）分析变量；<br>（3）计算总 &#x2F; 各科成绩平均分；<br>（4）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span> Math;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span> C;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span> Database;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span> <span class="variable">Sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetValue</span><span class="params">(<span class="type">float</span> Math, <span class="type">float</span> C, <span class="type">float</span> Database)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.Math = Math;</span><br><span class="line">            <span class="built_in">this</span>.C = C;</span><br><span class="line">            <span class="built_in">this</span>.Database = Database;</span><br><span class="line">            Sum = Math + C + Database;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetMath</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> C;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetDataBase</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Database;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetSum</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">Math</span> <span class="operator">=</span> <span class="number">0</span>, C = <span class="number">0</span>, Database = <span class="number">0</span>, Total = <span class="number">0</span>, MathSum = <span class="number">0</span>, CSum = <span class="number">0</span>, DatabaseSum = <span class="number">0</span>;</span><br><span class="line">        Student[] student = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.format(<span class="string">&quot;Please enter the math score of the %d student:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            Math = user.nextFloat();</span><br><span class="line">            System.out.format(<span class="string">&quot;Please enter the C language score of the %d student::&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            C = user.nextFloat();</span><br><span class="line">            System.out.format(<span class="string">&quot;Please enter the database score of the %d student::&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            Database = user.nextFloat();</span><br><span class="line">            student[i] = <span class="keyword">new</span> <span class="title class_">Student</span>(); </span><br><span class="line">            student[i].SetValue(Math, C, Database);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MathSum += student[i].GetMath();</span><br><span class="line">            CSum += student[i].GetC();</span><br><span class="line">            DatabaseSum += student[i].GetDataBase();</span><br><span class="line">            Total += student[i].GetSum();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.format(<span class="string">&quot;MathAverage=%f     CAverage=%f     DatabaseAverage=%f&quot;</span>, MathSum / <span class="number">5.0</span>, CSum / <span class="number">5.0</span>, DatabaseSum / <span class="number">5.0</span>);</span><br><span class="line">        System.out.format(<span class="string">&quot;\nTotalScoreAverage=%.3f&quot;</span>, Total / <span class="number">5.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>Java是一种高级语言，它舍弃了C&#x2F;C++中容易出错的指针、一些莫须有的语言结构（其中就包含结构体），所以这道题如果我们用Java语言解决，就需要用到类和对象。</li>
<li>我们在类中包含其属性和方法，不太容易想到的是三门科目的成绩从键盘接收并且需要循环五次的操作：使用对象数组<code>Student[] student = new Student[5];</code>并对其进行实例化实现动态接收数据。</li>
<li>在类和对象中，只要有需求，我们就添加方法解决问题。例如本题中设置返回三个科目成绩的方法实现单科成绩平均分、总成绩平均分求算。</li>
<li>对象数组需要进行实例化<code>student[i] = new Student();</code>，否则报错：空指针错误！！！</li>
</ol>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> Math;</span><br><span class="line">    <span class="type">float</span> C;</span><br><span class="line">    <span class="type">float</span> Database;</span><br><span class="line">&#125; student[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> Math, C, Database, Sum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please enter the three door subject grades of the first %d name classmate:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f%f%f&quot;</span>, &amp;student[i].Math, &amp;student[i].C, &amp;student[i].Database); <span class="comment">//注意 &amp;</span></span><br><span class="line">        Sum += student[i].Math + student[i].C + student[i].Database;</span><br><span class="line">        Math += student[i].Math;</span><br><span class="line">        C += student[i].C;</span><br><span class="line">        Database += student[i].Database;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MathAverage=%f     CAverage=%f     DatabaseAverage=%f&quot;</span>, Math / <span class="number">5.0</span>, C / <span class="number">5.0</span>, Database / <span class="number">5.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nTotalAverage=%f&quot;</span>, Sum / <span class="number">5.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>关键点在于如何将不同科目的成绩和同学进行区分。这里我们采用结构体数组的方式解决：有5个元素的结构体数组<code>student[5]</code>包含<code>Math</code>、<code>C</code>和<code>Database</code>三个变量对应不同科目成绩。考虑到这点，题目就变得非常简单，只要接收输入值，计算方可。</li>
<li>计算中，要考虑周全，成绩有可能是<code>float</code>类型。而计算平均值时用到的<code>/</code>号，结果为整型，所以我们做除法的时候，除数应该是<code>5.0</code>而不是<code>5</code>。</li>
</ol>
</blockquote>
<h3 id="异同点："><a href="#异同点：" class="headerlink" title="异同点："></a>异同点：</h3><blockquote>
<p>下面这道题目和本题类似，需要注意的点是使用<code>scanf()</code>时，若结构体中包含数组，就需要关注<code>&amp;</code>是否需要存在。对比源码，进一步加深理解。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num; </span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span>[3];</span> <span class="comment">//struct student 等价于int,实质:编写了一个数据类型</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">float</span> sum, avg[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入学号:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i].num); <span class="comment">// num 为int类型,是普通变量,不代表地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i].name); <span class="comment">// 不需要  &amp;s.name  因为数组名name代表首地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入三门科目成绩:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;s[i].score[j]);</span><br><span class="line">            sum = sum + s[i].score[j];</span><br><span class="line">        &#125;</span><br><span class="line">        avg[i] = sum / <span class="number">3.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出信息:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;学号:%d,姓名:%s,平均分:%.2f\n&quot;</span>, s[i].num, s[i].name, avg[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






















]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习8-指针实现排序</title>
    <url>/2021/08/13/exercise8/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>用指针方法编写一个程序，输入3个整数，将它们按由小到大的顺序输出。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）定义指针；<br>（2）接收输入值；<br>（3）排序；<br>（4）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E20210813</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please enter three whole numbers:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            array[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (array[<span class="number">0</span>] &gt; array[<span class="number">1</span>]) &#123;</span><br><span class="line">            temp = array[<span class="number">0</span>];</span><br><span class="line">            array[<span class="number">0</span>] = array[<span class="number">1</span>];</span><br><span class="line">            array[<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (array[<span class="number">0</span>] &gt; array[<span class="number">2</span>]) &#123;</span><br><span class="line">            temp = array[<span class="number">0</span>];</span><br><span class="line">            array[<span class="number">0</span>] = array[<span class="number">2</span>];</span><br><span class="line">            array[<span class="number">2</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (array[<span class="number">1</span>] &gt; array[<span class="number">2</span>]) &#123;</span><br><span class="line">            temp = array[<span class="number">1</span>];</span><br><span class="line">            array[<span class="number">1</span>] = array[<span class="number">2</span>];</span><br><span class="line">            array[<span class="number">2</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;the output from small to large is:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            System.out.print(array[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>在C&#x2F;C++中，指针的作用是：通过指针间接访问内存，保留地址，可以理解为指针就是一个地址。同样地，指针就是用于取得地址的，那么这里就有疑问了（Java中没有指针啊？这怎么做？）。</li>
<li>从表面上看，Java的确没有明确给定 “指针” 这个概念。但是，深入分析，Java中引用类型本质上就是对 “指针” 的封装。使其不能直接操作内存，只能指向对象，这里我们用数组—比较方便大家理解的方式解决。</li>
</ol>
</blockquote>
<h1 id="C语言-1"><a href="#C语言-1" class="headerlink" title="C语言-1"></a>C语言-1</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exchange</span><span class="params">(<span class="type">int</span> *q1, <span class="type">int</span> *q2, <span class="type">int</span> *q3)</span> <span class="comment">//传递地址,指针接收</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*q1 &gt; *q2)</span><br><span class="line">        swap(q1, q2);</span><br><span class="line">    <span class="keyword">if</span> (*q1 &gt; *q3)</span><br><span class="line">        swap(q1, q3);</span><br><span class="line">    <span class="keyword">if</span> (*q2 &gt; *q3)</span><br><span class="line">        swap(q2, q3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, *p1, *p2, *p3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter three integers:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    p1 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    p3 = &amp;c;</span><br><span class="line">    exchange(p1, p2, p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sort from small to large:%d&lt;%d&lt;%d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C语言-2"><a href="#C语言-2" class="headerlink" title="C语言-2"></a>C语言-2</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> *p1, *p2, *p3; <span class="comment">//注意区分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter three integers:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    p1 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    p3 = &amp;c;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        swap(p1, p2);</span><br><span class="line">    <span class="keyword">if</span> (a &gt; c)</span><br><span class="line">        swap(p1, p3);</span><br><span class="line">    <span class="keyword">if</span> (b &gt; c)</span><br><span class="line">        swap(p2, p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sort from small to large:%d&lt;%d&lt;%d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>使用指针时要注意这样几点：<br>（1）避免使用未初始化的指针，多数情况下程序运行错误都与指针未初始化有关，但是由于这种错误不能被编译器检查发现的特殊性，就需要我们格外注意。最好的解决办法就是使用指针时对它进行定义。当然，早早定义的话也不要忘记初始化，在进行初始化时可以使用<code>cstdlib</code>中定义的<code>NULL</code>赋值为0。<br>（2）因为指针类型给定指针所指向对象的数据类型，所以指针赋值要确保数据类型匹配，才可以对指针进行操作。<br>（3）不要误以为<code>int *p  , a ;</code>是声明了两个<code>int</code>型指针，实际是定义了一个<code>int</code>型指针<code>p</code>和一个<code>int</code>型变量<code>a</code>，为了进行区分我们可以在定义时分开写，详见<strong>C语言-2</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>练习9-数据计算</title>
    <url>/2021/08/14/exercise9/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>写一个简单的函数实现下面的功能：具有三个参数，完成对两个整型数据的加、减、乘、除四种操作，前两个为操作数，第三个参数为字符型的参数。</p>
</blockquote>
<span id="more"></span>
<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><blockquote>
<p>（1）定义变量；<br>（2）接收用户输入；<br>（3）函数计算；<br>（4）输出结果；</p>
</blockquote>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E20210814</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a1, b;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;please enter two whole numbers:&quot;</span>);</span><br><span class="line">        a1 = input.nextInt();</span><br><span class="line">        b = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;please enter your computing type:[a-addition s-subtraction m-multiplication d-division]:&quot;</span>);</span><br><span class="line">        c = input.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d+%d=%d&quot;</span>, a1, b, a1 + b);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d-%d=%d&quot;</span>, a1, b, a1 - b);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d*%d=%d&quot;</span>, a1, b, a1 * b);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;the divisor is not 0 error!!!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.format(<span class="string">&quot;%d/%d=%d&quot;</span>, a1, b, a1 / b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;input error please try again!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="enhanced-switch"><a href="#enhanced-switch" class="headerlink" title="enhanced switch"></a>enhanced switch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d+%d=%d&quot;</span>, a1, b, a1 + b);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d-%d=%d&quot;</span>, a1, b, a1 - b);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span> -&gt; System.out.format(<span class="string">&quot;%d*%d=%d&quot;</span>, a1, b, a1 * b);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the divisor is not 0 error!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.format(<span class="string">&quot;%d/%d=%d&quot;</span>, a1, b, a1 / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;input error please try again!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ol>
<li>注意<code>switch-case</code>语句中<code>case</code>处的数据类型，因为设定了变量<code>c</code>为<code>char</code>类型，所以需要使用 <strong>c &#x3D; input.next().charAt(0)</strong> 语句接收用户键盘上的单个字符输入，<code>charAt()</code> 方法用于返回指定索引处的字符，索引范围为从 0 到<code> length() - 1</code>。</li>
<li>Java 中引入增强型<code>switch</code>结构，给出参考代码。主要特点如下：需要返回值、无需 <code>break</code>、使用箭头<code>-&gt;</code>、可进行 case 间的合并，以逗号分隔。</li>
</ol>
</blockquote>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> operand1, <span class="type">int</span> operand2, <span class="type">char</span> type)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a, s, m, d;</span><br><span class="line">    <span class="keyword">switch</span> (type)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d&quot;</span>, operand1, operand2, operand1 + operand2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-%d=%d&quot;</span>, operand1, operand2, operand1 - operand2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d&quot;</span>, operand1, operand2, operand1 * operand2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (operand2 == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;the divisor is not 0 the error please try again&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%d&quot;</span>, operand1, operand2, operand1 / operand2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;if the type of operation is not specified please re enter!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter two integers:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter your computing type:[a-addition s-subtraction m-multiplication d-division]:&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">    calculate(a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>因为有四种计算类型，所以我们使用<code>switch-case</code>语句解决，注意除法计算中除数不为 0 的条件判断，且<code>case</code>后需为常量，这里使用字符做判断条件，加上单引号<code>‘’</code>变为字符常量。</p>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【平面解析几何】直线方程的表示形式</title>
    <url>/2022/04/05/expression-linear-equation/</url>
    <content><![CDATA[<blockquote>
<p>刷算法题过程中遇到了平面解析几何中，<strong>直线方程</strong>的相关知识点，正好来复习下吧</p>
</blockquote>
<span id="more"></span>

<h1 id="1-一般式"><a href="#1-一般式" class="headerlink" title="1.一般式"></a>1.一般式</h1><blockquote>
<p>适用于所有直线</p>
</blockquote>
<p>$$<br>\large A_{x}+B_{y}+C&#x3D;0(\large A^{2}+B^{2}\neq 0)<br>$$</p>
<p>其中，斜率</p>
<p>$$<br>\large K&#x3D;-\frac{A}{B}<br>$$</p>
<p>横、纵截距</p>
<p>$$<br>\large a&#x3D;-\frac{A}{C},\large b&#x3D;-\frac{C}{B}<br>$$</p>
<p>并且有两直线平行</p>
<p>$$<br>\large \frac{A_{1}}{A_{2}}&#x3D; \frac{B_{1}}{B_{2}}\neq \frac{C_{1}}{C_{2}}<br>$$</p>
<p>两直线重合</p>
<p>$$<br>\large \frac{A_{1}}{A_{2}}&#x3D; \frac{B_{1}}{B_{2}}&#x3D; \frac{C_{1}}{C_{2}}<br>$$</p>
<h1 id="2-点斜式"><a href="#2-点斜式" class="headerlink" title="2.点斜式"></a>2.点斜式</h1><blockquote>
<p>适用于不垂直于 $\large x$ 轴的直线</p>
</blockquote>
<p>$$<br>\large y-y_{0}&#x3D;k\left ( x-x_{0} \right )<br>$$</p>
<p>表示过定点</p>
<p>$$<br>\large P\left ( x_{0},y_{0} \right )<br>$$</p>
<p>斜率为 $\large k$ 的直线</p>
<h1 id="3-截距式"><a href="#3-截距式" class="headerlink" title="3.截距式"></a>3.截距式</h1><blockquote>
<p>适用于不过原点或不垂直于 $\large x$ 轴、$\large y$ 轴的直线</p>
</blockquote>
<p>$$<br>\large \frac{x}{a}+\frac{y}{b}&#x3D;1<br>$$</p>
<p>表示与 $\large x$ 轴、$\large y$ 轴相交，且与 $\large x$ 轴截距为 $\large a$、与 $\large y$ 轴截距为 $\large b$ 的直线</p>
<h1 id="4-斜截式"><a href="#4-斜截式" class="headerlink" title="4.斜截式"></a>4.斜截式</h1><blockquote>
<p>适用于不垂直于 $\large x$ 轴的直线</p>
</blockquote>
<p>$$<br>\large y&#x3D;kx+b<br>$$</p>
<p>表示斜率为 $\large k$ ，且与 $\large y$ 轴截距为 $\large b$ 的直线</p>
<h1 id="5-两点式"><a href="#5-两点式" class="headerlink" title="5.两点式"></a>5.两点式</h1><blockquote>
<p>适用于不垂直于 $\large x$ 轴、$\large y$ 轴的直线</p>
</blockquote>
<p>$$<br>\frac{\left ( y-y_{1} \right )}{\left ( y_{2}-y_{1} \right )}&#x3D;\frac{\left ( x-x_{1} \right )}{\left ( x_{2}-x_{1} \right )}\large \left ( x_{1}\neq x_{2},y_{1}\neq y_{2} \right )<br>$$</p>
<p>表示过点</p>
<p>$$<br>\large \left ( x_{1},y_{1} \right ),\left ( x_{2},y_{2} \right )<br>$$</p>
<p>的直线</p>
<h1 id="6-点向式"><a href="#6-点向式" class="headerlink" title="6.点向式"></a>6.点向式</h1><blockquote>
<p>适用于所有直线</p>
</blockquote>
<p>$$<br>\large \frac{\left ( x-x_{0} \right )}{u}&#x3D;\frac{\left ( y-y_{0} \right )}{v}\left ( u\neq 0,v\neq 0 \right )<br>$$</p>
<p>表示过定点</p>
<p>$$<br>\large P\left ( x_{0},y_{0} \right )<br>$$</p>
<p>且方向向量为</p>
<p>$$<br>\large \left ( u,v \right )<br>$$</p>
<p>的直线</p>
<h1 id="7-交点式"><a href="#7-交点式" class="headerlink" title="7.交点式"></a>7.交点式</h1><blockquote>
<p>适用于所有直线</p>
</blockquote>
<p>$$<br>\large f_{1}\left ( x,y \right )*m+f_{2}\left ( x,y \right )&#x3D;0<br>$$</p>
<p>表示过两直线</p>
<p>$$<br>\large \left\{\begin{matrix} \large f_{1}\left ( x,y \right )&#x3D;0\\ \large f_{2}\left ( x,y \right )&#x3D;0 \end{matrix}\right.<br>$$</p>
<p>的交点的直线</p>
<h1 id="8-法线式"><a href="#8-法线式" class="headerlink" title="8.法线式"></a>8.法线式</h1><blockquote>
<p>适用于不平行于坐标轴的直线</p>
</blockquote>
<p>$$<br>\large x\cdot cos \alpha +y\cdot sin \alpha -p&#x3D;0<br>$$</p>
<p>经过原点向已知直线做一条垂线段，垂线段所在直线倾角为 $\large \alpha$ ，线段长度为 $\large p$ ，表示过定点</p>
<p>$$<br>\large P\left ( x_{0},y_{0} \right )<br>$$</p>
<p>且方向向量为</p>
<p>$$<br>\large \left ( u,v \right )<br>$$</p>
<h1 id="9-法向式"><a href="#9-法向式" class="headerlink" title="9.法向式"></a>9.法向式</h1><blockquote>
<p>适用于所有直线</p>
</blockquote>
<p>$$<br>\large \left ( x-x_{0} \right )+b\left ( y-y_{0} \right )&#x3D;0<br>$$</p>
<p>表示经过定点</p>
<p>$$<br>\large P\left ( x_{0},y_{0} \right )<br>$$</p>
<p>且与向量</p>
<p>$$<br>\large \left ( a,b \right )<br>$$</p>
<p>垂直的直线</p>
<h1 id="10-点平式"><a href="#10-点平式" class="headerlink" title="10.点平式"></a>10.点平式</h1><blockquote>
<p>适用于所有直线</p>
</blockquote>
<p>$$<br>\large f\left ( x,y \right )-f\left ( x_{0}-y_{0} \right )&#x3D;0<br>$$</p>
<p>表示过点</p>
<p>$$<br>\large \left ( x_{0},y_{0} \right )<br>$$</p>
<p>且与直线</p>
<p>$$<br>\large f \left ( x,y \right )&#x3D;0<br>$$</p>
<p>平行的直线</p>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
      <tags>
        <tag>解析几何</tag>
      </tags>
  </entry>
  <entry>
    <title>完美解决罗技 GHub 驱动长时间加载 / 初始化</title>
    <url>/2021/08/20/ghub-drive-cyclic-loading/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天收到大哥的礼物，一只罗技 G502 Lightspeed 鼠标，对这款鼠标不大了解。但使用一段时间后感觉这个宏定义还是蛮不错的，成功让我打造成了开发利器，快来看我的C-V大法</p>
<image src="https://img-blog.csdnimg.cn/f1b0779264d54ad587c42d0d4b8b8ebe.jpg" width="85%">

<p>唉，可惜好景不长，没几天我就发现鼠标驱动软件出了问题。客服让我致电罗技售后，结果可想而知，无奈只好自己解决</p>
<h1 id="驱动加载“死循环”"><a href="#驱动加载“死循环”" class="headerlink" title="驱动加载“死循环”"></a>驱动加载“死循环”</h1><image src="https://img-blog.csdnimg.cn/6c6abb962871468fb469b317be6e8947.gif" width="85%">

<p>刚刚接触的我，以为它就是需要加载，还在想是不是电脑配置较低引起的，后来发现根本不是……</p>
<span id="more"></span>

<h1 id="快速解决"><a href="#快速解决" class="headerlink" title="快速解决"></a>快速解决</h1><div class="note info"><p>关闭驱动后台服务项，管理员运行升级文件后重启驱动<br>“治标不治本”的方法——卸载重装</p>
</div>
<p>如果你像我一样也是刚刚接触罗技或者是小白，请参阅下方详细教程</p>
<h1 id="驱动下载"><a href="#驱动下载" class="headerlink" title="驱动下载"></a>驱动下载</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmxvZ2kuY29tL2hjL3poLWNuL2FydGljbGVzLzM2MDAyNTI5ODEzMw==">下载直达<i class="fa fa-external-link-alt"></i></span><br>网络原因可能导致加载缓慢，备用<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTk1YVp2M2dFb0YyXzV1bVdKaTNWaVE=">下载地址<i class="fa fa-external-link-alt"></i></span>，提取码：peng<br>首先确保是从官网下载的驱动软件，<span class="exturl" data-url="aHR0cHM6Ly93d3cubG9naXRlY2guY29tLmNuL3poLWNu">官方网站<i class="fa fa-external-link-alt"></i></span>，进入产品支持主页</p>
<image src="https://img-blog.csdnimg.cn/43cf5464b9994c7183a10347e2f38487.jpg" width="85%">

<p>进入下载</p>
<image src="https://img-blog.csdnimg.cn/794e3509819541e4b507fdb630c103ec.jpg" width="85%">

<p>找到 Logitech G HUB 驱动程序</p>
<image src="https://img-blog.csdnimg.cn/0534c59dcb41494c8fe16343e0b7412c.jpg" width="85%">

<p>选择合适的版本点击 Download Now下载，默认版本为 Windows 10</p>
<image src="https://img-blog.csdnimg.cn/ff195345f42b48de91d7562351483050.jpg" width="65%">

<h1 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h1><p>进入图示目录</p>
<image src="https://img-blog.csdnimg.cn/d8f9d3c952ed45e297d6e49e17419bb9.jpg" width="85%">

<p>修改①为管理员方式运行</p>
<image src="https://img-blog.csdnimg.cn/55c4352de5784366a993e9991abab883.jpg" width="85%">

<p>然后按顺序①-③依次运行程序，失败请尝试下述解决方案</p>
<h1 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h1><p>组合键 <a class="btn" href="#">Ctrl</a>+<a class="btn" href="#">Alt</a>+<a class="btn" href="#">.</a> 打开任务管理器找到服务项</p>
<image src="https://img-blog.csdnimg.cn/aa2b5bc3c8da44afb9f03dcd52149840.jpg" width="70%">

<p>右键尝试启动，正常开启，重启驱动解决</p>
<image src="https://img-blog.csdnimg.cn/10fcafdd9b294649ad1ec6d34c3504fb.jpg" width="70%">

<p>若启动失败，请设置服务项自启动</p>
<image src="https://img-blog.csdnimg.cn/f5d34cf5320a45cea52ae428d40e2af8.jpg" width="85%">

<p>等待片刻重启驱动解决</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><mark class="label ">进入驱动后，不要关闭自启</mark>，鼠标宏需要驱动支持
<p>进入设置</p>
<image src="https://img-blog.csdnimg.cn/a9144f04359d4248bd0b69ae957c4c94.jpg" width="85%">

<p>打开自启</p>
<image src="https://img-blog.csdnimg.cn/30d7202e178d492fa2d98849d518e4e9.jpg" width="85%">]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>Git .ignore 文件规则不生效</title>
    <url>/2022/03/31/git-ignore-error/</url>
    <content><![CDATA[<blockquote>
<p>解决项目开发过程中添加的 <code>.gitignore</code> 规则不生效问题</p>
</blockquote>
<h1 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h1><p>其实这个问题很简单，主要是因为我们的项目不是在构建之前就加入了 <code>ignore</code> 规则，而是在某些文件已经纳入版本控制之后添加的规则，所以规则不生效</p>
<p>我们的解决方案也很容易理解，在本地清理下 <code>git</code> 的缓存，重新提交规则文件就能解决</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><code>git</code> 终端，依次键入如下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 清理缓存</span><br><span class="line">git <span class="built_in">rm</span> -r --cached .  </span><br><span class="line">$ 跟踪所有文件</span><br><span class="line">git add .</span><br><span class="line">$ 重新提交</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="通用忽略规则文件"><a href="#通用忽略规则文件" class="headerlink" title="通用忽略规则文件"></a>通用忽略规则文件</h1><blockquote>
<p>推荐 <code>github</code> 项目 <code>ignore</code> ，提供多种 <code>ignore</code> 文件模板</p>
</blockquote>
<p> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">项目地址<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile file</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># log file</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BlueJ file</span></span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual machine crash logs</span></span><br><span class="line">hs_err_pid*</span><br><span class="line">replay_pid*</span><br><span class="line"></span><br><span class="line"><span class="comment"># maver ignore file</span></span><br><span class="line">target/</span><br><span class="line">pom.xml.tag</span><br><span class="line">pom.xml.releaseBackup</span><br><span class="line">pom.xml.versionsBackup</span><br><span class="line">pom.xml.next</span><br><span class="line">release.properties</span><br><span class="line">dependency-reduced-pom.xml</span><br><span class="line">buildNumber.properties</span><br><span class="line">.mvn/timing.properties</span><br><span class="line">!/.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># idea environment file</span></span><br><span class="line">.idea/*</span><br><span class="line">.idea/compiler.xml</span><br><span class="line">.idea/encodings.xml</span><br><span class="line">.idea/modules.xml</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>

<h1 id="Idea-设置"><a href="#Idea-设置" class="headerlink" title="Idea 设置"></a>Idea 设置</h1><blockquote>
<p>这里以常用开发工具 idea 为例，我们可以在 idea 配置项中添加忽略文件，避免上传开发工具自带的文件</p>
</blockquote>
<p>我们在上传项目时，肯定会有一些不需要上传到远程仓库的文件，<strong>idea</strong>工具的一些生成文件便是如此，例如：</p>
<p><img src="https://img-blog.csdnimg.cn/944043c0cb5d44688571880c354a9fc8.png"></p>
<p>显然这些东西不需要 push 到远程，我们直接 KO 掉</p>
<p><img src="https://img-blog.csdnimg.cn/06bf8e9fe51c40e598c577d560233254.png"></p>
<p>加入<code>.idea</code>项后，push 的时候 git 就会忽略它了，而且项目中也没有了 idea 文件，非常地简洁</p>
<hr>
<p>参考资料:：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdGlnbm9yZQ==">git ignore documentation<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 SSH 方式拉取代码</title>
    <url>/2022/03/24/git-ssh-code/</url>
    <content><![CDATA[<blockquote>
<p>使用 <code>SSH</code> 方式拉取代码</p>
</blockquote>
<p>大家在使用 git 拉取代码时，是否曾遇到过类似 <strong>OpenSSL SSL_read: Connection was reset, errno 10054</strong> 的报错信息，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjM3MDkxOTU=">解决方案参考<i class="fa fa-external-link-alt"></i></span></p>
<p>大概率原因出在<strong>网络</strong>身上，为避免各种修改代理，本机 host 等繁琐操作，推荐大家使用<strong>SSH</strong>方式拉取代码。那么首先需要先完成<strong>SSH</strong>基本配置，下面是详细配置过程</p>
<span id="more"></span>
<h1 id="通过SSH方式拉取代码"><a href="#通过SSH方式拉取代码" class="headerlink" title="通过SSH方式拉取代码"></a>通过SSH方式拉取代码</h1><p>如果你还不了解 git 中的一些基本知识，请<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTkwMjI3Mzk=">参考这里<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="1-配置用户名和邮箱"><a href="#1-配置用户名和邮箱" class="headerlink" title="1.配置用户名和邮箱"></a>1.配置用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&quot;用户邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-生成密钥对"><a href="#2-生成密钥对" class="headerlink" title="2.生成密钥对"></a>2.生成密钥对</h2><p>首先查看设备上是否已生成过秘钥对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh    //进入指定路径文件夹</span><br><span class="line">$ <span class="built_in">ls</span>           //查看文件夹下内容</span><br></pre></td></tr></table></figure>

<p>看一下有没有 <code>id\_rsa</code> 和 <code>id_rsa.pub</code> 等文件，<code>.pub</code> 文件是公钥，另一个文件是密钥</p>
<p>若没有这些文件，或没有 <code>.ssh</code> 目录，则使用 <code>ssh-keygen</code> 命令来创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>如有提示信息，点击 <code>enter</code> 即可，&#x3D;&#x3D;不需要设置密码！&#x3D;&#x3D; 难道你想在每次提交代码前输入一遍密码吗？</p>
<p>成功后会提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your public key has been saved <span class="keyword">in</span> /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is: </span><br></pre></td></tr></table></figure>

<h2 id="3-进入-ssh-文件夹，查找公钥"><a href="#3-进入-ssh-文件夹，查找公钥" class="headerlink" title="3.进入 .ssh 文件夹，查找公钥"></a>3.进入 .ssh 文件夹，查找公钥</h2><p>进入指定路径 <code>.ssh</code> 文件夹中，用记事本打开 <code>id_rsa.pub</code>，全选复制内容</p>
<p>也可通过指令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-rsa your secret email@email.com</span><br></pre></td></tr></table></figure>

<h2 id="4-进入代码托管平台，上传密钥"><a href="#4-进入代码托管平台，上传密钥" class="headerlink" title="4.进入代码托管平台，上传密钥"></a>4.进入代码托管平台，上传密钥</h2><p>下面以 GitHub 为例，演示相关操作过程</p>
<p>1.登陆 github 帐户，点击你的头像，然后 <code>Settings -&gt; SSH and GPG keys -&gt;  New SSH key</code></p>
<p>2、然后你复制上面的公钥内容，粘贴进 <code>key</code> 文本域内。 <code>title</code> 域，自己随便起个名字</p>
<p>3、点击 <code>add key</code></p>
<p>完成以后，验证下这个key是不是正常工作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Attempts to ssh to github</span><br></pre></td></tr></table></figure>

<p>如果，看到如下信息提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not # provide shell access.</span></span><br></pre></td></tr></table></figure>

<p>恭喜，配置成功！</p>
<h2 id="5-找到项目仓库-SSH-地址"><a href="#5-找到项目仓库-SSH-地址" class="headerlink" title="5.找到项目仓库 SSH 地址"></a>5.找到项目仓库 SSH 地址</h2><p>使用命令 <code>git remote \-v</code> 查看你当前的 <code>remote url</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/username/project.git (fetch)</span><br><span class="line">origin https://github.com/username/project.git (push)</span><br></pre></td></tr></table></figure>

<p>如果是以上的结果那么说明此项目是使用 <code>https</code> 协议进行访问的；如果地址是 <code>git</code> 开头则表示是 <code>git</code> 协议</p>
<p>登陆你的 <code>github</code> 账户，查看项目仓库 <code>ssh</code> 协议的 <code>URL</code></p>
<p><img src="https://img-blog.csdnimg.cn/7aab71ed87d84ecaa25dde16076871f3.png"></p>
<p>复制 <code>ssh</code> 链接，使用命令 <code>git remote set-url</code> 修改 <code>remote-url</code>，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:username/project.git</span><br></pre></td></tr></table></figure>

<p>最后使用命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p> 检测 <code>URL</code> 是否已修改为 <code>SSH</code> 地址</p>
<h2 id="6-日后使用此地址提交-x2F-拉取代码即可"><a href="#6-日后使用此地址提交-x2F-拉取代码即可" class="headerlink" title="6.日后使用此地址提交&#x2F;拉取代码即可"></a>6.日后使用此地址提交&#x2F;拉取代码即可</h2><p><img src="https://img-blog.csdnimg.cn/a1d911f447ee4837901b3402c963958f.png"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL SSL_read: Connection was reset, errno 10054</title>
    <url>/2022/03/24/git-ssl-error/</url>
    <content><![CDATA[<h1 id="git-报错信息：OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#git-报错信息：OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="git 报错信息：OpenSSL SSL_read: Connection was reset, errno 10054"></a>git 报错信息：OpenSSL SSL_read: Connection was reset, errno 10054</h1><p> <code>Git</code> 中 <code>push</code> 报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054 ...</span><br></pre></td></tr></table></figure>

<h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><p><code>Git Bash</code> 中，<code>push</code> 时，出现错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054 ...</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>1. 邮箱问题</strong>  </p>
<p>查看用户名，邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>修改，用户名，邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<p>移除仓库，重新添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin https://github.com/XXX</span><br></pre></td></tr></table></figure>

<p><strong>2.解除SSL认证</strong>  </p>
<p>在 <code>Git Bash</code> 中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.更新 DNS 缓存</strong></p>
<p><code>cmd</code> 窗口输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure>

<p><strong>4.文件过大，超过上限</strong>  </p>
<p>修改为 500MB，在 <code>Git Bash</code> 中输入以下命令：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">config</span> http.postBuffer <span class="number">5242880003</span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>多数情况下国内访问 <code>Github</code> 会被…，或因网络波动问题推送失败。推荐使用 <code>SSH</code> 方式拉去代码或者参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9HaXRIdWI1MjA=">开源项目<i class="fa fa-external-link-alt"></i></span> 修改本机 <code>hosts</code> 文件解决访问问题</p>
<p>HelloGitHub 项目 <span class="exturl" data-url="aHR0cHM6Ly9yYXcuaGVsbG9naXRodWIuY29tLw==">开源镜像站<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 版本更新</title>
    <url>/2021/09/01/git-update/</url>
    <content><![CDATA[<p>操作平台：windows</p>
<span id="more"></span>

<hr>
<p>打开 Git bash 工具</p>
<p><img src="https://img-blog.csdnimg.cn/6f65025ba2cc44bfaf293190aab936e3.jpg"></p>
<p>查看当前 git 版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update //旧版</span><br><span class="line">git update-git-for-windows //新版</span><br></pre></td></tr></table></figure>
<p>等待完成即可<br><img src="https://img-blog.csdnimg.cn/86337057ac794a0f8cee3c545fba46f1.png"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>开源仓库贡献 —— 提交 PR</title>
    <url>/2022/02/21/github-commit-pr/</url>
    <content><![CDATA[<blockquote>
<p>记录下第一个 <strong>pull request</strong> 被 <strong>merge</strong> 的过程</p>
</blockquote>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>前些天在逛 Github 时，发现了一个有趣的项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bob2RhbC9naXRodWI=">Github 漫游指南<i class="fa fa-external-link-alt"></i></span>，其作者经验非常的丰富，用自己的亲身经历为我们讲述了如何使用 Github 以及如何找到好的项目，感兴趣的小伙伴可以阅读学习</p>
<p>因为我没有下载其他专门的格式去阅读，而是采用了 <strong>在线阅读</strong> 的方式，但在这过程中我发现了很多的问题，阅读体验很差劲</p>
<ul>
<li>无法返回顶部</li>
<li>侧边栏没有层级目录显示</li>
<li>阅读记录无法保存（每次打开都需要从头开始查找）</li>
</ul>
<p>于是我便想为这个项目做些什么……</p>
<span id="more"></span>

<h1 id="修改页面布局"><a href="#修改页面布局" class="headerlink" title="修改页面布局"></a>修改页面布局</h1><h2 id="docsify-介绍"><a href="#docsify-介绍" class="headerlink" title="docsify 介绍"></a>docsify 介绍</h2><p>查阅了很多资料，最终我找到了 <strong>docsify</strong>，这样一款文档神器，以下介绍来自<span class="exturl" data-url="aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8=">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>docsify是一个神奇的文档网站生成器。他可以快速帮你生成文档网站。不同于GitBook、Hexo的地方是它不会生成静态的.html文件，所有转换工作都是在运行时。如果你想要开始使用他，只需要创建一个index.html就可以开始编写文档并直接部署在GitHub Pages 。</p>
</blockquote>
<h2 id="安装避坑"><a href="#安装避坑" class="headerlink" title="安装避坑"></a>安装避坑</h2><p>大家在使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>

<p>全局安装 <code>docsify-cli</code> 工具时，如果你在安装 <code>node.js</code> 时修改了默认的路径： <code>node_global</code> 和 <code>node_cache</code> ，在运行全局安装命令之后可能会出错，这里需要找到默认的脚本 <code>docsify.cmd</code> ，将其路径添加到环境变量</p>
<p><img src="https://img-blog.csdnimg.cn/05137d3fe1534910a650780d9018049d.png"></p>
<p>避免后续系统无法识别 <code>docsify</code> 命令，其他的我们按照文档配置就好啦，如果需要完全卸载重新安装，请使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall -g docsify</span><br></pre></td></tr></table></figure>

<h1 id="应用效果"><a href="#应用效果" class="headerlink" title="应用效果"></a>应用效果</h1><p><img src="https://img-blog.csdnimg.cn/5cfc5869bf5c4d029c524f546fa9672b.gif"></p>
<p>怎么样，是不是非常的简洁，有木有爱上读文档呢？大家感兴趣的话，可以<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIucGhvZGFsLmNvbS8jL2NoYXB0ZXIvR2l0aHViJUU2JUJDJUFCJUU2JUI4JUI4JUU2JThDJTg3JUU1JThEJTk3">点击这里<i class="fa fa-external-link-alt"></i></span>在线阅读</p>
<h1 id="PR-过程"><a href="#PR-过程" class="headerlink" title="PR 过程"></a>PR 过程</h1><h2 id="仓库源"><a href="#仓库源" class="headerlink" title="仓库源"></a>仓库源</h2><p>首先 <strong>fork</strong> 仓库</p>
<p><img src="https://img-blog.csdnimg.cn/50dc42afe25e4c41b86d06ea63557a23.png"></p>
<p>然后 <strong>clone</strong> 到本地，推荐安装 <strong>github desktop</strong> 工具，<span class="exturl" data-url="aHR0cHM6Ly9kZXNrdG9wLmdpdGh1Yi5jb20v">点我下载<i class="fa fa-external-link-alt"></i></span>，用本地编辑器打开</p>
<p><img src="https://img-blog.csdnimg.cn/3533e037b49643848f6bef26ee2014d4.png"></p>
<p>默认 vscode</p>
<p><img src="https://img-blog.csdnimg.cn/4a4ea0c4dde843cda8f91bc361e2ad89.png"></p>
<h2 id="建立空分支"><a href="#建立空分支" class="headerlink" title="建立空分支"></a>建立空分支</h2><p>创建一个新的分支，用于添加你想要实现的功能，这里我选择创建一个全新的 <strong>空分支</strong>，因为改动比较大，不用一步步删除</p>
<p>使用 <code>git checkout</code> 中 <code>-orphan</code> 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --orphan emptybranch</span><br></pre></td></tr></table></figure>

<p>该命令会生成一个名为 <code>emptybranch</code> 的分支，该分支会包含父分支的所有文件。但新的分支不会指向任何以前的提交，无任何历史，你当前的提交将会成为该分支的首次提交记录</p>
<p>删除全部文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -rf . //结尾有 . </span><br></pre></td></tr></table></figure>

<p>若无任何文件提交，则无法查看分支，所以我们创建一个新的文件，然后提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# creat new branch&#x27;</span> &gt;&gt; README.md</span><br><span class="line"></span><br><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;creat new branch&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>push</code> 到远程仓库，完成空分支的创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin emptybranch</span><br></pre></td></tr></table></figure>

<h2 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h2><p>这里不做详细解释，主要以应用 <code>docsify</code> 为例介绍下 <strong>PR</strong> 过程，根据<span class="exturl" data-url="aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ=">文档<i class="fa fa-external-link-alt"></i></span>配置好本地环境</p>
<h2 id="发布-branch"><a href="#发布-branch" class="headerlink" title="发布 branch"></a>发布 branch</h2><p>本地预览无误后发布分支，我们在 <strong>github desktop</strong> 中可以很轻易的完成</p>
<p><img src="https://img-blog.csdnimg.cn/e2d046a5cb904c2683f51db3ab81152d.png"></p>
<p>因为我已经提交过了，就不在回退展示</p>
<h2 id="merge-branch"><a href="#merge-branch" class="headerlink" title="merge branch"></a>merge branch</h2><p>我们的空分支中已经实现了想要的功能，但是 git 中创建 PR 请求必须有一个父节点，否则会有（您所选的分支和想要合并分支间无任何关联）的类似提示，所以我们需要将这个空分支合并到仓库原来的分支上再做 PR</p>
<p>切换到 master 分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git  checkout master</span><br></pre></td></tr></table></figure>

<p>拉取远端的 master，保证最新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>将空分支合并到 master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git  merge emptybranch</span><br></pre></td></tr></table></figure>

<h3 id="solve-merge-branch-error"><a href="#solve-merge-branch-error" class="headerlink" title="solve merge branch error"></a>solve merge branch error</h3><p>合并分支时可能会遇到这样的报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>

<p>主要是两个分支尚未取得联系</p>
<p>我们在操作的命令后加上 <code>--allow-unrelated-histories</code> 来解决这个报错，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge emptybranch --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实你也可以直接建立 branch，无需建立空分支，从而省去解决 <code>fatal: refusing to merge unrelated histories</code> 错误的操作</p>
</blockquote>
<h2 id="创建-PR"><a href="#创建-PR" class="headerlink" title="创建 PR"></a>创建 PR</h2><p>现在返回网页端中你 clone 仓库的位置，就会有提示 <strong>Compare &amp; Creat a pullrequest</strong> ，点击选中分支，记录下你实现的功能，确认无误提交后等待被仓库的主人合并就好啦</p>
<p>或者你也可以直接到源仓库地址找到 PR 入口，开始创建</p>
<p><img src="https://img-blog.csdnimg.cn/289b2dc567284f18969ac6cf64f9b716.png"></p>
<h1 id="finish-contributes"><a href="#finish-contributes" class="headerlink" title="finish contributes"></a>finish contributes</h1><p>这里放上 merge 后的截图，hah，我也非常感谢作者哈，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bob2RhbC9naXRodWIvcHVsbC82OA==">PR address<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/e8657a3815da4e48a6a1e039b73d871a.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2b204addfa094b92a0fe74a7d950757b.png"><br>在一个技术社区和其他开发者交流，就像写博客可以得到一些回应一样，我们都将不断进步，比昨天的自己更强一些</p>
<p>看到自己所做的东西被认可是一件很棒的事情，虽然我也只是用了其他的工具做了一些简单的修改罢了。总之，Github 上真的有很多有趣的事情，你也可以通过学习<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bob2RhbC9naXRodWI=">《Github 漫游指南》<i class="fa fa-external-link-alt"></i></span>来找到一些自己喜欢的东西，开源大法是真滴好诶</p>
<p><img src="https://img-blog.csdnimg.cn/ae9b1580dd644801b061945fc210987a.png"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>恭喜，成功入坑 GitHub 。。。</title>
    <url>/2022/07/08/github-connection-refuse/</url>
    <content><![CDATA[<p>大家好，我是杰森。<code>GitHub</code> 对大家来说一定不陌生，无论是学习还是<code>交</code>（爬）<code>朋</code>（项）<code>友</code>（目）。但是今天，我好像和它失联了……</p>
<p><img src="https://img-blog.csdnimg.cn/f57f96bfc3154e3da61c2113adb3358d.png"></p>
<p>当我像往常一样<code>clone</code>项目时，却得到了这样的报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:appletdevelop/full-stack.git</span><br><span class="line">Cloning into ‘full-stack’...</span><br><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure>

<p>什么都不能阻止打工人搬砖，必须要解决。经过一番排查，终于找到了问题的根源。分享两种解决方案，大家注意避坑。</p>
<h3 id="方案一：配置-DNS"><a href="#方案一：配置-DNS" class="headerlink" title="方案一：配置 DNS"></a>方案一：配置 DNS</h3><p>因为错误信息显示 <code>Connection refused</code> ，所以我们需要去看看建立连接时发生了什么，为什么会出错。查看日志，果然发现端倪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -vT git@github.com</span><br><span class="line">OpenSSH_9.0p1, OpenSSL 1.1.1o  5 July 2022</span><br><span class="line">debug1: Reading configuration data /c/Users/jason/.ssh/config</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: Connecting to github.com [::1] port 22.</span><br><span class="line">debug1: connect to address ::1 port 22: Connection refused</span><br><span class="line">debug1: Connecting to github.com [127.0.0.1] port 22.</span><br><span class="line">debug1: connect to address 127.0.0.1 port 22: Connection refused</span><br><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>日志显示，<code>IPv6</code> 和 <code>IPv4</code> 的 <code>localhost</code> 地址分别为 <code>::1</code> 和 <code>127.0.0.1</code>，这意味着我们在连接 <code>github</code> 时，其域名将会被解析为 <code>localhost</code> 地址，当然也就无法连接。</p>
<p>打开<span class="exturl" data-url="aHR0cHM6Ly9pcGFkZHJlc3MuY29tL3dlYnNpdGUvZ2l0aHViLmNvbQ==" title="IP 查询网站">查询网站<i class="fa fa-external-link-alt"></i></span>，找到 <code>github.com</code> 的 <code>IP</code> 地址</p>
<p><img src="https://img-blog.csdnimg.cn/1a7f4301a95e431198b9fc55211f38df.png" alt="真实 IP 地址"></p>
<p><code>Windows</code> 下，打开本机 <code>hosts</code> 文件</p>
<blockquote>
<p>C:\Windows\System32\drivers\etc</p>
</blockquote>
<p>添加域名映射，并在 <code>cmd</code> 窗口刷新 <code>DNS</code> 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">140.82.112.4 github.com</span><br><span class="line"><span class="comment"># Refreshing DNS configurations</span></span><br><span class="line">$ ipconfig /flushdns</span><br></pre></td></tr></table></figure>

<p>重新拉取，成功。</p>
<h3 id="方案二：修改端口号"><a href="#方案二：修改端口号" class="headerlink" title="方案二：修改端口号"></a>方案二：修改端口号</h3><p>从上面的<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU1ODk2ODIvc3NoLWNvbm5lY3QtdG8taG9zdC1naXRodWItY29tLXBvcnQtMjItY29ubmVjdGlvbi10aW1lZC1vdXQ=" title="22 端口拒绝访问">报错信息<i class="fa fa-external-link-alt"></i></span>中可以发现，重点在这一句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p><code>ssh</code> 连接 <code>GitHub</code> 的 <code>22</code> 号端口被拒绝。但是 <code>ping</code> 一下 <code>github.com</code> 能通，浏览器访问也没有问题，那有可能是该端口被防火墙蔽掉了。既然 <code>22</code> 端口拒绝访问，我们不妨尝试使用 <code>443</code> 端口进行连接。</p>
<p>使用 <code>vim</code> 指令编辑 <code>ssh</code> 配置文件，添加以下端口信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line"><span class="comment"># Add the following configuration information</span></span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure>

<p>测试访问是否成功，通常不出意外的话意外就来了……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host ‘[ssh.github.com]:443([unknown ip address]:443)’ can’t be established.</span><br><span class="line">xxx key fingerprint is xxx:xxx.</span><br><span class="line">This host key is known by the following other names/addresses:</span><br><span class="line">    <span class="comment"># Delete the RSA information in line 8</span></span><br><span class="line">    ~/.ssh/known_hosts:8: github.com</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure>

<p>这与 <code>ssh</code> 的运行机制有关，<code>ssh</code> 会将本机访问过的计算机的 <code>public key</code> 记录在 <code>~/.ssh/known_hosts</code> 下。当下次访问相同计算机时，若公钥不同则会发出警告，避免受到攻击。这里只需要找到 <code>known_hosts</code> 文件中对应 <code>ip</code> 的 <code>RSA</code> 并删除便可解决。</p>
<p>再次测试，看到以下信息则表示访问成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>这样访问 <code>GitHub</code> 时，<code>ssh</code> 就会连接 <code>443</code> 端口，不会报错。</p>
<p><img src="https://img-blog.csdnimg.cn/ddf31df46a6247f5b36316ec6dfe670d.png" alt="拉取正常"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结下本次踩坑的原因，主要有两点：</p>
<ul>
<li>使用了科学上网小工具；</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5kamJoLm5ldC93ZWJkZXYvd2ViL0FjYWRlbWljaWFuQ29sdW1uQWN0aW9uLmRvP3A9Z2V0WXN6bCZpZD04YTgxODI1NjVmZDhiNmI5MDE2MWM3MTY1ODZiMDEzMw==" title="网络劫持原理及影响">运营商劫持<i class="fa fa-external-link-alt"></i></span> 了 <code>DNS</code> 解析；</li>
</ul>
<p>总之：“网上冲浪也要注意暗礁，低头走路也要抬头看路”，以上就是本期分享啦，希望可以帮到您！</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>《HarmonyOS实战——入门到开发，浅析原子化服务》</title>
    <url>/2021/08/05/harmonyos-atomization-service/</url>
    <content><![CDATA[<h1 id="HarmonyOS操作系统"><a href="#HarmonyOS操作系统" class="headerlink" title="HarmonyOS操作系统"></a>HarmonyOS操作系统</h1><p>在介绍鸿蒙系统前，我们有必要了解下鸿蒙系统应运而生的时代背景。近年来，我国在电子信息技术领域中愈发觉需要“独立”，资源的匮乏，人才的稀缺正是当务之急</p>
<image src="https://img-blog.csdnimg.cn/4aed2fc18a3048dba5cc58cfec5af1e8.png" width="85%">

<p>犹记得前段时间网络上流传着这样的言论：华为终端设备存在通信安全的威胁，终端系统存在 ”后台” ，这样的情况下，我们就更需要用实力证明自己。于是，2021年6月2日，华为正式公布了其自主研发的操作系统—HarmonyOS，也就是鸿蒙</p>
<image src="https://img-blog.csdnimg.cn/f9ee7070a9cb4b08ba5e5bcd16362dd8.jpg" width="85%">

<p>发布会上，令我印象最深刻的莫过于HarmonyOS万物互联、分布式的强大特性以及其Feature Ability（元服务）的用户界面展现形式，这使得它与用户的交互更加流畅、简洁、方便。下面我们就来细品HarmonyOS的 “服务卡片” 功能</p>
<span id="more"></span>

<h2 id="原子化服务"><a href="#原子化服务" class="headerlink" title="原子化服务"></a>原子化服务</h2><p>在此之前呢，我们不得不去了解下与 “服务卡片” 有着密切关系的原子化服务。原子化服务是由HarmonyOS 提供的一种面向未来的服务提供方式，它拥有独立、非驱动、轻便（无需安装）等特性，旨在为用户提供一种效率极佳的服务方式</p>
<p><img src="https://img-blog.csdnimg.cn/68e1fba7e8944abc8379de740c66e80a.png"></p>
<p>它具有随处可见、跨设备、服务直达等特性：</p>
<div class="note info"><p>（1）服务发现：原子化服务可在服务中心发现并使用；<br>（2）智能推荐：原子化服务可以基于合适场景被主动推荐给用户使用；用户可在服务中心和小艺建议中发现系统推荐的服务；<br>（3）服务卡片：支持用户无需打开原子化服务便可获取服务内重要信息的展示和动态变化，如天气、关键事务备忘、热点新闻列表；<br>（4）支持跨设备分享：例如接入华为分享后，用户可分享原子化服务给好友，好友确认后打开分享的服务；<br>（5）支持多端协同：例如手机用作文档翻页和批注，配合智慧屏显示完成分布式办公；手机作为手柄，与智慧屏配合玩游戏；</p>
</div>
<h1 id="服务卡片"><a href="#服务卡片" class="headerlink" title="服务卡片"></a>服务卡片</h1><image src="https://img-blog.csdnimg.cn/7835e9dac7a24d74b5399f7138c29f18.jpg" width="70%">

<p>相信不少朋友第一次听到 “服务卡片” 这个词汇，都会在想：这不就是我手机屏幕上的 “小组件” 吗？哎！你还别说，它们之间还真有不同之处，但又有异曲同工之妙<br>首先呢，大家可以回想一下我们日常使用电子产品的操作习惯，我们在使用小组件的时候：比如在主屏幕上新添加一个 “照片” 的小组件，这个小组件可以实现不定期的自动更换、主题筛选、人物分类等等这些功能。那么如你恰巧看到了一张非常感兴趣的照片，想要查看它，是不是需要点击照片进入详情查看呢？这样的交互方式相信大家都非常了解。但是你是否思考过，它可以更加地 “人性化”，更加 ”懂你“ 呢？</p>
<image src="https://img-blog.csdnimg.cn/6997fbe81f824faa863ef6c621233c14.jpg" width="60%">

<p>没错，这就是HarmonyOS，它做到了。在鸿蒙的设计中，服务卡片的引入是与以往EMUI最大的不同，在屏幕上我们只需要找到图标下方有 “小横线” 的app，当然，这些也正是那些支持HarmonyOS的app。我们只需要在图标位置处，轻轻上划，就能呼出相对应的应用卡片，这些卡片还可以实现自定义大小 、固定在主屏幕等功能</p>
<image src="https://img-blog.csdnimg.cn/68758b827e6c4d408b5eac91f56e9516.png" width="30%">

<p>相较于封闭式的IOS系统来说，我个人认为就是把3DTouch功能变得不需要 ”3D“ 了，无需用力，仅需轻扫。 又更像是小组件的父类，承接其外。这样的设计方式在使用上显得尤为灵活，并不需要在特定的位置才能使用。可以这么说，只要你屏幕放得下，随便你怎么用</p>
<image src="https://img-blog.csdnimg.cn/8b8a6787d4ca40ad9c4641e00314370a.png" width="30%">

<p>开发者们可以为这些服务卡片 ”量体裁衣“，定制特有的功能，提高日常使用效率。在子菜单能力的加持下，像我们日常使用的某宝支付，打开地铁卡根本无需进入app，只要 “蹦” 出来一张小卡片方可实现功能。这是我们不得不惊叹：这是多么快捷、高效的交互体验啊！</p>
<image src="https://img-blog.csdnimg.cn/83b14020b5964b07bff864a0557f0bf6.png" width="30%">

<p>在服务卡片的开发过程中有三者参与，分别是卡片提供方、卡片使用方和卡片管理服务，它们之间相互作用，共同维持着便捷功能的实现</p>
<image src="https://img-blog.csdnimg.cn/425df9ca67f64e438fd1841bf4d0a1b5.png" width="80%">

<p>HarmonyOS Developer中我们可以了解到这三者的分工：</p>
<h2 id="·-提供方模块"><a href="#·-提供方模块" class="headerlink" title="· 提供方模块"></a><strong>·</strong> 提供方模块</h2><blockquote>
<p>提供卡片显示内容的HarmonyOS应用或原子化服务，控制卡片的显示内容、控件布局以及控件点击事件</p>
</blockquote>
<h3 id="卡片服务："><a href="#卡片服务：" class="headerlink" title="卡片服务："></a>卡片服务：</h3><blockquote>
<p>由卡片提供方开发者实现，开发者实现onCreateForm、onUpdateForm和onDeleteForm处理创建卡片、更新卡片以及删除卡片等请求，提供相应的卡片服务</p>
</blockquote>
<h3 id="通信适配层："><a href="#通信适配层：" class="headerlink" title="通信适配层："></a>通信适配层：</h3><blockquote>
<p>由HarmonyOS SDK提供，负责与卡片管理服务通信，用于将卡片的更新数据主动推送到卡片管理服务</p>
</blockquote>
<h3 id="卡片提供方实例管理："><a href="#卡片提供方实例管理：" class="headerlink" title="卡片提供方实例管理："></a>卡片提供方实例管理：</h3><blockquote>
<p>由卡片提供方开发者实现，负责对卡片管理服务分配的卡片实例进行持久化管理</p>
</blockquote>
<h2 id="·-使用方模块"><a href="#·-使用方模块" class="headerlink" title="· 使用方模块"></a>· 使用方模块</h2><blockquote>
<p>显示卡片内容的宿主应用，控制卡片在宿主中展示的位置</p>
</blockquote>
<h2 id="·-管理服务模块"><a href="#·-管理服务模块" class="headerlink" title="· 管理服务模块"></a>· 管理服务模块</h2><blockquote>
<p>用于管理系统中所添加卡片的常驻代理服务，包括卡片对象的管理与使用，以及卡片周期性刷新等<br>在卡片使用方和提供方需要添加&#x2F;删除&#x2F;请求更新卡片时，卡片管理服务会拉起卡片提供方获取卡片信息</p>
</blockquote>
<h3 id="通信适配层：-1"><a href="#通信适配层：-1" class="headerlink" title="通信适配层："></a>通信适配层：</h3><blockquote>
<p>负责与卡片使用方和提供方进行RPC通信</p>
</blockquote>
<h3 id="周期性刷新："><a href="#周期性刷新：" class="headerlink" title="周期性刷新："></a>周期性刷新：</h3><blockquote>
<p>在卡片添加后，根据卡片的刷新策略启动定时任务周期性触发卡片的刷新</p>
</blockquote>
<h3 id="卡片缓存管理："><a href="#卡片缓存管理：" class="headerlink" title="卡片缓存管理："></a>卡片缓存管理：</h3><blockquote>
<p>在卡片添加到卡片管理服务后，对卡片的视图信息进行缓存，以便下次获取卡片时可以直接返回缓存数据，降低时延</p>
</blockquote>
<h3 id="卡片生命周期管理："><a href="#卡片生命周期管理：" class="headerlink" title="卡片生命周期管理："></a>卡片生命周期管理：</h3><blockquote>
<p>对于卡片切换到后台或者被遮挡时，暂停卡片的刷新；以及卡片的升级&#x2F;卸载场景下对卡片数据的更新和清理</p>
</blockquote>
<h3 id="卡片使用方对象管理："><a href="#卡片使用方对象管理：" class="headerlink" title="卡片使用方对象管理："></a>卡片使用方对象管理：</h3><blockquote>
<p>对卡片使用方的RPC对象进行管理，用于使用方请求进行校验以及对卡片更新后的回调处理</p>
</blockquote>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>有关JDK的环境配置，请参考博主前不久的<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTg4NzU5Njc=">文章<i class="fa fa-external-link-alt"></i></span>。安装好之后，我们到华为官网下载<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaGFybW9ueW9zLmNvbS9jbi9kZXZlbG9wL2RldmVjby1zdHVkaW8jZG93bmxvYWQ=">DevEco Studio<i class="fa fa-external-link-alt"></i></span>（官方IDE），无需更改，选择默认配置即可。由于没有具体项目开发，此处不再放置源码，后续学习中将不断更新，还请多多关注，下面实现华为穿戴设备—智能手表中 Hello World 的输出</p>
<p>新建项目</p>
<image src="https://img-blog.csdnimg.cn/380f5d42f1c24807afab8aeb1d2ba3a6.png" width="85%">

<p>至少选择一个类型</p>
<image src="https://img-blog.csdnimg.cn/89fd7cda580242fd90bbe57c2d83697c.png" width="85%">

<p>进入之后显示如下界面</p>
<image src="https://img-blog.csdnimg.cn/7f468ab4a51947db9b1c908b5a29ddf3.png" width="85%">

<p>单击运行显示 Hello World</p>
<image src="https://img-blog.csdnimg.cn/4c307b1985ac47b3972695b24c42a214.png" width="85%">

<p>简单的鸿蒙版 Hello World 到这里就完成啦，还不赶快动手试试</p>
]]></content>
      <categories>
        <category>HarmonyOS</category>
      </categories>
      <tags>
        <tag>HarmonyOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 优化配置汇总【GitHub Actions 看板娘 数学公式 标签云 README 转义问题】</title>
    <url>/2022/05/16/hexo-github-actions/</url>
    <content><![CDATA[<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2Rlci1qYXNvbi5jbi8=">服务器<i class="fa fa-external-link-alt"></i></span> 快到期了，这几天迁移到 <code>GitHub</code> 上，用免费的 <code>GitHub Pages</code> 重新部署下 <a href="https://pdpeng.github.io/">杰森的博客</a> 。以下样式及优化配置基于 <code>Hexo</code>，主题 <code>Next</code></p>
</blockquote>
<h1 id="GitHub-Actions-自动化部署"><a href="#GitHub-Actions-自动化部署" class="headerlink" title="GitHub Actions 自动化部署"></a>GitHub Actions 自动化部署</h1><p><img src="https://img-blog.csdnimg.cn/667f5a66a56f4649a614f24662407fbd.png"></p>
<p>本文最具价值的配置莫过于此，没有用到 <code>GitHub Actions</code> 前，每次发文需要将 <code>markdown</code> 文件放入 <code>_post</code> 文件夹下，然后执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s &amp;&amp; hexo g</code>一连串命令，执行无报错还好说，万一本地环境出现错误，还得花时间找错，非常麻烦</p>
<p>使用 <code>GitHub Actions</code> 后，发文只需要在博客的源文件仓库中拖拽源文件或者 <code>push</code> 源文件到仓库，<code>GitHub Actions</code> 即可监测仓库状态，自动执行部署操作到指定位置，不必担心本地环境出错等系列问题</p>
<span id="more"></span>

<p>效果 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BEUEVORy9wZHBlbmcuZ2l0aHViLmlvL2FjdGlvbnM=">预览地址<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/ac3e2995981745c8b3c1836ba819ffc4.png"></p>
<p>有关介绍和详细令牌、密钥配置请 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dic3UyMDA0L2FydGljbGUvZGV0YWlscy8xMjI2NjExMTY=">参考此处<i class="fa fa-external-link-alt"></i></span>，以下主要是 <code>.github/workflows/deploy.yml</code> <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vUERQRU5HL2NjNjYyMDcwMTAwMWY4OWI2ZDMwY2Q5NzliZTI3ZWNl">文件<i class="fa fa-external-link-alt"></i></span> 的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Action&#x27;s Name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">AutoDeploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggering Condition 1 Main Branch Performs The Task After Receiving Push</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># Triggering Condition 2 Manual Button</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Putting Environment Variables Here You Need To Replace It With Your Own</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="comment"># After Hexo Compiles Use This Git User To Deploy To The Github Warehouse</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">PDPENG</span></span><br><span class="line">  <span class="comment"># After Hexo Compiles Use This Git Mailbox To Deploy To The Github Warehouse</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">jason.peng.code@gmail.com</span></span><br><span class="line">  <span class="comment"># The Git Hub Warehouse To Be Deployed After Hexo Compiles</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_REPO:</span> <span class="string">PDPENG/pdpeng.github.io</span></span><br><span class="line">  <span class="comment"># Hexo Compiles The Branch To Deploy After Compilation</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># After Hexo Compiles Use This Gitee User To Deploy To The Gitee Warehouse</span></span><br><span class="line">  <span class="attr">GITEE_USER:</span> <span class="string">Coder-Jason</span></span><br><span class="line">  <span class="comment"># The Gitee Warehouse To Be Deployed After Hexo Compiles</span></span><br><span class="line">  <span class="attr">GITEE_DEPLOY_REPO:</span> <span class="string">Coder-Jason/Coder-Jason</span></span><br><span class="line">  <span class="comment"># Hexo Compiles The Branch To Deploy After Compilation</span></span><br><span class="line">  <span class="attr">GITEE_DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Pay Attention To Replacing Your Github Source Warehouse Address</span></span><br><span class="line">  <span class="attr">GIT_SOURCE_REPO:</span> <span class="string">git@github.com:PDPENG/pdpeng.github.io.git</span></span><br><span class="line">  <span class="comment"># Pay Attention To Replacement To Your Gitee Target Warehouse Address</span></span><br><span class="line">  <span class="attr">GITEE_DESTINATION_REPO:</span> <span class="string">git@gitee.com:Coder-Jason/coder-jason.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa gitee.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          # Install According To The Components You Installed</span></span><br><span class="line"><span class="string">          npm install - gulp gulp-uglify hexo hexo-deployer-git hexo-generator-archive hexo-generator-category hexo-generator-feed hexo-generator-index hexo-generator-search hexo-generator-searchdb hexo-generator-sitemap hexo-generator-tag hexo-leancloud-counter-security hexo-renderer-ejs hexo-renderer-marked hexo-renderer-pug hexo-renderer-stylus hexo-server hexo-tag-cloud hexo-word-counter readable-stream uglify-es --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># The Following Is The Release To Gitee</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># Using Hexo Deploy Pri Directly</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># GitHub Source Warehouse Address</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_SOURCE_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Gitee Target Warehouse Address</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GITEE_DESTINATION_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># Your Gitee Username</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GITEE_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Note At Settings Secrets Configuration Gitee Password</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Your Gitee Warehouse The Warehouse Name Is Strictly Distinguished Please Fill In It Accurately Otherwise There Will Be An Error</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GITEE_DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># To Deploy Branches The Default Is Master If It Is Other Branches You Need To Specify The Specified Branch Must Exist</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GITEE_DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>在配置完令牌及密钥后，可以直接复制 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vUERQRU5HL2NjNjYyMDcwMTAwMWY4OWI2ZDMwY2Q5NzliZTI3ZWNl">该文件<i class="fa fa-external-link-alt"></i></span> 使用，如果仅需要同步 <code>Github</code>，则不必配置 <code>Gitee</code> 同步字段配置</p>
<p>杰森的仓库分布是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/PDPENG/MyBlog 私有仓库 (actions 部署位置)</span><br><span class="line">https://github.com/PDPENG/pdpeng.github.io 公共仓库 (actions 部署后推送的位置)</span><br></pre></td></tr></table></figure>

<p>配置完成后，<code>GitHub Actions</code> 一旦检测到 <code>MyBlog</code> 仓库下的变动后，将会自动部署至 <code>pdpeng.github.io</code> 仓库</p>
<p><img src="https://img-blog.csdnimg.cn/cb00c000f77e4026852a5b2e2111c748.png"></p>
<h1 id="RSS-订阅按钮"><a href="#RSS-订阅按钮" class="headerlink" title="RSS 订阅按钮"></a>RSS 订阅按钮</h1><blockquote>
<p>这里默认您已经添加了 <code>RSS</code> 相关插件，站点已具备生成 <code>atom.xml</code> 文件能力</p>
</blockquote>
<p>效果图，<a href="https://pdpeng.github.io/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/5f2497af51014b75bc5c21451f76889a.png"></p>
<p>将下面的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rss-button</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Lato&#x27;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.feed-link</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fc6423</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.feed-link</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fc6423</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-color</span>: <span class="number">#fc6423</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;rss-button&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;feed-link&quot;</span> <span class="attr">title</span>=<span class="string">&quot;RSS → /atom.xml&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/atom.xml&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-rss&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">i</span>&gt;</span> RSS</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入到 <code>MyBlog\themes\next\layout\_partials\sidebar\site-overview.njk</code> 文件图示位置中</p>
<p><img src="https://img-blog.csdnimg.cn/eb84ad84439e49e081f8530a69f7927a.png"></p>
<h1 id="社交图标加入-CSDN"><a href="#社交图标加入-CSDN" class="headerlink" title="社交图标加入 CSDN"></a>社交图标加入 CSDN</h1><p>效果图，<a href="https://pdpeng.github.io/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/3bb93c0c807b491886346c95627b0786.png"></p>
<p><code>Next</code> 最新版的主题，没有找到引用阿里巴巴图标库的方法（总提示请求无效），如果你有不错的解决方案，欢迎评论区留言</p>
<p>这里给出一个和 <code>CSDN</code> 比较类似的图标</p>
<p><img src="https://img-blog.csdnimg.cn/7243c70b6334413ca1a26bcc8d7d8a48.png"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/m0_51269961</span> <span class="string">||</span> <span class="string">fa-solid</span> <span class="string">fa-c</span></span><br></pre></td></tr></table></figure>

<h1 id="点击头像返回主页效果"><a href="#点击头像返回主页效果" class="headerlink" title="点击头像返回主页效果"></a>点击头像返回主页效果</h1><p>这个比较简单，在头像的位置添加 <code>&lt;a&gt;&lt;/a&gt;</code> 标签就好。可能定位比较麻烦，文件位置是 <code>MyBlog\themes\next\layout\_partials\sidebar\site-overview.njk</code></p>
<p><img src="https://img-blog.csdnimg.cn/49515d713dda41ccbf40642b35b73e9b.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.avatar.url %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;site-author-image&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&#123;&#123; author &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(theme.avatar.url) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除社交链接底部横线"><a href="#删除社交链接底部横线" class="headerlink" title="删除社交链接底部横线"></a>删除社交链接底部横线</h1><p>效果图，<a href="https://pdpeng.github.io/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/d3511cf402fa471c8d36f27147d5652c.png"><br>文件位置是<code>MyBlog\themes\next\source\css\_schemes\Muse\_sidebar.styl</code> ，找到 <code>a</code> 标签的 css 样式，添加 <code>border-bottom 0px;</code> 即可</p>
<p><img src="https://img-blog.csdnimg.cn/d9e2b5c5fbee4345a2cdc00041fc2854.png"></p>
<h1 id="加入看板娘"><a href="#加入看板娘" class="headerlink" title="加入看板娘"></a>加入看板娘</h1><p>效果图，<a href="https://pdpeng.github.io/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/82aa7bff9d4e46a68c2fd8833538e370.png"></p>
<blockquote>
<p>如果你的站点开启了侧边栏 <strong>始终显示</strong>，在进行下述操作后，请隐藏侧边栏后查看效果</p>
</blockquote>
<p>图示路径下</p>
<p><img src="https://img-blog.csdnimg.cn/acc6d09706a54ccf9e7b63e44a5bb1f4.png"></p>
<p>加入这段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件末尾加入下列配置项</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义看板娘 https://github.com/PDPENG/live2d-widget</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>效果即可显示</p>
<hr>
<p>如果你需要更高级的自定义，可继续完成下面的配置</p>
<p>切换到主题的 <code>source</code> 文件夹下，克隆项目到本地（删除项目 <code>.git</code> 文件，避免推送报错），<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=">项目地址<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/stevenjoezhang/live2d-widget</span><br></pre></td></tr></table></figure>

<p>*注意：<code>live2d_path</code> 参数应使用 <strong>绝对路径</strong></p>
<p>更多自定义配置参见，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzEzNjQwNjI1LzMwMzIzNjQ=">live2d-widget 自定义配置<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h1 id="自定义-404-页面"><a href="#自定义-404-页面" class="headerlink" title="自定义 404 页面"></a>自定义 404 页面</h1><p>效果图，<a href="https://pdpeng.github.io/404">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/253a05ded9824343873169a96e2459a4.png"></p>
<p>之前部署在服务器时，站点是配置了 <code>404</code> 页面的，但是在 <code>Github Pages</code> 中只有访问 <code>/404</code> 时，才能定向到页面，并不能实现真正的 <code>404</code> 效果</p>
<p>查看了官方文档后，实现也比较容易，只需要在站点资源文件夹（<code>source</code> 目录下）添加 <code>404.md</code> 或 <code>404.html</code> 即可</p>
<p><img src="https://img-blog.csdnimg.cn/5f5a08c3c9984bc1bdc43897c1380dfc.png"></p>
<p>下面放上杰森的页面配置，供大家参考</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2022-01-29 18:14:03</span><br><span class="line">comments: false</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>页面走丢啦~<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon-32x32.png&quot;</span> <span class="attr">type</span>=<span class="string">image/x-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.error</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin-top</span>:-<span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/*border:1px solid red;*/</span></span></span><br><span class="line"><span class="language-css">		<span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.error</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.error</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: <span class="number">16px</span> ! important;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-weight</span>: <span class="number">600</span></span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin</span>:<span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">padding</span>:<span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.back</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">background</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>:<span class="number">0px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="comment">/* base.css */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">	     <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">	     <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">	     <span class="attribute">min-width</span>: <span class="number">950px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">span</span>,applet,<span class="selector-tag">object</span>,<span class="selector-tag">iframe</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,pre,<span class="selector-tag">a</span>,<span class="selector-tag">abbr</span>, acronym,<span class="selector-tag">address</span>,big,<span class="selector-tag">cite</span>,<span class="selector-tag">code</span>,<span class="selector-tag">del</span>,<span class="selector-tag">dfn</span>,<span class="selector-tag">em</span>,<span class="attribute">font</span>,<span class="selector-tag">img</span>,<span class="selector-tag">ins</span>,<span class="selector-tag">kbd</span>,<span class="selector-tag">q</span>,s,<span class="selector-tag">samp</span>,small,strike, sub,<span class="selector-tag">sup</span>,tt,<span class="selector-tag">var</span>,u,<span class="selector-tag">i</span>,center,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">form</span>,<span class="selector-tag">label</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">table</span>,<span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>,<span class="selector-tag">tfoot</span>,<span class="selector-tag">thead</span>,<span class="selector-tag">tr</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>，<span class="selector-tag">p</span>,<span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">	    align:baseline;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background</span>:transparent;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	    -moz-<span class="attribute">box-sizing</span>:border-box; <span class="comment">/* Firefox */</span></span></span><br><span class="line"><span class="language-css">	    -webkit-<span class="attribute">box-sizing</span>:border-box; <span class="comment">/* Safari */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">box-sizing</span>:border-box;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">list-style-type</span>:none;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">font-family</span>: Microsoft YaHei,microsoft yahei ui,微软雅黑,SimSun,楷体,楷体_GB2312;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	option,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,select,<span class="selector-tag">textarea</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">outline</span>:none;</span></span><br><span class="line"><span class="language-css">	    appearance:none;</span></span><br><span class="line"><span class="language-css">	    -moz-appearance:none;</span></span><br><span class="line"><span class="language-css">	    -webkit-appearance:none;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">	    webkit-appearance: none;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background</span>:none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">body</span>, <span class="selector-tag">td</span>, <span class="selector-tag">div</span>,<span class="selector-tag">span</span>,<span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">line-height</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">letter-spacing</span>:<span class="number">0</span>; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">margin</span>:<span class="number">0</span>; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">padding</span>:<span class="number">0</span>; </span></span><br><span class="line"><span class="language-css">	    -moz-<span class="attribute">font-smoothing</span>:antialiased; </span></span><br><span class="line"><span class="language-css">	    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">font-smoothing</span>:antialiased; </span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-tag">blockquote</span>,<span class="selector-tag">q</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">quotes</span>:none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,<span class="selector-tag">q</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">q</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">content</span>:none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">outline</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-tag">ins</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-tag">del</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">text-decoration</span>:line-through;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border-collapse</span>:collapse;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border-spacing</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.banner</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">width</span>: <span class="number">1004px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">height</span>:<span class="number">232px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">margin</span>: <span class="number">10px</span> auto <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.banner</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">a</span>&#123;  </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">text-decoration</span>:none; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">cursor</span>:pointer; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">outline</span>:none; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">text-decoration-line</span>: none;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">color</span>:<span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">a</span>, area &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">outline</span>:none; </span></span><br><span class="line"><span class="language-css">	    blr:<span class="built_in">expression</span>(this.onFocus=this.<span class="built_in">blur</span>())</span></span><br><span class="line"><span class="language-css">	&#125; </span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123; </span></span><br><span class="line"><span class="language-css">	    <span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/404.png&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>抱歉！您访问的页面不存在或已删除<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数学公式支持"><a href="#数学公式支持" class="headerlink" title="数学公式支持"></a>数学公式支持</h1><p>效果图，<a href="https://pdpeng.github.io/2022/05/01/projecteuler014/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/165f8d7dc7fd4537baec48f7be8f0db6.png"></p>
<p>主题配置文件中，该字段配置，详情参考 <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoaXJkLXBhcnR5LXNlcnZpY2VzL21hdGgtZXF1YXRpb25z">Math Equations<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># Warning: Please install / uninstall the relevant renderer according to the documentation.</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如依照上述配置，日后发文请在需要加载数学公式渲染文章的 <code>front-matter</code> 处添加 <code>mathjax: true</code>。例如</p>
<p><img src="https://img-blog.csdnimg.cn/b3aee772d39f46e4afd9fa3bb1d90493.png"></p>
<h1 id="本地搜索功能排错指南"><a href="#本地搜索功能排错指南" class="headerlink" title="本地搜索功能排错指南"></a>本地搜索功能排错指南</h1><p>效果图，<a href="https://pdpeng.github.io/search.xml">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/58c14cf7890d4145b183ab87710d6122.png"></p>
<p>部署完成后，发现本地搜索功能失效，直接 <a href="https://pdpeng.github.io/search.xml">访问站点</a> <code>search.xml</code> 浏览器显示</p>
<p><img src="https://img-blog.csdnimg.cn/ee1749106db94638892761c024f92f22.png"></p>
<p>这里在保证插件配置正常的前提下，给出排除字符错误的解决方案</p>
<p>我们将 <code>search.xml</code> 保存到本地用 <code>vscode</code> 打开，根据浏览器报错的行、列指示，发现字符转义错误。在文章页面下删除该类字符后重新部署，搜索功能恢复</p>
<h1 id="自定义站点页脚"><a href="#自定义站点页脚" class="headerlink" title="自定义站点页脚"></a>自定义站点页脚</h1><p>效果图，<a href="https://pdpeng.github.io/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/2f4721596ce94b36a454484b4a20d17a.png"></p>
<p>路径如图，按需修改</p>
<p><img src="https://img-blog.csdnimg.cn/aa314236ea9a451e872548a09875f9f2.png"></p>
<h1 id="加入标签云"><a href="#加入标签云" class="headerlink" title="加入标签云"></a>加入标签云</h1><p>效果图，<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">预览地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/eba65e08ae2f411b8da1c3bda18f6ac1.png"></p>
<ul>
<li>进入到 <code>hexo</code> 的根目录，然后在 <code>package.json</code> 中添加依赖: <code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code></li>
<li>然后执行 <code>npm install</code> 命令</li>
</ul>
<p>打开路径 <code>next/layout/_macro/sidebar.swig</code>，添加如下配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> site.<span class="property">tags</span>.<span class="property">length</span> &gt; <span class="number">1</span> %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span> src=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; list_tags() &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>完成安装和显示，可以通过 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 来进行本地预览, hexo clean 为必须选项。</li>
<li>*注：不要使用 <code>hexo g -d 或者 hexo d -g</code> 这类组合命令，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa2VDb2Rlci9oZXhvLXRhZy1jbG91ZC9pc3N1ZXMvNw==">详见<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0QwbjlYMW4vaGV4by10YWctY2xvdWQvYmxvYi9tYXN0ZXIvUkVBRE1FLlpILm1k">项目地址及详细教程参考<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="README-转义问题"><a href="#README-转义问题" class="headerlink" title="README 转义问题"></a>README 转义问题</h1><p>效果图，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BEUEVORy9wZHBlbmcuZ2l0aHViLmlvL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==">预览地址<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/594b078d532348ae88a2c778e8b92eb8.png"></p>
<p>当我们为项目配置 <code>README.md</code> 文件时，发布后会发现文件会被 <code>hexo</code> 转义成 <code>.html</code>  文件，详见 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1s">Hexo 配置<i class="fa fa-external-link-alt"></i></span></p>
<p>这里以站点添加中英双语介绍文件为例，将项目 <code>README.md</code> 及 <code>EN.md</code> 放在 <code>source</code> 目录下</p>
<p>然后在图示位置根据 <code>glob</code> 语法规则添加值即可</p>
<p><img src="https://img-blog.csdnimg.cn/f78bcc8b15b84813b9a270f98e0705bc.png"></p>
<p>这样 <code>hexo</code> 就不会渲染匹配到的文件，显示正常</p>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dic3UyMDA0L2FydGljbGUvZGV0YWlscy8xMjI2NjExMTY=">GitHub Actions 自动部署 Hexo 01<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zYW5vbnouZ2l0aHViLmlvLzIwMjAvZGVwbG95LWEtaGV4by1ibG9nLWZyb20tZ2l0aHViLWFjdGlvbnMv">GitHub Actions 自动部署 Hexo 02<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtYml0aW9uLWVjaG8vYW1iaXRpb24tZWNoby5naXRodWIuaW8vYmxvYi9tYWluLy5naXRodWIvd29ya2Zsb3dzL2J1aWxkLnltbA==">Actions yml 文件示例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE5LzA5L2dldHRpbmctc3RhcnRlZC13aXRoLWdpdGh1Yi1hY3Rpb25zLmh0bWw=">GitHub Actions 入门教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzEzNjQwNjI1LzMwMzIzNjQ=">CDN 方式添加看板娘 live2d-widget<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc2VjLmNvbS8yMDE3LzEyL2hleG9zZWFyY2guaHRtbA==">本地搜索失效终极解决方案<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTgvMDkvYmFzaC13aWxkY2FyZHMuaHRtbA==">命令行通配符教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kN2E5N2IxN2VlNWE=">Glob 语法及解析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWF0Y2gvbWljcm9tYXRjaCNleHRlbmRlZC1nbG9iYmluZw==">#extended-globbing<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>网站建设</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea 及 eclipse 配置 Tomcat 并发布 Web 项目</title>
    <url>/2022/03/22/idea-eclips-web-project/</url>
    <content><![CDATA[<blockquote>
<p>本篇内容主要讲述如何在 idea 和 eclipse 开发工具中配置 Tomcat，记录一些踩坑的地方，帮大家避坑，节约时间</p>
</blockquote>
<p>首先，你的电脑中应该默认配置好 java 的开发环境，没有配置的朋友请<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTg4NzU5Njc=">参考这里<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="tomcat-安装配置"><a href="#tomcat-安装配置" class="headerlink" title="tomcat 安装配置"></a>tomcat 安装配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Tomcat是由Apache软件基金会属下Jakarta项目开发的Servlet容器，按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全局管理和Tomcat阀等。由于Tomcat本身也内含了HTTP服务器，因此也可以视作单独的Web服务器。但是，不能将Tomcat和Apache HTTP服务器混淆，Apache HTTP服务器是用C语言实现的HTTPWeb服务器；这两个HTTP web server不是捆绑在一起的。Apache Tomcat包含了配置管理工具，也可以通过编辑XML格式的配置文件来进行配置。(源 : Wikipedia)</p>
</blockquote>
<p>总结来说就是免费、开源、轻量的 Web 服务器</p>
<span id="more"></span>

<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote>
<p>这里建议，不要下载最新版！！</p>
</blockquote>
<p>大家也可以根据开发环境选择合适的版本</p>
<p><img src="https://img-blog.csdnimg.cn/1633f99f73ae4af68dd7144c0c4234a7.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy9kb3dubG9hZC04MC5jZ2k=">官网地址<i class="fa fa-external-link-alt"></i></span>，找到图示位置下载</p>
<p><img src="https://img-blog.csdnimg.cn/fd5cf20cd4f7486b806d043a279d5a43.png"></p>
<p>下载后解压，放到合适位置（记住路径，后面需要用）</p>
<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>打开系统环境变量，添加表中两项，变量值为 tomcat 文件路径</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>CATALINA_HOME</td>
<td>C:\IDE\apache-tomcat-8.5.77</td>
</tr>
<tr>
<td>CATALINA_BASE</td>
<td>C:\IDE\apache-tomcat-8.5.77</td>
</tr>
</tbody></table>
<p><img src="https://img-blog.csdnimg.cn/f21a2a5711ad4751bf3ad9035183b312.png"></p>
<p>继续打开 <code>Path</code> 变量，追加两项，注意 <code>;</code> 分隔<br> <code>%CATALINA_HOME%\lib</code>       <code>%CATALINA_HOME%\bin</code></p>
<p><img src="https://img-blog.csdnimg.cn/7bec4f222036426ab871235ce03c3c27.png"></p>
<p>在 tomcat 安装目录 <code>bin</code> 目录下，打开终端，运行指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 安装 tomcat 服务</span><br><span class="line">service.bat install</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8748c1d0354c4ead81c4cfd555831bbe.png"></p>
<p><code>Win+R</code>  执行  <code>services.msc</code> 打开服务窗口，修改 tomcat 启动方式为自动</p>
<p><img src="https://img-blog.csdnimg.cn/f7d937cd8e0749b29bee15e24fd24680.png"></p>
<p>可以在安装目录下启动 <code>tomcat8w.exe</code> 程序控制&#x2F;查看运行状态</p>
<p><img src="https://img-blog.csdnimg.cn/b10cb4d94b6d4b0e86aa56f77c46ae24.png"></p>
<p>访问 <code>http://localhost:8080/</code> 网址，显示图示页面即配置成功</p>
<p><img src="https://img-blog.csdnimg.cn/a21bfa06e3eb4539a8688e05cd9d5163.png"></p>
<h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><blockquote>
<p>此部分操作不建议初次上手直接操作，请在实际需求中进行更改，初次配置可略过该项</p>
</blockquote>
<h3 id="修改默认内存"><a href="#修改默认内存" class="headerlink" title="修改默认内存"></a>修改默认内存</h3><p>在实际开发中可能会遇到默认 128MB 内存不够用的情况，我们需要调大默认容量</p>
<p>打开图示路径</p>
<p><img src="https://img-blog.csdnimg.cn/0105f6cb411942bc9c006412d68ed966.png"></p>
<p>打开后搜索 <code>JAVA_OPTS</code>，将默认位置内容修改为 <code>JAVA_OPTS=&#39;-Xms256m - Xmx512m&#39;</code> ，表示初始化内存为 256MB，可用最大内存为 512MB</p>
<p><img src="https://img-blog.csdnimg.cn/b7ec853846e046e2bc453add8fbe177f.png"></p>
<h3 id="管理员用户名和密码设置"><a href="#管理员用户名和密码设置" class="headerlink" title="管理员用户名和密码设置"></a>管理员用户名和密码设置</h3><p>进入图示目录，打开 <code>tomcat-users.xml</code> 文件</p>
<p><img src="https://img-blog.csdnimg.cn/d4cc654ad19b4fb5a1512fd5f973c684.png"></p>
<p>搜索 <code>username</code> ，在 <code>password</code> 处设置密码</p>
<p><img src="https://img-blog.csdnimg.cn/2713da7d5cb144468a8e99a775f1c7d7.png"></p>
<h3 id="支持中文文件名称"><a href="#支持中文文件名称" class="headerlink" title="支持中文文件名称"></a>支持中文文件名称</h3><p>一般情况下，我们如果在使用 tomcat 时，打开的文件以中文命名或超链接中下载含中文名，会出现乱码，这时我们修改下对应配置文件解决该问题</p>
<p>打开图示文件</p>
<p><img src="https://img-blog.csdnimg.cn/d7db5cd5fbe0465993579118c04ec35d.png"></p>
<p>定位到 <code>Connector port ...</code> 位置处添加 <code>URLEncoding=&quot;UTF-8&quot;</code> 即可</p>
<p><img src="https://img-blog.csdnimg.cn/d0250953d7c942caae90b883b2ec524c.png"></p>
<h1 id="idea-配置-tomcat-并发布-web-项目"><a href="#idea-配置-tomcat-并发布-web-项目" class="headerlink" title="idea 配置 tomcat 并发布 web 项目"></a>idea 配置 tomcat 并发布 web 项目</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>新建 Java 项目</p>
<p><img src="https://img-blog.csdnimg.cn/5f3b446246c24904b4f5081f1aa6be0a.png"></p>
<p>添加项目路径</p>
<p><img src="https://img-blog.csdnimg.cn/18f06186964244b4aaaf86fa238a5562.png"></p>
<p>添加 web 框架支持</p>
<p><img src="https://img-blog.csdnimg.cn/ccf6902b906740bd9cc1116d31ffb4d8.png"></p>
<p>选择 web 标准</p>
<p><img src="https://img-blog.csdnimg.cn/58254a8ba44d42e2877a9f908a6532ea.png"></p>
<p>查看当前的项目结构</p>
<p><img src="https://img-blog.csdnimg.cn/84cbfd6e98d44b0586eea75073425adf.png"></p>
<p>目录文件解释：</p>
<ul>
<li>src ：存放类源目录</li>
<li>web ：虚拟路径，存放静态、动态网页目录</li>
<li>WEB-INF：受 Web 容器保护的目录</li>
<li>web.xml ：描述符文件，java web 服务配置文件</li>
</ul>
<h2 id="为项目添加-tomcat"><a href="#为项目添加-tomcat" class="headerlink" title="为项目添加 tomcat"></a>为项目添加 tomcat</h2><p>编辑项目配置</p>
<p><img src="https://img-blog.csdnimg.cn/610b5630d1de4ba99ae94f1988aebcd7.png"></p>
<p>添加 <code>Tomcat Server</code>，选择第一个，注意区分版本，否则会有警告信息</p>
<p><img src="https://img-blog.csdnimg.cn/308953b9e2df4ef48a894ecde7872ef2.png"></p>
<p>选中安装路径，IDE 自动识别版本号、端口号等信息</p>
<p><img src="https://img-blog.csdnimg.cn/2b7f4f85734f4e5a9f0131d19c47c9dc.png"></p>
<p>部署信息</p>
<p><img src="https://img-blog.csdnimg.cn/4dd0d126d7c4446882a6d24b68d5f396.png"></p>
<p>设置项目名称，此处如果配置，那么访问的 URL 则为 <code>http://localhost:8080/[项目名]/...</code>；若设置为 <code>/</code> ，则访问的 URL 为 <code>http://localhost:8080/...</code></p>
<p>&#x3D;&#x3D;建议配置，以免每次系统默认生成的名字造成 Tomcat 访问报 404 错误&#x3D;&#x3D;</p>
<p><img src="https://img-blog.csdnimg.cn/88df27ee80e84513b34f0752b2049091.png"></p>
<p>其他信息配置</p>
<p><img src="https://img-blog.csdnimg.cn/8d9a9674f6fd48389eb60215acb09637.png"></p>
<p>此时，一个 web 项目的基本配置完成</p>
<h2 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h2><p>启动服务</p>
<p><img src="https://img-blog.csdnimg.cn/8f2f38ed291a42eaa19060e16b78f5ca.png"></p>
<p>执行信息</p>
<p><img src="https://img-blog.csdnimg.cn/1ecae667f74a4204888d3adafb39e445.png"></p>
<p>打开浏览器访问(执行成功可以自动跳转) <code>http://localhost:8080/</code> </p>
<p><img src="https://img-blog.csdnimg.cn/fd2c5ff2835e43d49c38b17c1a0e833b.png"></p>
<p>发布成功！</p>
<h1 id="eclipse-配置-tomcat-并发布-web-项目"><a href="#eclipse-配置-tomcat-并发布-web-项目" class="headerlink" title="eclipse 配置 tomcat 并发布 web 项目"></a>eclipse 配置 tomcat 并发布 web 项目</h1><h2 id="引入-tomcat"><a href="#引入-tomcat" class="headerlink" title="引入 tomcat"></a>引入 tomcat</h2><p>打开首选项</p>
<p><img src="https://img-blog.csdnimg.cn/0af54a05fb3f4a17bfe4834d9f8bf7f6.png"></p>
<p>向下滑找到 <code>Server</code> </p>
<p><img src="https://img-blog.csdnimg.cn/d28fad2b25b44af8a67a3cc599ae4939.png"></p>
<p>选择匹配的 tomcat 版本</p>
<p><img src="https://img-blog.csdnimg.cn/d302ac55d57548779161a79aa7510605.png"></p>
<p>细节配置</p>
<p><img src="https://img-blog.csdnimg.cn/b14bc82068604977898cfb8ccacdd4a5.png"></p>
<p>保存退出</p>
<p><img src="https://img-blog.csdnimg.cn/92a2b4f87e654143980f552cf891e4d0.png"></p>
<h2 id="建立-web-项目"><a href="#建立-web-项目" class="headerlink" title="建立 web 项目"></a>建立 web 项目</h2><p>文件 -&gt; 新建</p>
<p><img src="https://img-blog.csdnimg.cn/760a421c1387496a996d8f5b3f846773.png"></p>
<p>配置项目信息</p>
<p><img src="https://img-blog.csdnimg.cn/50be77d4c5db4e8aa7f5c15908a22357.png"></p>
<p>java 类源文件位置，默认就好</p>
<p><img src="https://img-blog.csdnimg.cn/01ccf84469944eab8a2e0360a4bf1788.png"></p>
<p><img src="https://img-blog.csdnimg.cn/683c038a57104ec8995306a6f9aa1407.png"></p>
<p>单击 finish 完成创建</p>
<h2 id="发布测试-1"><a href="#发布测试-1" class="headerlink" title="发布测试"></a>发布测试</h2><p>首先打开 <code>Servers</code> 面板</p>
<p><img src="https://img-blog.csdnimg.cn/0342282caca44eb0a1a427faede8f01b.png"></p>
<p>定义服务</p>
<p><img src="https://img-blog.csdnimg.cn/4da965e326794b98aa7bb18820c17ec1.png"></p>
<p>点击 <code>Next</code> ，选中服务名称添加</p>
<p><img src="https://img-blog.csdnimg.cn/d6b8a3a8a4804c3a843274ba502c2433.png"></p>
<p>在 webapp 目录下新建一个 <code>.jsp</code>  文件</p>
<p><img src="https://img-blog.csdnimg.cn/247480391ca14e3ba4582b98bab9a2bb.png"></p>
<p><img src="https://img-blog.csdnimg.cn/fa83efcfe39f445eab1cb426b5d05468.png"></p>
<p>写入测试程序(记得保存)，测试服务状态</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by Eclipse</span><br><span class="line">  User: jason</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">22</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">27</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;java-web-project&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  Congratulations!! settings successful.</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<p><img src="https://img-blog.csdnimg.cn/3791a1889b1049ecb119db366f20f2a8.png"></p>
<p>可以在 <code>Console</code> 面板下查看到执行信息</p>
<p><img src="https://img-blog.csdnimg.cn/61025170b1514f6ba0832fef4cda178b.png"></p>
<p>浏览器地址栏输入 <code>http://localhost:8080/test/test.jsp</code> 即可访问</p>
<blockquote>
<p>文件 test&#x2F;test.jsp : 第一个 test 即为上述 Web Module 处设置的 Context root 名称</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/43fc9b96e5984070bf040dc37c6e946d.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实花了这么多时间我是比较意外的，最后发现本地 java 版本太多，一开始没有去仔细配置好对应的版本，太过于依赖 IDE</p>
<p>安装 tomcat 时也是首先去进行了 <strong>优化配置</strong> 像设置缓存、配置密码这些，其实我们首先应该让项目跑起来，日后再去不断提升安全性之类的问题</p>
<p>遇到问题，我们也要学着不断总结，不断试错，不论多么小的错误都不要轻视。因为这点点滴滴都是经验的不断积累。今天错了，日后保证不再出错，效率才会不断提升。遇到问题欢迎大家留言讨论，加油！！</p>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk1NzkzMS9hcnRpY2xlL2RldGFpbHMvMTA4MDg2Njg4">Error running ‘Tomcat 8.5.57‘: Address localhost:8080 is already in use<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWxlYWRpbmcuY29tL2FydGljbGUvNjcwNDUyNTY1MzYv">Application Server was not connected before run configuration stop, reason: Unable to ping server at<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjkwMzczMjcvaW50ZWxsaWotaWRlYS10b21jYXQtYXBwbGljYXRpb24tc2VydmVyLXdhcy1ub3QtY29ubmVjdGVkLWJlZm9yZS1ydW4tY29uZmlndXJhdGk=">Intellij IDEA Tomcat Application Server was not connected before run configuration stop, reason: Unable to ping server at localhost:1099<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2hlbnl1YW5mZW5nL3AvMTE4MzE1NzEuaHRtbA==">Windows 查看端口占用进程并关闭<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 项目结构不显示解决方案</title>
    <url>/2021/08/02/idea-project-structure-miss/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用IDEA的时候，忽然发现打开项目变成了这样</p>
<p><img src="https://img-blog.csdnimg.cn/bf98986582f2435a91585e1e9c2f453b.png"></p>
<p>怎么点击都无法打开项目结构，只能显示默认的配置文件夹和输出文件夹</p>
<span id="more"></span>
<p>非常疑惑，项目结构去了哪里，不能是整个文件丢失了吧，这不白给了嘛，一整个白忙活</p>
<p><img src="https://img-blog.csdnimg.cn/dfb523db9fe347b8b735e18b4e92e88b.png"></p>
<p>还好找到了解决办法，快来一起看看吧</p>
<hr>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>左上角依次找到file-&gt;project structure-&gt;modules-&gt; +号-&gt;import modules，选择导入的项目文件</p>
<p><img src="https://img-blog.csdnimg.cn/6096c629aec44261a5e975cd7791319b.png"></p>
<p>选择这两项</p>
<p><img src="https://img-blog.csdnimg.cn/52a8be8717a647498f25c3bc12d79464.png"></p>
<p>最后点击 Finish就显示出来啦!</p>
<p><img src="https://img-blog.csdnimg.cn/761eee8d6b2b4adebfaa345bcb3871fb.png"></p>
<p>不说了，赶紧码代码去了~~</p>
<p><img src="https://img-blog.csdnimg.cn/3c867c8d22ed4b16a9fd5eb6576344f3.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ Idea 常用快捷键列表</title>
    <url>/2022/05/01/idea-shortcut-key/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>Idea 开发常用快捷键总结，祝你一臂之力，不加班！</strong><br>💖💖感觉本文不错的话，还请各位小伙伴👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/3941e32c678044b2a71145ea22853854.gif" alt="like"></center>

<hr>
<h1 id="🚀1-高频快捷键列表"><a href="#🚀1-高频快捷键列表" class="headerlink" title="🚀1.高频快捷键列表"></a>🚀1.高频快捷键列表</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl+Shift + Enter</td>
<td align="center">语句完成</td>
</tr>
<tr>
<td align="center">！</td>
<td align="center">否定完成，输入表达式时 “！”键</td>
</tr>
<tr>
<td align="center">Ctrl+E</td>
<td align="center">最近文件</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+E</td>
<td align="center">最近更改的文件</td>
</tr>
<tr>
<td align="center">Shift+Click</td>
<td align="center">关闭文件</td>
</tr>
<tr>
<td align="center">Ctrl+[ OR ]</td>
<td align="center">可以跑到大括号的开头与结尾</td>
</tr>
<tr>
<td align="center">Ctrl+F12</td>
<td align="center">显示当前文件的结构</td>
</tr>
<tr>
<td align="center">Ctrl+F7</td>
<td align="center">查询当前元素在当前文件中的引用，按 F3 可以选择</td>
</tr>
<tr>
<td align="center">Ctrl+N</td>
<td align="center">快速打开类</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+N</td>
<td align="center">快速打开文件</td>
</tr>
<tr>
<td align="center">Alt+Q</td>
<td align="center">可以看到当前方法的声明</td>
</tr>
<tr>
<td align="center">Alt+Q</td>
<td align="center">可以看到当前方法的声明</td>
</tr>
<tr>
<td align="center">Ctrl+P</td>
<td align="center">可以显示参数信息</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Insert</td>
<td align="center">可以选择剪贴板内容并插入</td>
</tr>
<tr>
<td align="center">Alt+Insert</td>
<td align="center">可以生成构造器&#x2F;Getter&#x2F;Setter等</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+V</td>
<td align="center">可以引入变量。例如：new String(); 自动导入变量定义</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+T</td>
<td align="center">可以把代码包在一个块内 例如：try&#x2F;catch</td>
</tr>
<tr>
<td align="center">Ctrl+Enter</td>
<td align="center">导入包，自动修正</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+L</td>
<td align="center">格式化代码</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+I</td>
<td align="center">将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+O</td>
<td align="center">优化导入的类和包</td>
</tr>
<tr>
<td align="center">Ctrl+R</td>
<td align="center">替换文本</td>
</tr>
<tr>
<td align="center">Ctrl+F</td>
<td align="center">查找文本</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Space</td>
<td align="center">自动补全代码</td>
</tr>
<tr>
<td align="center">Ctrl+空格</td>
<td align="center">代码提示（与系统输入法快捷键冲突）</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Alt+N</td>
<td align="center">查找类中的方法或变量</td>
</tr>
<tr>
<td align="center">Alt+Shift+C</td>
<td align="center">最近的更改</td>
</tr>
<tr>
<td align="center">Alt+Shift+Up&#x2F;Down</td>
<td align="center">上&#x2F;下移一行</td>
</tr>
<tr>
<td align="center">Shift+F6</td>
<td align="center">重构 – 重命名</td>
</tr>
<tr>
<td align="center">Ctrl+X</td>
<td align="center">删除行</td>
</tr>
<tr>
<td align="center">Ctrl+D</td>
<td align="center">复制行</td>
</tr>
<tr>
<td align="center">Ctrl+&#x2F;或Ctrl+Shift+&#x2F;</td>
<td align="center">注释（&#x2F;&#x2F;或者&#x2F;**&#x2F;）</td>
</tr>
<tr>
<td align="center">Ctrl+J</td>
<td align="center">自动代码（例如：serr）</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+J</td>
<td align="center">用动态模板环绕</td>
</tr>
<tr>
<td align="center">Ctrl+H</td>
<td align="center">显示类结构图（类的继承层次）</td>
</tr>
<tr>
<td align="center">Ctrl+Q</td>
<td align="center">显示注释文档</td>
</tr>
<tr>
<td align="center">Alt+F1</td>
<td align="center">查找代码所在位置</td>
</tr>
<tr>
<td align="center">Alt+1</td>
<td align="center">快速打开或隐藏工程面板</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+left&#x2F;right</td>
<td align="center">返回至上次浏览的位置</td>
</tr>
<tr>
<td align="center">Alt+left&#x2F;right</td>
<td align="center">切换代码视图</td>
</tr>
<tr>
<td align="center">Alt+Up&#x2F;Down</td>
<td align="center">在方法间快速移动定位</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Up&#x2F;Down</td>
<td align="center">向上&#x2F;下移动语句</td>
</tr>
<tr>
<td align="center">F2 或 Shift+F2</td>
<td align="center">高亮错误或警告快速定位</td>
</tr>
<tr>
<td align="center">Tab</td>
<td align="center">代码标签输入完成后，按 Tab，生成代码</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F7</td>
<td align="center">高亮显示所有该文本，按 Esc 高亮消失</td>
</tr>
<tr>
<td align="center">Alt+F3</td>
<td align="center">逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td align="center">Ctrl+Up&#x2F;Down</td>
<td align="center">光标中转到第一行或最后一行下</td>
</tr>
<tr>
<td align="center">Ctrl+B&#x2F;Ctrl+Click</td>
<td align="center">快速打开光标处的类或方法（跳转到定义处）</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+B</td>
<td align="center">跳转到方法实现处</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Backspace</td>
<td align="center">跳转到上次编辑的地方</td>
</tr>
<tr>
<td align="center">Ctrl+O</td>
<td align="center">重写方法</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Space</td>
<td align="center">类名自动完成</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Up&#x2F;Down</td>
<td align="center">快速跳转搜索结果</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+J</td>
<td align="center">整合两行</td>
</tr>
<tr>
<td align="center">Alt+F8</td>
<td align="center">计算变量值</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+V</td>
<td align="center">可以将最近使用的剪贴板内容选择插入到文本</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Shift+V</td>
<td align="center">简单粘贴</td>
</tr>
<tr>
<td align="center">Shift+Esc</td>
<td align="center">不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</td>
</tr>
<tr>
<td align="center">F12</td>
<td align="center">把焦点从编辑器移到最近使用的工具窗口</td>
</tr>
<tr>
<td align="center">Shift+F1</td>
<td align="center">要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>
</tr>
<tr>
<td align="center">Ctrl+W</td>
<td align="center">可以选择单词继而语句继而行继而函数</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+W</td>
<td align="center">取消选择光标所在词</td>
</tr>
<tr>
<td align="center">Alt+F7</td>
<td align="center">查找整个工程中使用地某一个类、方法或者变量的位置</td>
</tr>
<tr>
<td align="center">Ctrl+I</td>
<td align="center">实现方法</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+U</td>
<td align="center">大小写转化</td>
</tr>
<tr>
<td align="center">Ctrl+Y</td>
<td align="center">删除当前行</td>
</tr>
<tr>
<td align="center">Shift+Enter</td>
<td align="center">向下插入新行</td>
</tr>
<tr>
<td align="center">psvm&#x2F;sout</td>
<td align="center">main&#x2F;System.out.println(); Ctrl+J，查看更多</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F</td>
<td align="center">全局查找</td>
</tr>
<tr>
<td align="center">Ctrl+F</td>
<td align="center">查找&#x2F;Shift+F3，向上查找&#x2F;F3，向下查找</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+S</td>
<td align="center">高级搜索</td>
</tr>
<tr>
<td align="center">Ctrl+U</td>
<td align="center">转到父类</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+S</td>
<td align="center">打开设置对话框</td>
</tr>
<tr>
<td align="center">Alt+Shift+Inert</td>
<td align="center">开启&#x2F;关闭列选择模式</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Shift+S</td>
<td align="center">打开当前项目&#x2F;模块属性</td>
</tr>
<tr>
<td align="center">Ctrl+G</td>
<td align="center">定位行</td>
</tr>
<tr>
<td align="center">Alt+Home</td>
<td align="center">跳转到导航栏</td>
</tr>
<tr>
<td align="center">Ctrl+Enter</td>
<td align="center">上插一行</td>
</tr>
<tr>
<td align="center">Ctrl+Backspace</td>
<td align="center">按单词删除</td>
</tr>
<tr>
<td align="center">Ctrl+”+&#x2F;-”</td>
<td align="center">当前方法展开、折叠</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+”+&#x2F;-”</td>
<td align="center">全部展开、折叠</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="🚀2-调试与编译"><a href="#🚀2-调试与编译" class="headerlink" title="🚀2.调试与编译"></a>🚀2.调试与编译</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl+F2</td>
<td align="center">停止</td>
</tr>
<tr>
<td align="center">Alt+Shift+F9</td>
<td align="center">选择 Debug</td>
</tr>
<tr>
<td align="center">Alt+Shift+F10</td>
<td align="center">选择 Run</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F9</td>
<td align="center">编译</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F10</td>
<td align="center">运行</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F8</td>
<td align="center">查看断点</td>
</tr>
<tr>
<td align="center">F8</td>
<td align="center">步过</td>
</tr>
<tr>
<td align="center">F7</td>
<td align="center">步入</td>
</tr>
<tr>
<td align="center">Shift+F7</td>
<td align="center">智能步入</td>
</tr>
<tr>
<td align="center">Shift+F8</td>
<td align="center">步出</td>
</tr>
<tr>
<td align="center">Alt+Shift+F8</td>
<td align="center">强制步过</td>
</tr>
<tr>
<td align="center">Alt+Shift+F7</td>
<td align="center">强制步入</td>
</tr>
<tr>
<td align="center">Alt+F9</td>
<td align="center">运行至光标处</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+F9</td>
<td align="center">强制运行至光标处</td>
</tr>
<tr>
<td align="center">F9</td>
<td align="center">恢复程序</td>
</tr>
<tr>
<td align="center">Alt+F10</td>
<td align="center">定位到断点</td>
</tr>
<tr>
<td align="center">Ctrl+F8</td>
<td align="center">切换行断点</td>
</tr>
<tr>
<td align="center">Ctrl+F9</td>
<td align="center">生成项目</td>
</tr>
<tr>
<td align="center">Alt+1</td>
<td align="center">项目</td>
</tr>
<tr>
<td align="center">Alt+2</td>
<td align="center">收藏</td>
</tr>
<tr>
<td align="center">Alt+6</td>
<td align="center">TODO</td>
</tr>
<tr>
<td align="center">Alt+7</td>
<td align="center">结构</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+C</td>
<td align="center">复制路径</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Shift+C</td>
<td align="center">复制引用，必须选择类名</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+Y</td>
<td align="center">同步</td>
</tr>
<tr>
<td align="center">Ctrl+~</td>
<td align="center">快速切换方案（界面外观、代码风格、快捷键映射等菜单）</td>
</tr>
<tr>
<td align="center">Shift+F12</td>
<td align="center">还原默认布局</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F12</td>
<td align="center">隐藏&#x2F;恢复所有窗口</td>
</tr>
<tr>
<td align="center">Ctrl+F4</td>
<td align="center">关闭</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F4</td>
<td align="center">关闭活动选项卡</td>
</tr>
<tr>
<td align="center">Ctrl+Tab</td>
<td align="center">转到下一个拆分器</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+Tab</td>
<td align="center">转到上一个拆分器</td>
</tr>
</tbody></table>
<h1 id="🚀3-重构"><a href="#🚀3-重构" class="headerlink" title="🚀3.重构"></a>🚀3.重构</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl+Alt+Shift+T</td>
<td align="center">弹出重构菜单</td>
</tr>
<tr>
<td align="center">Shift+F6</td>
<td align="center">重命名</td>
</tr>
<tr>
<td align="center">F6</td>
<td align="center">移动</td>
</tr>
<tr>
<td align="center">F5</td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center">Alt+Delete</td>
<td align="center">安全删除</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+N</td>
<td align="center">内联</td>
</tr>
</tbody></table>
<h1 id="🚀4-查找"><a href="#🚀4-查找" class="headerlink" title="🚀4.查找"></a>🚀4.查找</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl+F</td>
<td align="center">查找</td>
</tr>
<tr>
<td align="center">Ctrl+R</td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center">F3</td>
<td align="center">查找下一个</td>
</tr>
<tr>
<td align="center">Shift+F3</td>
<td align="center">查找上一个</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F</td>
<td align="center">在路径中查找</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+R</td>
<td align="center">在路径中替换</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+S</td>
<td align="center">搜索结构</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+M</td>
<td align="center">替换结构</td>
</tr>
<tr>
<td align="center">Alt+F7</td>
<td align="center">查找用法</td>
</tr>
<tr>
<td align="center">Ctrl+Alt+F7</td>
<td align="center">显示用法</td>
</tr>
<tr>
<td align="center">Ctrl+F7</td>
<td align="center">在文件中查找用法</td>
</tr>
<tr>
<td align="center">Ctrl+Shift+F7</td>
<td align="center">在文件中高亮显示用法</td>
</tr>
<tr>
<td align="center">Alt+left&#x2F;right</td>
<td align="center">向后、前</td>
</tr>
<tr>
<td align="center">Ctrl + H</td>
<td align="center">看类结构</td>
</tr>
<tr>
<td align="center">Ctrl+z</td>
<td align="center">后退</td>
</tr>
</tbody></table>
<h1 id="🚀5-文本编辑"><a href="#🚀5-文本编辑" class="headerlink" title="🚀5.文本编辑"></a>🚀5.文本编辑</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ctr + y</td>
<td align="center">删除</td>
</tr>
<tr>
<td align="center">ctr + D</td>
<td align="center">复制</td>
</tr>
</tbody></table>
<h1 id="🚀6-智能提示"><a href="#🚀6-智能提示" class="headerlink" title="🚀6.智能提示"></a>🚀6.智能提示</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl+ space</td>
<td>提示</td>
</tr>
<tr>
<td>ctrl + shift + space</td>
<td>智能提示</td>
</tr>
<tr>
<td>ctrl + shift + enter</td>
<td>完成当前语句</td>
</tr>
<tr>
<td>ctrl + alt + P</td>
<td>建议提示为参数</td>
</tr>
<tr>
<td>ctrl + alt + L</td>
<td>对代码重新排列格式</td>
</tr>
<tr>
<td>ctrl + alt + O</td>
<td>对imports进行优化</td>
</tr>
</tbody></table>
<h1 id="🚀7-位置定位"><a href="#🚀7-位置定位" class="headerlink" title="🚀7.位置定位"></a>🚀7.位置定位</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">F2 &#x2F; Shift + F2</td>
<td align="center">定位到下一个或上一个错误</td>
</tr>
<tr>
<td align="center">ctr+G （定位到文件行数）</td>
<td align="center">定位文件头</td>
</tr>
<tr>
<td align="center">ctr+G</td>
<td align="center">定位文件尾</td>
</tr>
<tr>
<td align="center">ctr + [</td>
<td align="center">定位到代码块开始</td>
</tr>
<tr>
<td align="center">ctr + ]</td>
<td align="center">定位到代码块结束</td>
</tr>
<tr>
<td align="center">F12</td>
<td align="center">回到最近的窗口</td>
</tr>
<tr>
<td align="center">alt + left</td>
<td align="center">回到之前的文件</td>
</tr>
<tr>
<td align="center">alt + right</td>
<td align="center">回到之后的文件</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + Backspace</td>
<td align="center">定位到最后编辑位置</td>
</tr>
<tr>
<td align="center">esc</td>
<td align="center">从tool window或其他window切换到文件编辑</td>
</tr>
<tr>
<td align="center">shift + esc</td>
<td align="center">关闭最近打开的窗口</td>
</tr>
</tbody></table>
<h1 id="🚀8-类、方法、文件定位"><a href="#🚀8-类、方法、文件定位" class="headerlink" title="🚀8.类、方法、文件定位"></a>🚀8.类、方法、文件定位</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ctr + N</td>
<td align="center">查找类</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + N</td>
<td align="center">查找文件</td>
</tr>
<tr>
<td align="center">Ctrl + Alt + Shift + N</td>
<td align="center">符号定位</td>
</tr>
<tr>
<td align="center">ctrl + F12</td>
<td align="center">查看文件结构</td>
</tr>
<tr>
<td align="center">ctr + E</td>
<td align="center">最近打开的文件</td>
</tr>
<tr>
<td align="center">alt + down</td>
<td align="center">定位下一个方法</td>
</tr>
<tr>
<td align="center">alt + up</td>
<td align="center">定位上一个方法</td>
</tr>
<tr>
<td align="center">ctr + p</td>
<td align="center">查看方法参数信息</td>
</tr>
<tr>
<td align="center">ctr + Q</td>
<td align="center">查看方法、类的doc</td>
</tr>
</tbody></table>
<h1 id="🚀9-类、方法的结构查看、定位"><a href="#🚀9-类、方法的结构查看、定位" class="headerlink" title="🚀9.类、方法的结构查看、定位"></a>🚀9.类、方法的结构查看、定位</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ctr + B</td>
<td align="center">跳到类或方法的声明</td>
</tr>
<tr>
<td align="center">ctr + U</td>
<td align="center">定位到类的父类、接口</td>
</tr>
<tr>
<td align="center">ctr + H</td>
<td align="center">查看类的继承结构</td>
</tr>
<tr>
<td align="center">ctr + shift + H</td>
<td align="center">查看方法的继承结构</td>
</tr>
<tr>
<td align="center">ctr + alt +H</td>
<td align="center">查看类或方法被调用情况</td>
</tr>
<tr>
<td align="center">ctrl + shift + I</td>
<td align="center">原地参看类、方法的声明</td>
</tr>
</tbody></table>
<h1 id="🚀10-运行"><a href="#🚀10-运行" class="headerlink" title="🚀10.运行"></a>🚀10.运行</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + F9</td>
<td align="center">Make项目(编译、修改和依赖)</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F9</td>
<td align="center">编译选定的文件、包或模块</td>
</tr>
<tr>
<td align="center">Alt + Shift + F10</td>
<td align="center">选择配置并运行</td>
</tr>
<tr>
<td align="center">Alt + Shift + F9</td>
<td align="center">选择配置和调试</td>
</tr>
<tr>
<td align="center">Shift + F10</td>
<td align="center">运行</td>
</tr>
<tr>
<td align="center">Shift + F9</td>
<td align="center">调试</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F10</td>
<td align="center">从编辑器运行上下文配置</td>
</tr>
</tbody></table>
<h1 id="🚀11-调试"><a href="#🚀11-调试" class="headerlink" title="🚀11.调试"></a>🚀11.调试</h1><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">F8</td>
<td align="center">跳过</td>
</tr>
<tr>
<td align="center">F7</td>
<td align="center">进入</td>
</tr>
<tr>
<td align="center">Shift + F7</td>
<td align="center">自动进入</td>
</tr>
<tr>
<td align="center">Shift + F8</td>
<td align="center">跳出</td>
</tr>
<tr>
<td align="center">Alt + F9</td>
<td align="center">运行到光标</td>
</tr>
<tr>
<td align="center">Alt + F8</td>
<td align="center">计算表达式</td>
</tr>
<tr>
<td align="center">F9</td>
<td align="center">恢复程序</td>
</tr>
<tr>
<td align="center">Ctrl + F8</td>
<td align="center">Toggle breakpoint</td>
</tr>
<tr>
<td align="center">Ctrl + Shift + F8</td>
<td align="center">查看断点</td>
</tr>
</tbody></table>
<blockquote>
<center><strong>这么详细的总结，记得收藏备用哟</strong></center>
</blockquote>
<hr>
<center><strong><font size=5>💘今晚必须按时下班💘</font></strong></center>

<p><img src="https://img-blog.csdnimg.cn/88ecd48a2d45449099077a4516f36a9a.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Idea 下 Tomcat 乱码（淇℃伅璀﹀憡）问题</title>
    <url>/2022/04/12/idea-tomcat-encode-error/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>我们在配置好 Tomcat 服务后（<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjM2NDM5OTA=">详见此处<i class="fa fa-external-link-alt"></i></span>），总是会在控制台看到类似于这样的信息</p>
<p><img src="https://img-blog.csdnimg.cn/74a4e51f89a140b48c05a0025757d6fd.png"></p>
<p>显然，这是发生了乱码，虽然不影响正常的项目调试，但是看着非常的难受，下面让我们一招来解决这个问题</p>
<span id="more"></span>

<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>控制台输出信息</p>
<blockquote>
<p>12-Apr-2022 15:45:44.180 璀﹀憡 [main] org.apache.catalina.startup.SetAllPropertiesRule.begin [SetAllPropertiesRule]{Server&#x2F;Service&#x2F;Connector} Setting property ‘URLEncoding’ to ‘UTF-8’ did not find a matching property.<br>12-Apr-2022 15:45:44.213 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log Server.鏈嶅姟鍣ㄧ増鏈�: Apache Tomcat&#x2F;8.5.77<br>12-Apr-2022 15:45:44.213 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log 鏈嶅姟鍣ㄦ瀯寤�:        Mar 13 2022 19:13:33 UTC<br>12-Apr-2022 15:45:44.213 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log 鏈嶅姟鍣ㄧ増鏈彿:      8.5.77.0<br>12-Apr-2022 15:45:44.213 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log 鎿嶄綔绯荤粺鍚嶇О:      Windows 10<br>……</p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>找了很多的解决方案，但是日志文件和控制台信息只能解决一个，不能兼得，下面给出最佳方案</p>
<p><strong>1.打开 Tomcat 安装目录并找到 conf 文件夹</strong></p>
<p><img src="https://img-blog.csdnimg.cn/c40274fe57ff44b2baef1eafcc754b0f.png"></p>
<p><strong>2.用记事本打开 conf 文件夹下的 logging.properties 文件</strong></p>
<p><img src="https://img-blog.csdnimg.cn/7f159b2b7f9342d0a453a77cd887f3a4.png"></p>
<p><strong>3.将文件中所有的 UTF-8 修改为 GBK 并保存</strong></p>
<p><img src="https://img-blog.csdnimg.cn/6c17ed5ee3c2467e88f6a747502967ac.png"></p>
<h1 id="操作验证"><a href="#操作验证" class="headerlink" title="操作验证"></a>操作验证</h1><p>重启 Idea 再次调试，查看控制台信息</p>
<p><img src="https://img-blog.csdnimg.cn/ee2b7598efb543d882c559fbb1b3ad7e.png"></p>
<p>乱码情况已解决</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea Ultimate 连接 MySQL 数据库</title>
    <url>/2021/12/08/idea-ultimate-connect-mysql/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始链接前，请确保本机上安装的 idea 是 Ultimate 专业版，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9pZGVhL2Rvd25sb2FkLyNzZWN0aW9uPXdpbmRvd3M=">点我下载<i class="fa fa-external-link-alt"></i></span>，JetBrains 旗下 Community 社区版本并未集成数据库开发工具，这一点我们从官网两个版本的下载介绍上也能看到</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/90999657caf84e5a980dbc08d4dd6ec7.png"></p>
<h1 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一般来说，安装V5左右的版本就足够，版本号越大占用后台资源会更多，我们根据实际开发需求，选择合适的就好，这里演示 5.7 版本的安装过程（其他版本基本一致，按钮位置可能有所不同）</p>
<p>进入<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9pbnN0YWxsZXIv">官方网站<i class="fa fa-external-link-alt"></i></span>后，点击 Looking for previous GA versions 切换到早期版本</p>
<p><img src="https://img-blog.csdnimg.cn/e108c33c8acf4af1acb35569bfb5ff66.png"></p>
<p>在线安装就看你的网速质量了，第二个是完整安装文件，直接下载就好（如果需要验证，登陆 Oracle 账号校验即可）</p>
<p><img src="https://img-blog.csdnimg.cn/e9f3349c85744e848847c253d3abe751.png"></p>
<p>详细的安装教程<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODg0MTY2MDc=">请看这里<i class="fa fa-external-link-alt"></i></span>，这里主要讲下配置过程</p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><div class="note info"><p>右键【此电脑】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】</p>
</div>

<p>添加<mark class="label ">MYSQL_HOME</mark>变量，变量值为电脑 MySQL 的安装位置</p>
<p><img src="https://img-blog.csdnimg.cn/1f70e66fd28e4e51b486021b1190eef7.png"></p>
<p>添加 Path 系统变量</p>
<p><img src="https://img-blog.csdnimg.cn/e4bea0bc3dde48a3a0d07b07c5526a1e.png"></p>
<h2 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h2><a class="btn" href="#">Windows</a>+<a class="btn" href="#">R</a> 打开命令行，键入 <mark class="label ">cmd</mark> 打开命令行，输入

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my sql -uroot -p //root表示用户名，-p表示输入用户密码</span><br></pre></td></tr></table></figure>
<p>输入安装 MySQL 时的账户密码，出现图示信息则配置正确</p>
<p><img src="https://img-blog.csdnimg.cn/f09c0f1c0da44c2592c9759dbba45fb5.png"></p>
<h1 id="MysQL服务状态"><a href="#MysQL服务状态" class="headerlink" title="MysQL服务状态"></a>MysQL服务状态</h1><p>以<mark class="label ">管理员身份</mark>打开命令行，分别输入以下命令</p>
<h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql    //开启服务</span><br></pre></td></tr></table></figure>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql  //关闭服务</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/4e33172853414cbf824ebd9e67bdc08f.png"></p>
<h1 id="在idea-Ultimate中建立连接"><a href="#在idea-Ultimate中建立连接" class="headerlink" title="在idea Ultimate中建立连接"></a>在idea Ultimate中建立连接</h1><h2 id="引入-Drivers-驱动"><a href="#引入-Drivers-驱动" class="headerlink" title="引入 Drivers 驱动"></a>引入 Drivers 驱动</h2><p>建立项目后，添加 MysQL数据源</p>
<p><img src="https://img-blog.csdnimg.cn/0a2d856ba370412b99c25dc771a7c2ab.png"></p>
<p>找到驱动路径</p>
<p><img src="https://img-blog.csdnimg.cn/2ff951992f364082a794f4e611b1b0eb.png"></p>
<p>引入外部库中</p>
<p><img src="https://img-blog.csdnimg.cn/f99953fac0c64d318181847251dfcaa1.png"></p>
<p>成功后，项目结构中也会显示</p>
<p><img src="https://img-blog.csdnimg.cn/9959bcf45fb04a4f9802514530150cad.png"></p>
<h2 id="添加表"><a href="#添加表" class="headerlink" title="添加表"></a>添加表</h2><h3 id="创建-schema-架构"><a href="#创建-schema-架构" class="headerlink" title="创建 schema 架构"></a>创建 schema 架构</h3><p><img src="https://img-blog.csdnimg.cn/18cace6a270741588183484b882d4735.png"></p>
<p><img src="https://img-blog.csdnimg.cn/1f566f2e3e464ae6bf95d504a60e3885.png"></p>
<h3 id="创建-Table-表"><a href="#创建-Table-表" class="headerlink" title="创建 Table 表"></a>创建 Table 表</h3><p><img src="https://img-blog.csdnimg.cn/234df321fdec4b4fa898d805856ce3e6.png"></p>
<p>添加属性</p>
<p><img src="https://img-blog.csdnimg.cn/7ebd2bdaf4f348a589b92fc8ad61b355.png"></p>
<h2 id="写入数据信息"><a href="#写入数据信息" class="headerlink" title="写入数据信息"></a>写入数据信息</h2><p>方式1：可视化，图形界面操作</p>
<p><img src="https://img-blog.csdnimg.cn/f8244f091ec945bdbdfa0aaea1243897.png"></p>
<p>方式2：sql 语句添加</p>
<p><img src="https://img-blog.csdnimg.cn/a288d0e71dc04bba8e40805ae113e258.png"></p>
<p>执行结果</p>
<p><img src="https://img-blog.csdnimg.cn/bab61d00a26a447abc8e48f99d6094c3.png"></p>
<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>请根据注释位置，修改配置信息后再 Execute 执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// MySQL 8.0 以下版本 - JDBC 驱动名称及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/your schema&quot;</span>; <span class="comment">// ‘/’后写入你的架构名称</span></span><br><span class="line">    <span class="comment">// 数据库的用户名与密码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;your sql account&quot;</span>; <span class="comment">//你的数据库“用户名”</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;your sql password&quot;</span>;<span class="comment">//你的数据库密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开链接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据库建立链接中...&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在实例化Statement对象...&quot;</span>);</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">&quot;SELECT * FROM information&quot;</span>;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">                System.out.print(<span class="string">&quot;, 姓名: &quot;</span> + name);</span><br><span class="line">                System.out.print(<span class="string">&quot;, 年龄: &quot;</span> + age);</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 操作完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) stmt.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">            &#125;<span class="comment">// 不进行任何操作</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="literal">null</span>) conn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库链接释放!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类执行结果</p>
<p><img src="https://img-blog.csdnimg.cn/816f8113ae29458d95c980ee532dec57.png"></p>
<hr>
<p>参考资料：</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODg0MTY2MDc=">MySQL的详细安装教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGFuZGFseS9wLzExNzM4Nzg5Lmh0bWwjOn46dGV4dD1NeXNxbCVFNSU5MCVBRiVFNSU4QSVBOCVFNSU5MCU4RSVFNSU4MSU5QyVFNiVBRCVBMiVFNyU5QSU4NCVFOCVBNyVBMyVFNSU4NiVCMyVFNiU5NiVCOSVFNiVCMyU5NSUyMCVFNSVBRSU4OSVFOCVBMyU4NW15c3FsJUU1JTkwJThFJUVGJUJDJThDJUU2JTlDJThEJUU1JThBJUExJUU2JTk3JUEwJUU2JUIzJTk1JUU2JUFEJUEzJUU1JUI4JUI4JUU1JTkwJUFGJUU1JThBJUE4JUVGJUJDJThDJUU2JThBJUE1JUU5JTk0JTk5JUU1JUE2JTgyJUU0JUI4JThCJUVGJUJDJTlBJTIwJUU4JUE3JUEzJUU2JUIzJTk1JUU2JTk2JUI5JUU2JUIzJTk1JUVGJUJDJTlBJTIwMSUyMCVFNCVCQiVBNSVFNyVBRSVBMSVFNyU5MCU4NiVFNSU5MSU5OCVFOCVCQSVBQiVFNCVCQiVCRCVFOCVCRiU5MCVFOCVBMSU4QyVFNSU5MSVCRCVFNCVCQiVBNCVFNiU4RiU5MCVFNyVBNCVCQSVFNyVBQyVBNiUyMDIlMjAlRTclOTQlQTglRTUlOTElQkQlRTQlQkIlQTQlRTglQkYlOUIlRTglQTElOENteXNxbCVFNSVBRSU4OSVFOCVBMyU4NSVFNyU5QiVBRSVFNSVCRCU5NSVFNyU5QSU4NGJpbiVFNyU5QiVBRSVFNSVCRCU5NSVFRiVCQyU5QSUyMGNkLCVFOCVCRiU5MCVFOCVBMSU4QyVFNSU4OCU5RCVFNSVBNyU4QiVFNSU4QyU5Nm15c3FsJUU2JTlDJThEJUU1JThBJUExJUU1JTkxJUJEJUU0JUJCJUE0JUVGJUJDJTlBJTIwMSUyMG15c3FsZCUyMC0taW5pdGlhbGl6ZS1pbnNlY3VyZSUyMC0tdXNlciUzRG15c3FsJTIwNiUyMCVFOCVCRiU5MCVFOCVBMSU4QyVFNiU5QiVCNCVFNiU5NiVCMCVFOSU4NSU4RCVFNyVCRCVBRSVFNiU5NiU4NyVFNCVCQiVCNiVFNSU5MSVCRCVFNCVCQiVBNCVFRiVCQyU5QSUyMDE=">Mysql启动后停止的解决方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoX251bS9hcnRpY2xlL2RldGFpbHMvNzE0MDI4MDE=">MySQL修改root密码的4种方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzM3MDA4OTY2OQ==">姓名 性别 密码等在mysql中都保存为什么类型<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL2FydGljbGUvNDUyMzQwNy5odG1s">通过IntelliJ IDEA软件实现Java项目连接MySQL的详细过程<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS15 beta 8 开发者预览版更新【附升级通道】</title>
    <url>/2021/06/08/ios15-beta-update/</url>
    <content><![CDATA[<h1 id="使用体验，BUG反馈"><a href="#使用体验，BUG反馈" class="headerlink" title="使用体验，BUG反馈"></a>使用体验，BUG反馈</h1><p><img src="https://img-blog.csdnimg.cn/027694457765427b8b3383e0da2a8778.png"></p>
<span id="more"></span>

<h1 id="更新部分"><a href="#更新部分" class="headerlink" title="更新部分"></a>更新部分</h1><div class="note info"><ol>
<li>闹钟回归机械样式（但无声音）；</li>
<li>相机可以快速识别文字内容（目前认为升级后最方     便的功能）；</li>
<li>Safari浏览器，UI更新，支持底部下滑切换页面，输入搜索内容更加便捷；</li>
<li>FaceTime噪声单独处理，支持分享屏幕内容（自认为国内很少人使用，不过第三方常用软件如果可以增加这个功能的话还是很不错的）；</li>
<li>地图app新增四种模式，可根据不同使用场景按需切换；</li>
<li>非常便捷的备忘录，在“新建备忘录”空白出长按屏幕，选择“来自相机的文本”即可实现实时录入文本内容，识别正确率还是很高的；</li>
<li>图标类变化，“天气app”图标镜像显示。“相机app”删除了快门按钮（很微小，不说基本看不出来，但显然也没什么实质性作用）；</li>
<li>支持“跨屏拖拽”，比如聊天界面中的消息，长按不松手，同时上滑导航条，选中要粘贴的位置即可直接粘贴（虽然不跨屏也能实现 ）；</li>
<li>“照片app”上滑可以查看图片详情和具体位置，可以详细看到镜头信息；</li>
</ol>
</div>

<h1 id="iOS-15-beta3更新"><a href="#iOS-15-beta3更新" class="headerlink" title="iOS 15 beta3更新"></a>iOS 15 beta3更新</h1><image src="https://img-blog.csdnimg.cn/d50bb65ca8234acf95959d9b7fb5d3df.png" width="42%">

<div class="note info"><ol>
<li>在iOS15第二个测试版基础上，最大的改进便是对Apple自家浏览器Safari进行了功能上的改进以及界面的设计：在iOS 15 beta2中，Apple对Safari浏览器标签栏的位置进行改动，调整到屏幕下方，但存在输入内容时，标签栏又会回到屏幕上方，在beta3中实现了标签栏始终在在屏幕下方。除此之外，搜索界面更是能展示出搜索内容的分类、搜索结果、收藏夹中的内容。并隐含了“长按网页底部地址的输入栏，二级菜单中显示‘Reload’；</li>
<li>对iPhone恢复出厂设置的改动：进入 设置-通用-，原有的还原界面更新为：Transfer or Reset iPhone（汉化问题，国行目前显示英文） 对将旧iPhone的数据迁移到新设备上的用户非常方便；</li>
<li>在iOS15中，Apple引入了”专注“模式，在beta3中”专注状态“以及”电话“的位置，被分配到了专注模块中去，更适合不同的场景使用；</li>
<li>AppStore中，第一次进入会对用户展示新版系统中的新增功能；</li>
<li>Apple Music音乐小组件可以跟随不同的音乐显示不同的背景颜色，和传统的固定颜色红色差异明显；</li>
</ol>
</div>

<h1 id="iOS-15-beta4更新"><a href="#iOS-15-beta4更新" class="headerlink" title="iOS 15 beta4更新"></a>iOS 15 beta4更新</h1><p><img src="https://img-blog.csdnimg.cn/a12956d34e8641cbbd21ba915730c1c2.png"></p>
<div class="note info"><ol>
<li>支持MagSafe外接电池；</li>
<li>设置中通知、备忘录的图标修改；</li>
<li>Safari浏览器底部Reload按钮更换为底部直接加入了刷新按钮，浏览网页更加方便；</li>
</ol>
</div>

<h1 id="iOS-15-beta5更新"><a href="#iOS-15-beta5更新" class="headerlink" title="iOS 15 beta5更新"></a>iOS 15 beta5更新</h1><p>天气APP图标更新</p>
<img src="https://img-blog.csdnimg.cn/338242b098c14a599db0bbfc1eabebcb.png" width="60%">

<p>锁屏界面 “相机” 图标更新</p>
<img src="https://img-blog.csdnimg.cn/9545cbc6b0d243cd905f2693ccf6b96a.png" width="60%">

<p>控制中心 “声音识别” 图标更新</p>
<img src="https://img-blog.csdnimg.cn/3f6442eb29d747789926f131ae947b79.png" width="60%">

<p>iPhone关机信息提示：iPhone关机后仍可被找到，可以临时禁用该功能</p>
<img src="https://img-blog.csdnimg.cn/33342a493971423fa3a290481a7bafab.png" width="50%">

<p>Apple在照片、地图、提醒事项等应用中添加了介绍提示，展示新功能</p>
<h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><div class="note danger"><ol>
<li>软件打开闪退（eg:墨xx，a游…)；</li>
<li>第三方音乐app在切换视图时，音频断断续续；</li>
<li>（此条非BUG，纯个人体验）键盘更新mac样式选字后，中文状态下输入英文，不太顺滑，需要切换英文&#x2F;&#x2F;同之前，稍稍有些麻烦；</li>
<li>部分系统弹窗汉化不全面；</li>
<li>天气app，显示全部城市时勿过渡动画，略显突兀；</li>
<li>微X app显示浮窗时，联系人头像会被“切成”16宫格，卡顿；</li>
<li>不知是否应归为“BUG”，升级前电池效率93%，更新IOS15后第一天94%，第二天95%（目前停留位置）；</li>
<li>X信app公众号短视频无法播放，兼容性欠佳；</li>
<li>目前右上角下滑出现的”控制中心”中,关于”音乐app”的”正在播放”歌曲,显示不准确,使用国内常用音乐软件播放歌曲,仍默认显示AppleMusic资源库中的歌曲,且无法改动,显示有误;</li>
<li>空气质量显示地图无法刷新界面;</li>
</ol>
</div>

<h1 id="升级通道"><a href="#升级通道" class="headerlink" title="升级通道"></a>升级通道</h1><div class="note info"><p>点击下方链接（来源于网络），在自带的Safari浏览器中打开，选择“允许”，下载描述文件。根据提示完成安装，重启设备后在设置中检查更新就可以看到更新推送啦！<br><span class="exturl" data-url="aHR0cHM6Ly9kLXVwZGF0ZXIuaTQuY24vd2ViL21vYmlsZWNvbmZpZy9pT1NfMTVfRFBfQmV0YV9Qcm9maWxlLm1vYmlsZWNvbmZpZw==">升级通道<i class="fa fa-external-link-alt"></i></span></p>
</div>

<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><div class="note info"><p>毕竟是第一个版本，还是会有一定风险的，升级前最好全备份，万一有问题也能回退<br>现在的测试版基本趋于稳定，表现良好，预计马上就会推出正式版，等不及的小伙伴们 beat 7 这个版本还是值得一试的(2021.8.27)</p>
</div>

<p>不定期更新，欢迎讨论！！！</p>
<hr>
<p>文章部分图片源于网络，侵删致歉</p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础 ——入坑必读</title>
    <url>/2021/08/04/java-basics/</url>
    <content><![CDATA[<h1 id="历史沿革"><a href="#历史沿革" class="headerlink" title="历史沿革"></a>历史沿革</h1><p>Java是印度尼西亚“爪哇岛”的英文名，因气候环境，地理位置等因素盛产咖啡而闻名。Java语言中的许多命名都与其有关：如<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9KYXZhQmVhbnMvNTE1NTYxMg==">JavaBeans<i class="fa fa-external-link-alt"></i></span>。所以Sun和Java的Logo是个非常形象的图标—冒热气儿的咖啡</p>
<p>早期的Java只是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TdW4lMjBNaWNyb3N5c3RlbXM=">Sun MicroSystems<i class="fa fa-external-link-alt"></i></span>公司在1990年12月开始研究的一个内部项目。Sun公司一位名为帕特里克·诺顿的工程师因为其公司难于操作的C++&#x2F;C语言编译器而决定改用<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9uZXh0LzE3MTk0OTY=">NeXT<i class="fa fa-external-link-alt"></i></span>，同时他也获得了研究公司的一个叫做“Stealth计划”的项目的机会</p>
<p>“Stealth计划”后来改名为“Green计划”，詹姆斯·高斯林和Mike Sheridan也加入了帕特里克的工作小组。根据有限资金，乔伊决定开发一种集C语言和Mesa语言大成的新语言，在一份报告上，乔伊把它叫做“未来”。他将要创造出一种全新的语言，被他命名为“Oak”，以办公室外的橡树命名</p>
<span id="more"></span>
<h1 id="Java-语言基础"><a href="#Java-语言基础" class="headerlink" title="Java 语言基础"></a>Java 语言基础</h1><h2 id="1-1-基本元素"><a href="#1-1-基本元素" class="headerlink" title="1.1 基本元素"></a>1.1 基本元素</h2><h3 id="1-1-1-标识符"><a href="#1-1-1-标识符" class="headerlink" title="1.1.1 标识符"></a>1.1.1 标识符</h3><p>（1）标识符包含类名、变量名、常量名、方法名…；</p>
<p>（2）命名规则：字母、下划线、美元符号开头，后可接此三种符号或0-9的数字，注意不要和关键字   重合；</p>
<p>（3）命名“约定”：变量名、方法名首单词小写，其余单词仅首字母大写。类名、接口名首字母大写</p>
<p>常量全都用大写字母、单词命名，下划线常用于常量名单词的分隔。Java严格区分字母大小写，例如aB和Ab是完全不同的合法标识符；</p>
<h3 id="1-1-2-关键字"><a href="#1-1-2-关键字" class="headerlink" title="1.1.2 关键字"></a>1.1.2 关键字</h3><image src="https://img-blog.csdnimg.cn/cd707ae0f1124001851f186e02f6afb1.png" width="90%">

<p>重点标记一些Java中特有的关键字：<br>（1)数据类型：<mark class="label ">boolean</mark>、byte、char、double、false、true、void、<mark class="label ">instanceof</mark>、float、int、long、new、<mark class="label ">null</mark>、short；</p>
<p>（2)语句：break、case、catch、continue、、return、<mark class="label ">super</mark>、switch、this、throw、try、while、default、do、else、<mark class="label ">finally</mark>、for、if；</p>
<p>（3)修饰：<mark class="label ">abstract</mark>、<mark class="label ">final</mark>、<mark class="label ">native</mark>、<mark class="label ">transient</mark>、volatile、private、protected、public、static、<mark class="label ">synchronized</mark>；</p>
<p>（4)方法、类、接口、包：<mark class="label ">interface</mark>、<mark class="label ">import</mark>、class、<mark class="label ">extends</mark>、 <mark class="label ">implements</mark>、<mark class="label ">package</mark>、throws；</p>
<h3 id="1-1-3-保留字"><a href="#1-1-3-保留字" class="headerlink" title="1.1.3 保留字"></a>1.1.3 保留字</h3><p>一些不能用做自定义标识符，但又有自己专门用途和意义的 “ 关键字 ” ；形象的来讲就是他们没有成为关键字的权利，但是有享受关键字的“待遇”，像是充值VIP一般，sizeof、goto、const，它们仨就是VIP中的成员。说不定随着语言的发展，慢慢它们也成为关键字了呢？</p>
<h3 id="1-1-4-分隔符"><a href="#1-1-4-分隔符" class="headerlink" title="1.1.4 分隔符"></a>1.1.4 分隔符</h3><p>像C&#x2F;C++中熟知的空白符（Tab、回车、空格、换行）、普通分隔符（点、分号、逗号……）、单行注释符 <code>// 注释内容</code> ，多行注释符 <code>/* 注释内容 */</code> 就不再详细展开来讲，这里我们主要了解Java中一些不一样的东西—Java文档注释格式，它的格式是<code>/ * *注释内容 * /</code></p>
<p>注意：这类注释只应用在声明之前，最为方便的是它可以利用<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9qZGsvMTAxMT9mcj1hbGFkZGlu">JDK<i class="fa fa-external-link-alt"></i></span>中提供的 javadoc 工具，根据注释内容自动生成HTML代码说明文档</p>
<h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>那么，何为数据类型或者说数据类型能说明什么呢?它存在的意义就是：表明变量、常量、表达式的性质。在进行运算时，只有符合“相同数据类型”这一条件，才可以继续进行。按照大类区分，Java中有简单、引用两种数据类型。分类如图所示</p>
<image src="https://img-blog.csdnimg.cn/e7d86e6e8cbb44468cfa424287fab354.PNG" width="50%">

<h3 id="1-2-1-基本数据类型"><a href="#1-2-1-基本数据类型" class="headerlink" title="1.2.1 基本数据类型"></a>1.2.1 基本数据类型</h3><p>在使用计算机进行运算时，我们都知道不同的数据类型在其中表示的数值范围、所占内存大小都不相同，下表给出了Java基本数据类型的具体参数</p>
<image src="https://img-blog.csdnimg.cn/89d6b81fb52a480b841e72551bd72de7.png" width="80%">

<p>表中，我们仍能对这些数据类型进行划分，比如byte、short、int、long、float、double属于数值型数据，char、boolean属于非数值型数据。Java因其基本数据类型拥有固定长度的特性，而促成了其基本数据类型优良的跨平台移植属性，数值类型的数据都与系统无关</p>
<h3 id="1-2-2-变量"><a href="#1-2-2-变量" class="headerlink" title="1.2.2 变量"></a>1.2.2 变量</h3><p>变量是程序中存储单元的标识符，它代表内存中的一块空间。在Java中，变量还具有类型、名称、值、作用域等属性</p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>遵循命名规则：</p>
<p>（1）长度不限，但系统仅承载前32个字符，变量名必须以小写字母开头，且首字符不能为数字；</p>
<p>（2）在同一作用域内，变量名必唯一且区分大小写；</p>
<p>（3）不能是关键字，布尔值或保留字（null)；</p>
<p>（4）若多个单词构成变量名，则单词需要连在一起写，且除第一个单词外，其余单词首字母需大写；</p>
<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>两种声明格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">int</span> a,b,c;</span><br><span class="line"> <span class="type">float</span> b1,i1;</span><br><span class="line"> <span class="type">double</span> c,c1=<span class="number">2d</span>;  <span class="comment">//声明变量同时初始化</span></span><br><span class="line">（<span class="number">1</span>）类型  变量名［变量名<span class="number">1</span>,···变量名n];</span><br><span class="line">（<span class="number">2</span>）类型  变量名［变量名<span class="number">1</span>,···交量名n]=初值，···;</span><br></pre></td></tr></table></figure>

<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>变量声明后，使用赋值语句进行初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">varName1 = [ varName2 = ] 表达式 ;</span><br><span class="line"><span class="type">int</span> Var1,var2;</span><br><span class="line">var1=var2=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>允许同时给多个变量赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类型 varName1 = 表达式<span class="number">1</span> [ , varName2 = 表达式<span class="number">2</span> ] ;</span><br><span class="line"><span class="type">float</span> Var1=<span class="number">2.3f</span>,Var2=<span class="number">3.2f</span>;</span><br></pre></td></tr></table></figure>

<p>变量在声明的同时进行初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类型 变量名=表达式;</span><br><span class="line"><span class="type">double</span> variable=<span class="number">600d</span>;</span><br></pre></td></tr></table></figure>

<p>注意：除可以进行自动类型转换的数据外，变量的赋值需要“＝”号两边的数据类型一致</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>变量要先定义后使用，变量定义所在的位置决定了变量的作用域，根据变量定义所处位置，其作用域可以分为：局部变量、类成员变量、方法参数变量、异常处理参数变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span> charVar=<span class="string">&#x27;\t&#x27;</span>; <span class="comment">//  类成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> floatVar=<span class="number">3.1415926f</span>; <span class="comment">//定义单精度浮点型常量floatVar       类成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String stringVar=<span class="string">&quot;Java&quot;</span>;   <span class="comment">//在该语句块中有效       </span></span><br><span class="line">        System.out.println(<span class="string">&quot;类中定义:floatVar=&quot;</span>+floatVar+charVar+<span class="string">&quot;stringVar=&quot;</span>+stringVar);</span><br><span class="line">        System.out.println();  <span class="comment">//光标换行</span></span><br><span class="line">        show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        String stringVar=<span class="string">&quot;Test&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;类中定义:floatVar=&quot;</span>+floatVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法中定义:stringVar=&quot;</span>+stringVar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>当数值在不同的数据类型之间进行运算时，需要转换为统一类型来进行，不同数据类型之间有对应的转换规则。可以分为 “ 自动类型转换 ” 和 “ 强制类型转换 ” 两种</p>
<p>自动类型转换也称 “ 隐式类型转换 ” ，即编码是不需要程序员操作，系统会自动进行类型转换，一般遵循低精度可以自动转换到高精度的规则</p>
<p>但是，如果数据由高精度转换成低精度呢？那么我们就需要进行强制类型转换<br>强制转换的格式为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（数据类型）表达式 ;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">byte</span> c=<span class="type">byte</span>(i); <span class="comment">//int型数据a强制转换为byte型</span></span><br></pre></td></tr></table></figure>

<p>注意：根据变量所占位长的不同，在强制类型转换中可能发生数据丢失的现象，使用需谨慎。下面展示强制转换后数据丢失的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeConversion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> intVar=<span class="number">0xff56</span>;</span><br><span class="line">        <span class="type">byte</span> byteVar=(<span class="type">byte</span>)intVar;<span class="comment">//数据强制类型转换 32位整数强制转换为8为字节数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;intVar=&quot;</span>+Integer.toString(intVar,<span class="number">2</span>)+<span class="string">&quot;;&quot;</span>+intVar); <span class="comment">//转换为二进制,int型数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;byteVar=&quot;</span>+Integer.toString(byteVar,<span class="number">2</span>)+<span class="string">&quot;;&quot;</span>+byteVar);<span class="comment">//转换为二进制,字节型数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;      <span class="comment">//整型数据int有32位,而byte字节型数据只有8位,类型转换后数据丢失</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-常量"><a href="#1-2-3-常量" class="headerlink" title="1.2.3 常量"></a>1.2.3 常量</h3><p>常量是在程序中直接给出的一系类符号串，它的作用是为变量赋值或参与表达式的运算。可以是一个具体的数值或字符串。常量在程序执行过程中不可更改</p>
<p>常量标识符命名全部由大写字母组成，多个单词之间使用下划线进行连接，eg:Largest_Integer</p>
<h4 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h4><p>可以使计算机表示某个整数值，十进制、十六进制和八进制类型数据。八进制常量以 0 开头，后接 0 - 7 之间的数字（这里常常会设置一些考题，比如问：089 是什么数？千万别傻傻的写八进制数了，它是非法数）。十六进制常量以0x开头后跟多个 0 - 9之间的数字或 a - f （ A - F ）之间的字母</p>
<p>byte、short、int、long这四种类型是较为特殊的数据类型。byte 和 short类型主要应用于底层文件处理或在存储空间极其宝贵、又需要保存大型数组的特殊情况。long类型可表示数值较大的整数。int类型是最常用的，默认32位，若需要表示64位的long类型常量则在数字后加上大写字母 L 来区分</p>
<h4 id="实型常量"><a href="#实型常量" class="headerlink" title="实型常量"></a>实型常量</h4><p>两种表示形式：</p>
<p>（1）十进制数：由数字和小数点构成，且必须包含小数点；由于实数表示精度不同（单精度、双精度）。Java中默认实型常量为计算机中占64位的double类型，单精度数后面要加“f”或<br>“F”。双精度、多精度数后加“d”或“D”</p>
<p>（2）科学计数法：适用于数据过大或过小的情况，字母e或E前必须含有数字，后面的指数只能为整型数据</p>
<h4 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h4><p>布尔型常量只有true和false两个值，分别表示真、假两种状态。它们不对应于任何整数值，仅用作逻辑条件的判断。我们在编码时直接使用 true和false 这两个单词，不要加引号。并且注意和C &#x2F; C++语言不同的地方是，布尔型在Java中用关键字 boolean 单词全称，C&#x2F;C++中用 bool 表示布尔型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> i; <span class="comment">//建立布尔类型变量i</span></span><br><span class="line">i=<span class="literal">false</span>;</span><br><span class="line">i=<span class="literal">true</span>; <span class="comment">//变量i的两种状态</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>字符串常量是用一对双引号括起来的一串字符。它和字符串常量在字符串仅有一个字符的情况下容易混淆：字符串常量包含转义字符 ‘\0’，其实是有两个字符。而字符常量就不一样了，无论字符串含有多少个字符，都是只占一个字符的空间大小</p>
<h4 id="字符常量和null常量"><a href="#字符常量和null常量" class="headerlink" title="字符常量和null常量"></a>字符常量和null常量</h4><p>字符常量就是单个ASCII字符用单引号括起来的形式。eg：’a’、’c’。null常量只有一个值，用null表示，表示对象的引用为空</p>
<h2 id="1-3-运算符与表达式"><a href="#1-3-运算符与表达式" class="headerlink" title="1.3 运算符与表达式"></a>1.3 运算符与表达式</h2><p>在这个部分呢，来谈谈我的感受以及重点的部分，如果你是一名学生，不论是不是主修计算机专业，相信大部分的学校都会开设《C语言》这门课程（顺便问一问，学的怎么样啊？？），课程中的运算符与表达式章节和Java中的类型不能说的上一致，那简直就是完全一样呐</p>
<p>其实和上述内容一样，这些都是属于入门级别的内容。相信我，如果你学过甚至学会了《C语言》这门课程，Java中的这个章节完全可以略过（我是看完感觉没有什么不一样的地方，如有纰漏，实属小的太菜，还望各路大佬告知）</p>
<p>最有用的莫过于运算符的优先级了，这又让我想起了那些“变态”的题目：好多表达式 “ 掺和 ” 在一起，加上各种运算符连接，问你计算结果。仅仅一分的分值不说，最令人头大的是优先级分的也忒明显了，弄一会儿就绕进去了，反正我是很少做对（本人不才）。后来就死记硬背了一些重点的运算符优先级顺序才缓解了这样的窘境</p>
<p>附上一张我背记的表格（图片分页，还望xdm海涵）：</p>
<image src="https://img-blog.csdnimg.cn/17f19b18ad264351a4f7ff98450272ad.png" width="70%">

<h3 id="1-3-1-算术运算符"><a href="#1-3-1-算术运算符" class="headerlink" title="1.3.1 算术运算符"></a>1.3.1 算术运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArithmeticOP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">1859</span>,m;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        d=n/<span class="number">1000</span>;</span><br><span class="line">        c=n/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">        b=n/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">        a=n%<span class="number">10</span>;</span><br><span class="line">        m=a*<span class="number">1000</span>+b*<span class="number">100</span>+c*<span class="number">10</span>+d;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数据:n=&quot;</span>+n);</span><br><span class="line">        System.out.println(<span class="string">&quot;逆序数据:m=&quot;</span>+m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-2-逻辑运算符"><a href="#1-3-2-逻辑运算符" class="headerlink" title="1.3.2 逻辑运算符"></a>1.3.2 逻辑运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLogicOP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> b1,b2=<span class="literal">true</span>,b3,b4;</span><br><span class="line">        b1=!b2;</span><br><span class="line">        System.out.println(<span class="string">&quot;逻辑值:b1=&quot;</span>+b1+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;b2=&quot;</span>+b2+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;b1&amp;b2=&quot;</span>+(b1&amp;b2));</span><br><span class="line">        <span class="type">int</span> x=<span class="number">2</span>,y=<span class="number">7</span>;</span><br><span class="line">        b3=x&gt;y&amp;&amp;x++==y--; <span class="comment">//逻辑短路问题 x和y的值并未发生改变</span></span><br><span class="line">        System.out.println(<span class="string">&quot;逻辑值:b3=&quot;</span>+b3+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;y=&quot;</span>+y);  </span><br><span class="line">        x=<span class="number">2</span>;</span><br><span class="line">        y=<span class="number">7</span>;</span><br><span class="line">        b4=x&gt;y&amp;x++==y--;</span><br><span class="line">        System.out.println(<span class="string">&quot;逻辑值:b4=&quot;</span>+<span class="string">&quot;;&quot;</span>+b4+<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑与预算符 &amp;&amp; 逻辑或运算符 ||     条件与或  都会发生逻辑短路现象(仅查看一端操作数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp; 与  | 或 布尔逻辑与或运算符  两端操作数都看</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-3-条件运算符"><a href="#1-3-3-条件运算符" class="headerlink" title="1.3.3 条件运算符"></a>1.3.3 条件运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindMaxMin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">double</span> d1=<span class="number">1.1</span>,d2=-<span class="number">9.9</span>,d3=<span class="number">96.9</span>;</span><br><span class="line">        <span class="type">double</span> temp,max,min;</span><br><span class="line">        <span class="comment">//Max</span></span><br><span class="line">        temp=d1&gt;d2?d1:d2;</span><br><span class="line">        max=temp&gt;d3?temp:d3;</span><br><span class="line">        <span class="comment">//Min</span></span><br><span class="line">        temp=d1&lt;d2?d1:d2;</span><br><span class="line">        min=temp&lt;d3?temp:d3;</span><br><span class="line">        System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">        System.out.println(<span class="string">&quot;min=&quot;</span>+min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   <span class="comment">//条件运算符(三目运算符) 使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本题也可以两个变量实现 Max和Min即可 同样使用三目运算符 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Max=d1&gt;d2?d1:d2;  Max=d3&gt;Max?d3:Max;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-4-位运算符"><a href="#1-3-4-位运算符" class="headerlink" title="1.3.4 位运算符"></a>1.3.4 位运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBitOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">byte</span> b1=<span class="number">125</span>,b2=<span class="number">38</span>;</span><br><span class="line">        <span class="type">int</span> i1,i2,i3;</span><br><span class="line">        i1=b1^b2;</span><br><span class="line">        System.out.println(<span class="string">&quot;b1=&quot;</span>+Integer.toString(b1,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;b2=&quot;</span>+Integer.toString(b2,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;异或&quot;</span>+Integer.toString(i1,<span class="number">2</span>));</span><br><span class="line">        i1=i1^b2;</span><br><span class="line">        System.out.println(<span class="string">&quot;(b1^b2)^b2=&quot;</span>+Integer.toString(i1,<span class="number">2</span>));</span><br><span class="line">        i2=b1&gt;&gt;<span class="number">2</span>;</span><br><span class="line">        i3=b1&lt;&lt;<span class="number">2</span>;</span><br><span class="line">        System.out.println(b1+<span class="string">&quot;右移两位等价与除4:&quot;</span>+i2);</span><br><span class="line">        System.out.println(b1+<span class="string">&quot;左移两位等价与乘4:&quot;</span>+i3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑类型运算符区别 &amp; | ^ 根据其两端操作数不同承担不同的功能,当操作数为数值类型时,作为&quot;位运算符&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当操作数为布尔类型时做逻辑运算符 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;&gt; 不同于 &gt;&gt;&gt;  前者移位时不包括符号位,后者移位连同符号位一并移位(负数操作完可能会影响其符号)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ^ 异或 整型数据时,操作为双行列举 规则&quot;相同为0,不同为1&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-5-赋值运算符"><a href="#1-3-5-赋值运算符" class="headerlink" title="1.3.5 赋值运算符"></a>1.3.5 赋值运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exchange</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">7</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;\tb=&quot;</span>+b);</span><br><span class="line">        a+=b; </span><br><span class="line">        b-=a; </span><br><span class="line">        a-=b; </span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;\tb=&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java中允许连续赋值 z=x=y=2;  在Java中是允许的</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-6-表达式类型提升"><a href="#1-3-6-表达式类型提升" class="headerlink" title="1.3.6 表达式类型提升"></a>1.3.6 表达式类型提升</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现一个三位数各位数字相加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">123</span>,a,b,c,Sum;</span><br><span class="line">        a=n%<span class="number">10</span>;  <span class="comment">//依次 个 十 百位数字分离</span></span><br><span class="line">        b=(n%<span class="number">100</span>)/<span class="number">10</span>;  <span class="comment">//  /的优先级高于%,故加()</span></span><br><span class="line">        c=n/<span class="number">100</span>;</span><br><span class="line">        Sum=a+b+c;</span><br><span class="line">        System.out.println(<span class="string">&quot;AllSum(&quot;</span>+n+<span class="string">&quot;)=&quot;</span>+Sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于计算顺序无法确定时,使用()进行区分层级</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求圆的面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle_area</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> PI=<span class="number">3.14f</span>; <span class="comment">//常量</span></span><br><span class="line">        <span class="type">float</span> r=<span class="number">2.5f</span>,area;</span><br><span class="line">        area=PI*r*r;</span><br><span class="line">        System.out.println(<span class="string">&quot;Area(&quot;</span>+r+<span class="string">&quot;)=&quot;</span>+area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-4-语句及其控制结构"><a href="#1-4-语句及其控制结构" class="headerlink" title="1.4 语句及其控制结构"></a>1.4 语句及其控制结构</h2><h3 id="1-4-1-Java语句"><a href="#1-4-1-Java语句" class="headerlink" title="1.4.1 Java语句"></a>1.4.1 Java语句</h3><p>Java中，程序实现各种各样功能的的原理是：使用类构建程序框架，使用方法实现类的功能，在方法中通过不同的语句结构控制程序流程实现，语句部分主要用例子来描述其使用方法</p>
<p>语句是指程序中的一个完整的执行单元，用于对数据进行加工处理、实现复杂功能。它是Java标识符的集合，由关键字、常量、变量、表达式共同组成。可分为说明性语句和操作性语句两种类型：</p>
<p>（1）说明性语句用来说明包和类的引入、类的声明、变量的声明；</p>
<p>（2）操作性语句包含表达式语句、复合语句、选择语句等；</p>
<h4 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h4><p>表达式后接一个分号构成表达式语句，例如：赋值语句、自加自减语句以及方法调用语句等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">double variable=100 ; //赋值</span><br><span class="line">variable ++ ; //自增</span><br><span class="line">System.out.println(<span class="string">&quot;Welcome to Java&quot;</span>);//方法调用</span><br></pre></td></tr></table></figure>
<h4 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h4><p>复合语句又称块（block）语句，由大括号 “｛｝” 括起来的部分称为语句块。执行复合语句时，实际上是执行该复合语句中所有语句。从语法上讲，无论大括号内有多少语句，都只被看成一条简单语句，多用于选择语句和循环语句中</p>
<h3 id="1-4-2-选择语句"><a href="#1-4-2-选择语句" class="headerlink" title="1.4.2 选择语句"></a>1.4.2 选择语句</h3><h4 id="if···else语句"><a href="#if···else语句" class="headerlink" title="if···else语句"></a>if···else语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> condition=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(condition)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success execute!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);    <span class="comment">//此后包含一个换行符</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Waring&quot;</span>);              <span class="comment">//方法调用语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求:使用switch语句将week转换成对应英文字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;!Please Enter numbers in 0-6,it will transfer to corresponding Week!&quot;</span>);</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> week=input.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; System.out.println(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> -&gt; System.out.println(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> -&gt; System.out.println(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;Data error!!!&quot;</span>);</span><br><span class="line">        &#125;        <span class="comment">//Java中增强Switch语句</span></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化目的:实现提示用户数据输入,输出对应日期效果</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-循环语句"><a href="#1-4-3-循环语句" class="headerlink" title="1.4.3 循环语句"></a>1.4.3 循环语句</h3><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出个、十、百、千位数字的四次方的和等于该数本身的所有四位数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        System.out.println(<span class="string">&quot;The Data That Meets The Conditions:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">1000</span>;n&lt;<span class="number">10000</span>;n++)&#123;</span><br><span class="line">            a=n/<span class="number">1000</span>;<span class="comment">//千位数字</span></span><br><span class="line">            b=n/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            c=n/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">            d=n%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(Math.pow(a,<span class="number">4</span>)+Math.pow(b,<span class="number">4</span>)+Math.pow(c,<span class="number">4</span>)+Math.pow(d,<span class="number">4</span>)==n)&#123; <span class="comment">//条件判断  Java中的次方写法</span></span><br><span class="line">                System.out.println(n);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定式套用 顺次剥离各位数字（由高位到低位）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a=n/1000;千位数字  b=n/100%10;  c=n/10%10;  d=n%10;</span></span><br></pre></td></tr></table></figure>
<h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求解 x=5时； x+x^2/2!+...+x^n/n!的值 要求x^n/n!的值&lt;1.0 X 10^-8</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>,d=<span class="number">1.0</span>;<span class="comment">//因为有除法，故用小数 因为值&lt;1.0 X 10^-8 所以d=1.0初值</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(d&gt;<span class="number">1.e-8</span>)&#123; <span class="comment">//注意计数法书写格式</span></span><br><span class="line">        d*=x;</span><br><span class="line">        d/=n;</span><br><span class="line">        sum+=d;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;Sum=&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可使用do-while实现</span></span><br></pre></td></tr></table></figure>
<h4 id="beak语句"><a href="#beak语句" class="headerlink" title="beak语句"></a>beak语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.* ; <span class="comment">//命令编译器载入java_installation/java/io路径下的所有类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入一个正整数,显示所有&lt;=该数的所有素数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String str;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter an integer, and press Enter to find all prime numbers less &quot;</span> +</span><br><span class="line">                <span class="string">&quot;than or equal to the integer:&quot;</span>);</span><br><span class="line">        str = buf.readLine();</span><br><span class="line">        k = Integer.parseInt(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;2 to&quot;</span> + <span class="string">&quot; &quot;</span>+ k +<span class="string">&quot; &quot;</span>+<span class="string">&quot;all prime numbers between:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i))</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span> &#123;    <span class="comment">//方法实现</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>; k &lt;= n / <span class="number">2</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % k == <span class="number">0</span>)&#123;</span><br><span class="line">                b = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java中，如果给出一个完整的限定名(包名、类名），Java编译器就能快速定位到源代码/类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们在学习新知识的时候，不要总是抱有一步登天的想法，什么东西都想着要一下子掌握。这些看似细小的知识点很有可能会成为开发过程中你忽视的那一个。从每一个很小的例子开始，懵懂到知道，知道到理解，理解到上机，上机到掌握，逐步积累经验。相信自己，一定能学会，不要放弃。也正所谓 “ 不积跬步无以至千里，不积小流无以成江海 ”</p>
<p>Gitee&#x2F;GitHub 上我的练习仓库：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vQ29kZXItSmFzb24=">Gitee地址<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BEUEVORw==">GitHub地址<i class="fa fa-external-link-alt"></i></span>，供大家学习参考，希望有所收获。码字不易，后面将会更新Java面向对象部分，如果帮到了您可以收藏学习，不要吝啬您的赞哦，您的支持将是我不断前行的动力！！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境配置及 Vscode 搭建</title>
    <url>/2021/07/18/java-developenv-vscode-config/</url>
    <content><![CDATA[<h1 id="JDK简介"><a href="#JDK简介" class="headerlink" title="JDK简介"></a>JDK简介</h1><p>JDK，全称 Java Development Kit，是整个 Java 的核心，包含 Java 运行环境、Java 工具以及 Java 基础类库。在 JDK 中，主要包括 Java 编译器、Java虚拟机、Java文档生成器、Java调试器等，包含以下几种常用组件</p>
<div class="note info"><ol>
<li>javac：编译器，将源程序转换成字节码；</li>
<li>jar：打包工具，将相关类文件打包为一个文件；</li>
<li>javadoc：文档生成器，从源码注释中提取文档；</li>
<li>jdb：debugger，检查错误、调试工具；</li>
<li>java：运行编译后的 java 程序(文件后缀.class)；</li>
<li>appletviewer：小程序浏览器，用于执行 HTML 文件上的 Java 小程序；</li>
<li>Javah：产生可以调用 Java 过程的 C 程序，或建立能被 Java 程序调用的 C 过程头文件；</li>
<li>Javap：Java 反编译器，显示编译类文件中的可访问功能及数据，并显示字节码含义；</li>
<li>Jconsole：Java 进行系统调试和监控的工具；</li>
</ol>
</div>

<span id="more"></span>

<h1 id="Java开发环境配置"><a href="#Java开发环境配置" class="headerlink" title="Java开发环境配置"></a>Java开发环境配置</h1><p>环境配置之前，首先使用cmd命令查看机器是否配置过 Java 环境，测试命令为（ java &#x2F; javac &#x2F; java<mark class="label "></mark>-version）</p>
<image src="https://img-blog.csdnimg.cn/20210718130023419.png" width="80%">

<p>若出现以上信息，说明已经配置好，无需重复操作！！！反之，进行下述操作</p>
<p>在电脑中安装JDK，<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UtamRrMTYtZG93bmxvYWRzLmh0bWw=">下载地址<i class="fa fa-external-link-alt"></i></span>，进入后下滑显示界面</p>
<image src="https://img-blog.csdnimg.cn/20210718125226799.png" width="80%">

<p>选择适合自己的版本进行下载，此处演示 Windows X64 Installer 下载。在Oracle官网下载涉及到账号注册，也可访问 <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXlJcHl4TGZJZDRLaWM2MjJWWXNianc=">这里<i class="fa fa-external-link-alt"></i></span> 快速下载，提取码：peng</p>
<p><img src="https://img-blog.csdnimg.cn/20210718130336493.png"></p>
<p>下载好后，双击程序运行</p>
<p><img src="https://img-blog.csdnimg.cn/20210718130457676.png"></p>
<p>所有操作无需更改，继续下一步即可</p>
<p><img src="https://img-blog.csdnimg.cn/20210718131216324.png"></p>
<p>复制JDK安装的路径。继续进行系统环境变量的配置操作</p>
<p>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，进入如下界面</p>
<image src="https://img-blog.csdnimg.cn/20210718130923454.png" width="80%">

<p>粘贴上面电脑安装JDK的路径，路径可以更改，此处按照原路径完成后续操作</p>
<p>单击“新建”，输入以下内容，输入自己电脑JDK的安装路径</p>
<mark class="label ">JAVA_HOME</mark>

<mark class="label ">C:\Program Files\Java\jdk-16.0.1</mark>

<p><img src="https://img-blog.csdnimg.cn/20210718131748667.png"></p>
<p>操作同上，继续添加以下信息</p>
<mark class="label ">CLASSPATH</mark>

<mark class="label ">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</mark>

<p><img src="https://img-blog.csdnimg.cn/2021071813191677.png"></p>
<p>添加Path变量中的指令</p>
<image src="https://img-blog.csdnimg.cn/20210718132122443.png" width="70%">

<p>创建变量</p>
<image src="https://img-blog.csdnimg.cn/20210718132214311.png" width="70%">

<p>单击右侧”新建”，添加下面两条指令</p>
<mark class="label ">%JAVA_HOME%\bin</mark>

<mark class="label ">%JAVA_HOME%\jre\bin</mark>

<p>一路确定下来，最后同样进如cmd窗口，分别输入 java -version，java，javac 命令，显示如下信息即为配置成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java version <span class="comment">//查看java版本信息</span></span><br></pre></td></tr></table></figure>

<image src="https://img-blog.csdnimg.cn/2021071813245118.png" width="55%">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java <span class="comment">//执行.class文件</span></span><br></pre></td></tr></table></figure>

<image src="https://img-blog.csdnimg.cn/2021071813254011.png" width="55%">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac <span class="comment">//java编译器</span></span><br></pre></td></tr></table></figure>

<image src="https://img-blog.csdnimg.cn/20210718132610511.png" width="55%">

<hr>
<h1 id="Vscode中配置Java开发环境"><a href="#Vscode中配置Java开发环境" class="headerlink" title="Vscode中配置Java开发环境"></a>Vscode中配置Java开发环境</h1><p>Vscode是一款轻量化的源代码编辑器，其众多的插件支持也大受好评。下面我们就在Vscode中配置Java的开发环境</p>
<p>首先在Vscode扩展中找到这个插件进行安装<img src="https://img-blog.csdnimg.cn/20210718133349871.png"><br>Java Extension Pack是一个扩展包，里面包含了Java开发必要的一些插件，一般基础性的使用安装这个足矣</p>
<p><img src="https://img-blog.csdnimg.cn/20210718134054748.png"></p>
<p>使用键盘快捷键 <a class="btn" href="#">Ctrl</a>+<a class="btn" href="#">Shift</a>+<a class="btn" href="#">P</a> 打开命令面板，输入 Configure Java Runtime </p>
<p>在②处可以看到自己 JDk 安装的版本，如果是先安装的Vscode也可以点击③处在弹出的网站上下载JDK，按照上文配置即可</p>
<p><img src="https://img-blog.csdnimg.cn/20210718134431916.png"></p>
<p>快捷键 <a class="btn" href="#">Ctrl</a> +<a class="btn" href="#">，</a> 输入settings并单击 Edit in settings.json</p>
<p>在 javahome 出粘贴JDK的安装路径</p>
<div class="note danger"><p>涉及到转义字符，把 \ 改为 \ 或 &#x2F; )</p>
</div>

<p>Tips:鼠标选中一个 \ 快捷键 <a class="btn" href="#">Ctrl</a> +<a class="btn" href="#">D</a> 连续敲击可快速选中所有 \ ,直接在键盘上更改即可</p>
<p><img src="https://img-blog.csdnimg.cn/20210718134947144.png"></p>
<p>配置完成，下面写一个Java版的HelloWorld进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单击左侧调试图标，生成 launch.json 文件</p>
<p><img src="https://img-blog.csdnimg.cn/20210718135406597.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20210718135515805.png"></p>
<p>因为已经安装Java开发的插件，直接点击 Run 便可在控制台看到输出结果</p>
<p><img src="https://img-blog.csdnimg.cn/20210718135626448.png"></p>
<p>配置已完成，希望能帮到大家！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 驱动升级到 Version 8.0.28 连接 MySQL 的踩坑记录</title>
    <url>/2022/04/29/jdbc-driver-update/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>升级驱动到 mysql-connector-java 8.0.28 的注意事项</strong><br>💖💖如果本文对您有帮助的话，还请各位小伙伴👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/a7dead605e9643a58a286a77bd691970.png" width="450"></center>

<hr>
<h1 id="🐛问题描述"><a href="#🐛问题描述" class="headerlink" title="🐛问题描述"></a>🐛问题描述</h1><p>升级驱动到 <code>mysql-connector-java 8.0.28</code> 后，部署执行各种报错，但是把连接器切换到 <code>mysql-connector-java-5.1.48</code> 又没有问题，很是疑惑！</p>
<p>报错的信息大都是无法找到该类、无法连接</p>
<span id="more"></span>
<p>主要是配置好了，就没有留截图，大家主要注意和旧版本不同的地方就好</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai8=">官方下载地址<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/2d32b303c6b14e89b312f73a8a96f934.png"></p>
<p>历经种种艰难险阻，终于是解决了，成功连接，下面给出解决方案</p>
<h1 id="💡解决方案"><a href="#💡解决方案" class="headerlink" title="💡解决方案"></a>💡解决方案</h1><p>第一种是菜鸟的示例，较为全面；如果感觉比较麻烦，可以使用第二种方案</p>
<h2 id="1-🔎完整版"><a href="#1-🔎完整版" class="headerlink" title="1.🔎完整版"></a>1.🔎完整版</h2><blockquote>
<p>这里引用<strong>菜鸟教程</strong>示例</p>
</blockquote>
<h3 id="📡1-数据库环境搭建"><a href="#📡1-数据库环境搭建" class="headerlink" title="📡1.数据库环境搭建"></a>📡1.数据库环境搭建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立数据库 demo1</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立 websites 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> websites (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;站点名称&#x27;</span>,</span><br><span class="line">  url <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  alexa <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;Alexa 排名&#x27;</span>,</span><br><span class="line">  country <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;国家&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 写入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> websites</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;https://www.google.cm/&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;淘宝&#x27;</span>, <span class="string">&#x27;https://www.taobao.com/&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;http://www.runoob.com&#x27;</span>, <span class="string">&#x27;5892&#x27;</span>, <span class="string">&#x27;&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;微博&#x27;</span>, <span class="string">&#x27;http://weibo.com/&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;https://www.facebook.com/&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="📡2-测试类连接"><a href="#📡2-测试类连接" class="headerlink" title="📡2.测试类连接"></a>📡2.测试类连接</h3><blockquote>
<p>这里最最重要的就是 MySQL 版本的问题，新版更新了驱动类的名称为 <code>com.mysql.cj.jdbc.Driver</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MySQL 8.0 以下版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="comment">// static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;</span></span><br><span class="line">    <span class="comment">// static final String DB_URL = &quot;jdbc:mysql://localhost:3306/RUNOOB&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/demo1?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true&quot;</span>;</span><br><span class="line">                                                            <span class="comment">// 注意修改数据库名 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;your db login name&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;your db password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开链接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;连接数据库...&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            System.out.println(<span class="string">&quot; 实例化Statement对象...&quot;</span>);</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">&quot;SELECT id, name, url FROM websites&quot;</span>;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">                System.out.print(<span class="string">&quot;, 站点名称: &quot;</span> + name);</span><br><span class="line">                System.out.print(<span class="string">&quot;, 站点 URL: &quot;</span> + url);</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="literal">null</span>) stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se2) &#123;</span><br><span class="line">            &#125;<span class="comment">// 什么都不做</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果，连接成功</p>
<p><img src="https://img-blog.csdnimg.cn/78091ccf167c4cc5a6f3a8560fd620e9.png"></p>
<h2 id="2-🔎精简版"><a href="#2-🔎精简版" class="headerlink" title="2.🔎精简版"></a>2.🔎精简版</h2><blockquote>
<p>上例考虑全面，使用异常较多，为了方便理解，我们简化下代码量</p>
</blockquote>
<h3 id="📡1-数据库环境搭建-1"><a href="#📡1-数据库环境搭建-1" class="headerlink" title="📡1.数据库环境搭建"></a>📡1.数据库环境搭建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立数据库 demo1</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立数据表 accounts</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> accounts (</span><br><span class="line">			id <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">			money <span class="type">FLOAT</span>(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 写入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;10000&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;you&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="📡2-测试类连接-1"><a href="#📡2-测试类连接-1" class="headerlink" title="📡2.测试类连接"></a>📡2.测试类连接</h3><blockquote>
<p>注意版本、资源释放的顺序（最先调用，最后释放，释放顺序和调用顺序相反）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">package com.jason.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.<span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line">public class JDBCDemo &#123;</span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) throws Exception &#123; <span class="operator">/</span><span class="operator">/</span>psvm 快速生成</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">1.</span> 注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">2.</span> 获取连接</span><br><span class="line">        String url <span class="operator">=</span> &quot;jdbc:mysql://localhost:3306/demo1?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useServerPrepStmts=true&quot;;</span><br><span class="line">        String username <span class="operator">=</span> &quot;your db login name&quot;;</span><br><span class="line">        String password <span class="operator">=</span> &quot;your db password&quot;;</span><br><span class="line">        Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">3.</span> 定义<span class="keyword">sql</span></span><br><span class="line">        String <span class="keyword">sql</span> <span class="operator">=</span> &quot;update accounts set money = 1000 where id = 2&quot;;</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">4.</span> 获取执行<span class="keyword">sql</span>的对象 Statement</span><br><span class="line">        Statement stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">5.</span> 执行<span class="keyword">sql</span></span><br><span class="line">        <span class="type">int</span> count <span class="operator">=</span> stmt.executeUpdate(<span class="keyword">sql</span>);<span class="operator">/</span><span class="operator">/</span>受影响的行数</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">6.</span> 处理结果</span><br><span class="line">        System.out.println(&quot;Affected rows: &quot;<span class="operator">+</span>count);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">7.</span> 释放资源 Statement 和 Connection 注意释放顺序</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果，连接成功</p>
<p><img src="https://img-blog.csdnimg.cn/592143e72c284f479d3e4ddd19ea99c5.png"></p>
<h1 id="📒总结"><a href="#📒总结" class="headerlink" title="📒总结"></a>📒总结</h1><p>毕竟是更新，多少会有一些改动，我们要学会去看更新了什么、学会去官方找解决方案</p>
<p>比如这次的报错就可以从最新的 jar 包中找到</p>
<p><img src="https://img-blog.csdnimg.cn/0b7e6fa61ee14f7cb058813ae22cda22.png"></p>
<p>在 <code>5.x</code> 版本之后，注册驱动的代码可以省略不写，就是这一段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 注册驱动</span></span><br><span class="line"><span class="comment">//Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br></pre></td></tr></table></figure>

<p>原因是：驱动 <code>jar</code> 包下，默认 <code>META-INF  services</code> 目录下记录了对应驱动类名，无需再次书写</p>
<p><img src="https://img-blog.csdnimg.cn/99621f3f15a941ac876e212d7dbea355.png"></p>
<hr>
<p>可能是我用的版本太老了，跟不上时代的发展辽~~</p>
<p><img src="https://img-blog.csdnimg.cn/e49ab973b2f04dfda6df8723346227af.gif"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【蓝桥杯冲刺】—— 2021 软件类 B 组 C/C++ 真题 A~B</title>
    <url>/2022/04/18/lanqiao-2021-teamB/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>本来计划好的各种复习方案，却因为种种原因没有执行，不找借口，就是不想学</p>
<p><img src="https://img-blog.csdnimg.cn/47752a33b41a43649f814a9c74dff056.png"></p>
<p><strong>阶段性心理活动状态：</strong></p>
<ul>
<li>看了看真题，哇！好难，还是先做基础题吧……</li>
<li>查了一堆资料、找了各种资源，满满收藏，一个没看……</li>
<li>搜集经验贴，错把经验当宝剑……</li>
<li>想着时间还很长，一再推迟，今日事，明日毕！结果到火烧眉毛也没看……</li>
</ul>
<p>直到今天下载了准考证，才知道事情的严重性！！！但，好歹努个力吧，至少不能轻言放弃</p>
<p><img src="https://img-blog.csdnimg.cn/f291991a42b24d5fb42dd9eb0df6fd50.png"></p>
<p>想想 300 块大洋的报名费，用来干什么不香，不能打水漂。突击训练搞起来，肝算法，刷题~冲冲冲，恶补 +1 +1</p>
<span id="more"></span>

<h1 id="试题-A：空间"><a href="#试题-A：空间" class="headerlink" title="试题 A：空间"></a>试题 A：空间</h1><p><img src="https://img-blog.csdnimg.cn/aa7b7ce5c9a1433e91c069cda1485725.png"></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>计算机基础知识，主要考察不同数据存储单位之间的转换</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>需要知道如下单位转换关系</p>
<blockquote>
<p>1 mb &#x3D; 1024 kb &#x3D; 1024 * 1024 b  ;   1 byte(字节) &#x3D; 8 bit(位)</p>
</blockquote>
<p>那么，256 mb 的内存共有 256 * 1024 * 1024 * 8 bit，所以，共能存放 （256 * 1024 * 1024 * 8）÷ 32 &#x3D; <strong>67108864</strong> 个 32 位二进制整数</p>
<p>计算的话可以用计算器，或者代码。当然，你也可以选择手工计算，但我觉得你应该不至于这么做</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-04 19:29:06</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-04 19:31:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; (256 * 1024 * 1024 * 8) / 32 &lt;&lt; endl; 运算结果超出 int 范围</span></span><br><span class="line">    cout &lt;&lt; <span class="number">256</span> * <span class="number">1024</span> * <span class="number">1024</span> / <span class="number">4</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="试题-B：卡片"><a href="#试题-B：卡片" class="headerlink" title="试题 B：卡片"></a>试题 B：卡片</h1><p><img src="https://img-blog.csdnimg.cn/6c2dadd9745548d483fe363fdfec6d6f.png"></p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，数字 0~9，每个数字又有 2021 个，显然需要存放于数组中，每次拼凑数字用掉一张卡片，对应卡片数量减一。等到某个数字卡片数量中出现<strong>剩余 0 张</strong>的情况，则无法继续拼凑</p>
<p>事实上，题目举例显而易见，拼出数字 1~9 时，只剩下 1 张卡片 1 ，无法继续拼出数字 11 。实际情况中，数字 1 也是使用最多的，也就是用的最快，最先没有剩余的</p>
<p>其中，在数组判断哪个数字减一时涉及到<strong>数位截取</strong>的知识点</p>
<blockquote>
<p>名字高深，实质很简单：用 <code>/</code> 和 <code>%</code> 提取出组合数据中的数字，eg：截取数字 206 中的 6，206 % 10 即可</p>
</blockquote>
<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-04 19:32:45</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-04 20:39:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> array[<span class="number">10</span>]; <span class="comment">//数字 0~9 共 10 个数字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">piece</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 尝试拼出数字 num,成功返回 true,失败返回 false</span></span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        array[num % <span class="number">10</span>]--;       <span class="comment">// 使用了数字num,使用 % 剥离数字,数字对应个数减一</span></span><br><span class="line">        <span class="keyword">if</span> (array[num % <span class="number">10</span>] &lt; <span class="number">0</span>) <span class="comment">// 如果对应的数字剩余个数小于 0,说明该数字已经用尽,返回 false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        num /= <span class="number">10</span>; <span class="comment">// 数字 1 和 10,均使用数字 1,故 / 10后商为 1,数字 1 的个数需要再次减一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//计数器,每次拼完一个数字,自增 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        array[i] = <span class="number">2021</span>; <span class="comment">// 数组中每个元素都赋值为 2021,代表数字 0~9的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">piece</span>(i))</span><br><span class="line">        &#123; <span class="comment">// 从数字1开始拼,每拼完一个数字,计数器自增 1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【2022 蓝桥杯 B 组 C/C++ 真题】快来看看你做对几题</title>
    <url>/2022/04/09/lanqiao-2022-teamB/</url>
    <content><![CDATA[<blockquote>
<p>由于是第一时间发布，题解还没来的及写，大家可以先看下真题题目</p>
</blockquote>
<span id="more"></span>

<h1 id="试题-A"><a href="#试题-A" class="headerlink" title="试题 A"></a>试题 A</h1><p><img src="https://img-blog.csdnimg.cn/f1b78b0ab6cf40c289549fa37e99b70a.png"></p>
<h1 id="试题-B"><a href="#试题-B" class="headerlink" title="试题 B"></a>试题 B</h1><p><img src="https://img-blog.csdnimg.cn/7eef097be69e4f6e9bc2321ad49a40ac.png"></p>
<h1 id="试题-C"><a href="#试题-C" class="headerlink" title="试题 C"></a>试题 C</h1><p><img src="https://img-blog.csdnimg.cn/8357ed3072de4307b502c11ceabb87a6.png"></p>
<h1 id="试题-D"><a href="#试题-D" class="headerlink" title="试题 D"></a>试题 D</h1><p><img src="https://img-blog.csdnimg.cn/654806617073405391338518ec0685b4.png"></p>
<h1 id="试题-E"><a href="#试题-E" class="headerlink" title="试题 E"></a>试题 E</h1><p><img src="https://img-blog.csdnimg.cn/717c953283cd4366a524cbefa6083d8b.png"></p>
<p><img src="https://img-blog.csdnimg.cn/1fc7327be84f49a8ab6dc3a5f52f59bf.png"></p>
<h1 id="试题-F"><a href="#试题-F" class="headerlink" title="试题 F"></a>试题 F</h1><p><img src="https://img-blog.csdnimg.cn/7013fdffe0f7457fa533bf0672c38f52.png"></p>
<p><img src="https://img-blog.csdnimg.cn/ea0990c7842c414d818fc8834bb6d716.png"></p>
<h1 id="试题-G"><a href="#试题-G" class="headerlink" title="试题 G"></a>试题 G</h1><p><img src="https://img-blog.csdnimg.cn/b56ef2f06bde4362a47d5ff18f03b356.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2777c594e0864a1ca29f952f90f4a466.png"></p>
<h1 id="试题-H"><a href="#试题-H" class="headerlink" title="试题 H"></a>试题 H</h1><p><img src="https://img-blog.csdnimg.cn/395b39318bfc4a4d91d35da670332103.png"></p>
<p><img src="https://img-blog.csdnimg.cn/73381369ee684f9ca5d7ee96888ab1dd.png"></p>
<h1 id="试题-I"><a href="#试题-I" class="headerlink" title="试题 I"></a>试题 I</h1><p><img src="https://img-blog.csdnimg.cn/1016f44f86554b3d9ab38c7813cf0938.png"></p>
<p><img src="https://img-blog.csdnimg.cn/e20742ef2e794db5a5a81d49e7ade400.png"></p>
<h1 id="试题-J"><a href="#试题-J" class="headerlink" title="试题 J"></a>试题 J</h1><p><img src="https://img-blog.csdnimg.cn/997beba2678f4063b097aaff44b7dfab.png"></p>
<p><img src="https://img-blog.csdnimg.cn/bcc7e0385d1c46feba2018a69c639aac.png"></p>
<hr>
<center><strong><font size=5>💯你一定是省一💯</font></strong></center>

<p><img src="https://img-blog.csdnimg.cn/fe893b0c3288498cbd0a2d8782f70382.png#pic_center"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基本语法格式</title>
    <url>/2021/08/09/markdown-syntax-format/</url>
    <content><![CDATA[<div class="note danger"><p>本文最初发表于 CSDN,可能同 NEXT 渲染引擎存在差异,为保证阅读体验,您可以在<span class="exturl" data-url="aHR0cHM6Ly9kcC1qc29uLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzExOTUzMTIyMg==">此处访问<i class="fa fa-external-link-alt"></i></span></p>
</div>

<span id="more"></span>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><blockquote>
<p>使用最多6个 <code>#</code> 号实现层级标题</p>
</blockquote>
<hr>
<h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><ol>
<li><p>空格1 空格2</p>
</li>
<li><p>空格1</p>
</li>
<li></li>
<li><p>空格3</p>
</li>
</ol>
<blockquote>
<p>一个<code>空格</code>+<code>enter</code>&#x3D;换空行</p>
</blockquote>
<hr>
<h1 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h1><p><em>斜体</em>   <code> * *</code></p>
<p><em>斜体</em>  <code>_ _</code></p>
<p><strong>粗体</strong> <code>** ** </code></p>
<p><strong>粗体</strong><code> __ __</code></p>
<p><em><strong>粗斜体</strong></em>  <code>***</code>或<code>___</code></p>
<p><code>强调</code> 符号 &#96;</p>
<hr>
<h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><hr>
<hr>
<hr>
<blockquote>
<p>三个以上字符    <code>*</code> 或<code>- - - </code> 或 <code>--------------</code></p>
</blockquote>
<h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p><del>这是删除线</del></p>
<blockquote>
<p>文字两端加波浪线 ~~</p>
</blockquote>
<hr>
<h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p><u>这是下划线</u></p>
<blockquote>
<p>符号<code>&lt;u&gt; </code>  和  <code>&lt;/u&gt;</code>     之间添加文本</p>
</blockquote>
<hr>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>[^这是脚注]</p>
<p>脚注测试<code>[^Team]</code></p>
<p><code>[^Team]</code>:这是脚注</p>
<blockquote>
<p>这时候光标放在Team处就有脚注提示，单击 1 跳转到文末<br>格式:<code> [^内容]</code>+<code>[^内容]:释义</code></p>
</blockquote>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h2><ul>
<li>第一 <code>*</code> 号<ul>
<li>第二 <code>+</code> 号<ul>
<li>第三<code>-</code>号<blockquote>
<p>符号<code>*</code>、<code>+</code>、<code>-</code>都能实现</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h2><ol>
<li><p>第一</p>
</li>
<li><p>第二</p>
<blockquote>
<p><code>数字</code>+ <code>.</code></p>
</blockquote>
<h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2></li>
<li><p>第一项</p>
<ul>
<li><p>子项1</p>
<ul>
<li>子项2</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>放入一个<code>Tab</code>或四个<code>空格</code></p>
</blockquote>
<hr>
<h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><blockquote>
<p>引用区块</p>
<blockquote>
<p>引用2</p>
<blockquote>
<p>引用3</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>符号&gt; + 空格  嵌套加入多个&gt; 即可</p>
</blockquote>
<h2 id="列表嵌套区块"><a href="#列表嵌套区块" class="headerlink" title="列表嵌套区块"></a>列表嵌套区块</h2><ul>
<li><p>第一项</p>
<blockquote>
<p>嵌套内容     符号<code>*</code>+<code>&gt;</code>实现</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>cout&lt;&lt;</code>   两端加 &#96; 号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是包含代码块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>格式：三个 <strong>&#96;</strong> 号 +语言选择<br>结尾：对应前者</p>
</blockquote>
<hr>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>[链接名称]和(链接地址) <a href="%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8">这里是网址</a></p>
<p>&lt;直接放置链接地址&gt;   <span class="exturl" data-url="aHR0cHM6Ly/nvZHlnYAv">https://网址<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>这是单元格1</th>
<th>这是单元格2</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>使用符号 <code>| </code>和 <code>-</code>   <code>- </code>用于分隔行<br><code>|...|...|</code> 制表</p>
</blockquote>
<h1 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h1><p>符号 <code>-</code>: 右对齐</p>
<p>符号<code>:-</code> 左对齐</p>
<p>符号<code>:-:</code> 居中对齐</p>
<hr>
<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p>掌握几种常见的HTML标签，实现更多文本格式</p>
<p>例如：标签 <code>&lt;kbd&gt;</code>和标签<code>&lt;/kbd&gt;</code></p>
<p>我们可以按住<kbd>Windows</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd>启动截图功能</p>
<blockquote>
<p>示例代码：我们可以按住<code>&lt;kbd&gt;</code>Windows<code>&lt;/kbd&gt;</code>+<code>&lt;kbd&gt;</code>Shift<code>&lt;/kbd&gt;</code>+<code>&lt;kbd&gt;</code>S<code>&lt;/kbd&gt;</code>启动截图功能</p>
</blockquote>
<hr>
<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><p>$x+y&#x3D;2$</p>
<p>$\sqrt{c x^2 + d}$</p>
<blockquote>
<p>使用一对 <code>$ $</code> 符号 嵌入LaTeX格式数学公式，Markdown会自动进行渲染</p>
</blockquote>
<h1 id="字体着色"><a href="#字体着色" class="headerlink" title="字体着色"></a>字体着色</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;font face=<span class="string">&quot;微软雅黑&quot;</span>&gt;这是微软雅黑字体&lt;/font&gt;</span><br><span class="line">&lt;font color=red size=6&gt;color=red size=5&lt;/font&gt;</span><br></pre></td></tr></table></figure>

<p><font face="微软雅黑">这是微软雅黑字体</font></p>
<p><font color=red size=6>color&#x3D;red size&#x3D;5</font></p>
<blockquote>
<p>更多格式请参考：<span class="exturl" data-url="aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2NvbW1vbnM/dHlwZT0z">RGB颜色对照表<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h1 id="图片修改"><a href="#图片修改" class="headerlink" title="图片修改"></a>图片修改</h1><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>在图片引入编辑器后生成的代码某位添加 <strong>#pic_center</strong><br><img src="https://img-blog.csdnimg.cn/6270ace20bfe4c62b19a45f107e2bc54.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![](https://img-blog.csdnimg.cn/6270ace20bfe4c62b19a45f107e2bc54.png)</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![](https://img-blog.csdnimg.cn/6270ace20bfe4c62b19a45f107e2bc54.png<span class="comment">#pic_center)</span></span><br></pre></td></tr></table></figure>
<p>看效果：<br><img src="https://img-blog.csdnimg.cn/6270ace20bfe4c62b19a45f107e2bc54.png"></p>
<h2 id="等比缩放"><a href="#等比缩放" class="headerlink" title="等比缩放"></a>等比缩放</h2><p>拷贝生成的源码<br><img src="https://img-blog.csdnimg.cn/7aa6a23a91eb4d098904845f4fbd479a.png"><br>放入下面的 “链接” 处</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;这里放置链接&quot;</span> width=<span class="string">&quot;70%&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>自定义 <strong>width</strong> 后的数值实现等比例缩放<br>为避免文字后插入图片显示间距过大，可以使用官方方法<br><img src="https://img-blog.csdnimg.cn/3400bab094bd4880bf11d08da2fa248c.png"><br>注意是 空格&#x3D; 后面的不是乘号，是 <mark class="label ">小写字母 x</mark></p>
<h2 id="去水印"><a href="#去水印" class="headerlink" title="去水印"></a>去水印</h2><p>删除部分生成的源码，只留下图片URL，像这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://img-blog.csdnimg.cn/7aa6a23a91eb4d098904845f4fbd479a.png</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/79ecea42fcf84d7a8ae41c685e42509d.png"><br>即可实现图片去水印的效果</p>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下同时安装多个版本的 JDK</title>
    <url>/2022/03/22/multiple-version-jdk/</url>
    <content><![CDATA[<blockquote>
<p>由于不同的项目使用的 JDK 版本不一致，实际应用中会存在版本切换的问题</p>
</blockquote>
<p>准备好两个版本的 JDK（更多个版本同理）</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/e6e8ed778b5b44e58445538f963c3436.png"></p>
<p>打开环境变量，新建或编辑三个 <code>JAVA_HOME</code></p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>JAVA_HOME</td>
<td>%JAVA8_HOME%</td>
</tr>
<tr>
<td>JAVA8_HOME</td>
<td>C:\Program Files\Java\jdk1.8.0_221</td>
</tr>
<tr>
<td>JAVA17_HOME</td>
<td>C:\Program Files\Java\jdk-17.0.2</td>
</tr>
</tbody></table>
<p>其中 <code>JAVA_HOME</code> 变量值修改为当前使用的版本号即可</p>
<p><code>Path</code> 变量开始的位置添加 <code>%JAVA_HOME%\bin</code> 这一项，如果存在则无需添加，&#x3D;&#x3D;注意删除原来版本的路径配置&#x3D;&#x3D;</p>
<p><img src="https://img-blog.csdnimg.cn/ca7ebaf231da4d08a0073a47d57e6896.png"></p>
<p><code>cmd</code> 打开命令行，输入 <code>path</code> ，查看第一条</p>
<p><img src="https://img-blog.csdnimg.cn/31afc4ea12c54046a82d9f565bf6a359.png"></p>
<p>跳转到该目录下，删除 <strong>java.exe   javaw.exe   javaws.exe</strong></p>
<p><strong>再次新建</strong> <code>cmd</code>，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>查看版本号，可以看到已经切换成功</p>
<p><img src="https://img-blog.csdnimg.cn/6e2e1c9ca7104b6b92bf35d88e811892.png"></p>
<p>如果需要更多个版本，比如三个版本的 JDK 切换，则在第一步的时候继续新建 <code>JAVAxxx_HOME</code> ，我们只要在第一个 <code>JAVA_HOME</code> 变量值的位置，修改为当前使用的版本号即可 <code>%JAVAxxx_HOME%</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 服务正在启动 MySQL 服务无法启动 服务没有报告任何错误 请键入 NET HELPMSG 3534 以获得更多的帮助</title>
    <url>/2022/04/15/mysql-server-error/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>有关 Mysql 的详细安装过程，请<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjE4MDA1ODA=">参考这里<i class="fa fa-external-link-alt"></i></span></p>
<p>启动 MySQL 服务时，遇到无法启动的报错信息，最后发现是输入命令<code>mysqld --initialize-insecure</code> 进行初始化时的问题，data 目录初始化错误</p>
<p>特此记录下解决方案</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>控制台输入命令 <code>net start mysql</code> 控制台输出信息：</p>
<blockquote>
<p>MySQL 服务正在启动 . MySQL 服务无法启动。 服务没有报告任何错误。 请键入 NET HELPMSG 3534 以获得更多的帮助。</p>
</blockquote>
<span id="more"></span>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><code>WIN</code> + <code>R</code> 输入 <code>cmd</code> 打开命令行</p>
<p><img src="https://img-blog.csdnimg.cn/38b8796418a24ef6a46e73d4ee3fe7f1.png"></p>
<p>切入到 Mysql 安装目录</p>
<p><img src="https://img-blog.csdnimg.cn/258d662c81094569ae07cd22d65696b7.png"></p>
<p>进入到 <code>bin</code> 目录下，依次执行下列命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册服务</span></span><br><span class="line">mysqld -install </span><br><span class="line"><span class="comment"># 初始化 Mysql</span></span><br><span class="line">mysqld --initialize-insecure </span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">net start mysql </span><br></pre></td></tr></table></figure>

<p>如果报错<strong>拒绝访问</strong>，那就是权限不够</p>
<p><img src="https://img-blog.csdnimg.cn/713f7b72b3a44a4da408b70205f978a8.png"></p>
<p>我们使用管理员身份打开即可</p>
<p><img src="https://img-blog.csdnimg.cn/15b68812ecb14097a03b717cab9533eb.png"></p>
<p>以后可以当做一个小技巧，一般 Windows cmd 中关于类似问题首先考虑下权限不够，管理员打开，再思考其他方面的错误</p>
<p>使用<strong>管理员身份</strong>打开后，控制台显示</p>
<p><img src="https://img-blog.csdnimg.cn/066ab37a104040318bbd353d8c03e5cf.png"></p>
<p>问题解决，服务正常启动</p>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Online Judge System 中术语含义</title>
    <url>/2022/04/18/oj-term/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/18d2913700404829994d49cd3952e9ee.png"></p>
<span id="more"></span>

<p>图片来源网络！</p>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><blockquote>
<p>大家在刷题时，常见的 <code>OJ</code> 平台（例如：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuLw==">洛谷<i class="fa fa-external-link-alt"></i></span>）都会遇到测试点提示的信息，为了清楚的知道自己错在哪里，非常有必要了解下 <code>OJ</code> 系统的提示信息</p>
</blockquote>
<h1 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h1><table>
<thead>
<tr>
<th align="center">缩略语</th>
<th align="center">英文全称</th>
<th align="center">中文全称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OJ</td>
<td align="center">Online Judge</td>
<td align="center">在线判题系统</td>
</tr>
<tr>
<td align="center">AC</td>
<td align="center">Accepted</td>
<td align="center">通过</td>
</tr>
<tr>
<td align="center">WA</td>
<td align="center">Wrong Answer</td>
<td align="center">答案错误</td>
</tr>
<tr>
<td align="center">TLE</td>
<td align="center">Time Limit Exceed</td>
<td align="center">超时</td>
</tr>
<tr>
<td align="center">OLE</td>
<td align="center">Output Limit Exceed</td>
<td align="center">超过输出限制</td>
</tr>
<tr>
<td align="center">MLE</td>
<td align="center">Memory Limit Exceed</td>
<td align="center">超出内存限制</td>
</tr>
<tr>
<td align="center">PE</td>
<td align="center">Presentation Error</td>
<td align="center">格式错误</td>
</tr>
<tr>
<td align="center">RE</td>
<td align="center">Runtime Error</td>
<td align="center">运行出错</td>
</tr>
<tr>
<td align="center">CE</td>
<td align="center">Compile Error</td>
<td align="center">编译错误</td>
</tr>
</tbody></table>
<h1 id="愿"><a href="#愿" class="headerlink" title="愿"></a>愿</h1><p>希望我们刷题过程中遇到的都是 <code>AC</code><br><img src="https://img-blog.csdnimg.cn/79cac49ed30e418e9099119d4d81e794.png"></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 1 题】3 或 5 的倍数 Multiples of 3 or 5</title>
    <url>/2022/04/17/projecteuler001/</url>
    <content><![CDATA[<h1 id="Problem-1-Multiples-of-3-or-5"><a href="#Problem-1-Multiples-of-3-or-5" class="headerlink" title="Problem 1 Multiples of 3 or 5"></a>Problem 1 Multiples of 3 or 5</h1><blockquote>
<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.<br>Find the sum of all the multiples of 3 or 5 below 1000.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-1-3-或-5-的倍数"><a href="#问题-1-3-或-5-的倍数" class="headerlink" title="问题 1 3 或 5 的倍数"></a>问题 1 3 或 5 的倍数</h1><blockquote>
<p>如果我们列出所有小于 10 且是 3 或 5 的倍数的自然数，我们会得到 3、5、6 和 9。这些倍数之和是 23。<br>求 1000 以下所有 3 或 5 的倍数之和。</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><p>常规思路，找到 1000 以内所有 3 或 5 的倍数，分别求和解决</p>
<h2 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h2><p>由于暴力解法的算法执行效率很低，需要重复遍历 1000 次，自然效率低下。我们只需要枚举 3 的倍数之和、5 的倍数之和，最后减去它们的最小公倍数之和，便可节省不少时间</p>
<p>1000 以内 k 的倍数和为</p>
<p>$$<br>\large \frac{\left (1000-1 \right)}{k}<br>$$</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="暴力求解-1"><a href="#暴力求解-1" class="headerlink" title="暴力求解"></a>暴力求解</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-04 22:59:48</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-04 23:00:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">              sum += i;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化思路-1"><a href="#优化思路-1" class="headerlink" title="优化思路"></a>优化思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-04 22:59:48</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-04 23:14:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="type">int</span> sum3 = <span class="number">0</span>, sum5 = <span class="number">0</span>, sum15 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">1000</span> - <span class="number">1</span>) / <span class="number">3</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">            sum3 += i * <span class="number">3</span>; <span class="comment">//求出3的倍数的和</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">1000</span> - <span class="number">1</span>) / <span class="number">5</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">            sum5 += i * <span class="number">5</span>; <span class="comment">//求出5的倍数的和</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">1000</span> - <span class="number">1</span>) / <span class="number">15</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">            sum15 += i * <span class="number">15</span>; <span class="comment">//求出15的倍数的和</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sum3 + sum5 - sum15;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">calculate</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：233168</p>
</blockquote>
<p>通过啦，既然是第一次，还是截个图记录下叭。以后也要继续加油啊，数学的优雅永不过时！！</p>
<p><img src="https://img-blog.csdnimg.cn/064ac6e7871941f590813d81a8887747.png"></p>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 2 题】 偶数斐波那契数 Even Fibonacci numbers</title>
    <url>/2022/04/17/projecteuler002/</url>
    <content><![CDATA[<h1 id="Problem-2-Even-Fibonacci-numbers"><a href="#Problem-2-Even-Fibonacci-numbers" class="headerlink" title="Problem 2 Even Fibonacci numbers"></a>Problem 2 Even Fibonacci numbers</h1><blockquote>
<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-2-偶数斐波那契数"><a href="#问题-2-偶数斐波那契数" class="headerlink" title="问题 2 偶数斐波那契数"></a>问题 2 偶数斐波那契数</h1><blockquote>
<p>斐波那契数列中的每个新项都是通过添加前两项来生成的。从 1 和 2 开始，前 10 个术语将是：<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>通过考虑斐波那契数列中值不超过四百万的项，求偶数项之和。</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>首先清楚什么是<strong>斐波那契数列</strong></p>
<blockquote>
<p>斐波那契数（Successione di Fibonacci），又译为菲波拿契数、菲波那西数、斐氏数、黄金分割数。所形成的数列称为斐波那契数列</p>
</blockquote>
<h3 id="数学定义"><a href="#数学定义" class="headerlink" title="数学定义"></a>数学定义</h3><p>数学上，使用<strong>递归</strong>的方法定义</p>
<p><img src="https://img-blog.csdnimg.cn/e6ac2492ca1a4f1f8b6fb9cf441a1146.png"></p>
<p>通俗来讲，斐波那契数列由 0（<strong>第零项</strong>） 和 1 开始，之后的斐波那契数由之前的两数相加得出，举例</p>
<blockquote>
<p>1、 1、 2、 3、 5、 8、 13、 21、 34、 55、 89、 144、 233、 377……</p>
</blockquote>
<h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>看到这么多数字，并且有一定规律，我们自然而然会联想到数组。利用其数学定义解决，关键在于<strong>第三个斐波那契数值等于前两个数值相加</strong>，而后一直如此，实现如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-05 12:26:31</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-05 14:05:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">1000</span>], sum = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">2</span>; <span class="comment">// 由循环中等式导出的结果</span></span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">//初始化数组前三个元素,其他默认为 0</span></span><br><span class="line">    <span class="keyword">while</span> (f[f[<span class="number">0</span>]] &lt; <span class="number">4000000</span>)</span><br><span class="line">    &#123;                                        <span class="comment">//数组第一个元素的值小于 4000000</span></span><br><span class="line">        f[f[<span class="number">0</span>] + <span class="number">1</span>] = f[f[<span class="number">0</span>]] + f[f[<span class="number">0</span>] - <span class="number">1</span>]; <span class="comment">// 首先理解 F[3]=F[2]+F[1] 然后类比到数组,用元素 f[0] 代换即可</span></span><br><span class="line">        f[<span class="number">0</span>]++;                              <span class="comment">//每计算得出一个斐波那契数,数组第一个元素加 1(记录共有多少个斐波那契数)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; f[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[i] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += f[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>仔细思考下，常规解决方案中，我们开辟了很大的内存空间，但实质上每次增加（记录下一个斐波那契数）的却只是用到了三个元素来进行求和运算，所以我们仅开辟一个三个元素的数组就好，节省了很大的内存开销</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-05 12:26:31</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-05 14:20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">3</span>], sum = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; f[<span class="number">2</span>] &lt; <span class="number">4000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[<span class="number">2</span>] = f[<span class="number">1</span>] + f[<span class="number">0</span>];</span><br><span class="line">        f[<span class="number">0</span>] = f[<span class="number">1</span>];</span><br><span class="line">        f[<span class="number">1</span>] = f[<span class="number">2</span>]; <span class="comment">// 后续数字依次向前推进,在前三个元素中进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">2</span>] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += f[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于 sum 计算的是偶数项的和,但是前三个数字 1 ,2 ,3 中</span></span><br><span class="line">    <span class="comment">// 2 是斐波那契数,但是 3%2 不为 0 ,sum 此时并未计算斐波那契数 2,结果需要加上</span></span><br><span class="line">    cout &lt;&lt; sum + <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：4613732</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 3 题】最大质因数 Largest prime factor</title>
    <url>/2022/04/17/projecteuler003/</url>
    <content><![CDATA[<h1 id="Problem-3-Largest-prime-factor"><a href="#Problem-3-Largest-prime-factor" class="headerlink" title="Problem 3 Largest prime factor"></a>Problem 3 Largest prime factor</h1><blockquote>
<p>The prime factors of 13195 are 5, 7, 13 and 29.<br>What is the largest prime factor of the number 600851475143 ?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-3-最大质因数"><a href="#问题-3-最大质因数" class="headerlink" title="问题 3 最大质因数"></a>问题 3 最大质因数</h1><blockquote>
<p>13195 的质因数是 5、7、13 和 29。<br>数字 600851475143 的最大质因数是多少？</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先要理解清楚<strong>质因数</strong>的概念</p>
<blockquote>
<p>质因数，在<strong>数论</strong>中是指能整除给定正整数的质数。除了1以外，两个没有其他共同质因子的正整数称为互质。因为1没有质因子，1与任何正整数（包括1本身）都是互质<br>正整数的因数分解可将正整数表示为一连串的质因子相乘，质因子如重复可以用指数表示。根据<strong>算术基本定理</strong>，任何正整数皆有独一无二的质因子分解式。只有一个质因子的正整数为质数<br>如果一个质数是某个数的因数，那么就说这个质数是这个数的质因数，并且这个因数一定是一个质数</p>
</blockquote>
<p><strong>每个合数都可以写成几个质数相乘的形式，这几个质数均称为该合数的质因数</strong></p>
<p>例如：6 的质因子是 2 和 3（6 &#x3D; 2 × 3）；10 的质因子是 2 和 5（10 &#x3D; 2 × 5）</p>
<p>求解<strong>质因数</strong>的方法中，比较常见的事<strong>短除法</strong>，它的具体求解步骤是</p>
<ol>
<li>N&#x2F;2 （N为任意大于 2 的自然数），得到商</li>
<li>步骤一的商继续除以 2，直到商不能被 2 整除</li>
<li>被除数加一，比较平方数是否小于被除数（若小于，则所得商继续除以 3，不能整除，则除以 5）</li>
<li><strong>分层循环</strong>，当除数的平方大于等于被除数时退出循环，此时 N 为最大质因数。一层判断除数的平方是否小于被除数，另一层判断被除数是否可以整除除数</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>整体思路并没有问题，但是由于题目中给定数值已经超过了一般的执行范围，总是报错 <strong>stackoverflow</strong>，并未计算到最终结果，或许可以考虑用一台性能更好的机器测试下</p>
<p>该 C++ 版本代码编译速度很快，供参考</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>		INT;</span><br><span class="line"><span class="keyword">typedef</span>	<span class="type">char</span>	CHAR;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span>	VOID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span>	DOUBLE;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT	printf</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DPRINT	printf</span></span><br><span class="line"> </span><br><span class="line"><span class="function">DOUBLE <span class="title">MaxPrimeFactor</span><span class="params">(DOUBLE n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DOUBLE i;</span><br><span class="line">	DOUBLE tem;</span><br><span class="line">	DOUBLE max;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span>(n - <span class="number">1.99999999999999</span> &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>())</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line"> </span><br><span class="line">	max = n;</span><br><span class="line"> </span><br><span class="line">	tem = n / <span class="number">2.0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">fabs</span>(tem - (<span class="built_in">floor</span>(tem))) &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">DPRINT</span>(<span class="string">&quot;prime factor is：%lf\n&quot;</span>, <span class="number">2.0</span>);</span><br><span class="line">		</span><br><span class="line">		n = tem;</span><br><span class="line">		tem = n / <span class="number">2.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(n<span class="number">-1.0</span>) &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>())</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2.0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">3.0</span>; i&lt;=max; i+=<span class="number">2.0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(n-i) &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DPRINT</span>(<span class="string">&quot;prime factor is：%lf\n&quot;</span>, i);</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		tem = n / i;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">fabs</span>(tem - (<span class="built_in">floor</span>(tem)) &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>()))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DPRINT</span>(<span class="string">&quot;prime factor is：%lf\n&quot;</span>, i);</span><br><span class="line">			</span><br><span class="line">			n = tem;</span><br><span class="line">			tem = n / i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(n<span class="number">-1.0</span>) &lt; numeric_limits&lt;DOUBLE&gt;::<span class="built_in">epsilon</span>())</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">INT <span class="title">main</span><span class="params">(INT argc, CHAR *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PRINT</span>(<span class="string">&quot;input num:\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">		DOUBLE n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;n);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span>(n &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">		DOUBLE res = <span class="built_in">MaxPrimeFactor</span>(n);</span><br><span class="line">		<span class="built_in">PRINT</span>(<span class="string">&quot;The largest prime factor is：%lf\n&quot;</span>, res);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：6857</p>
</blockquote>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0ZXVsZXIubmV0L292ZXJ2aWV3PTAwMw==">Find the largest prime factor of a composite number<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 4 题】最大回文数乘积 Largest palindrome product</title>
    <url>/2022/04/17/projecteuler004/</url>
    <content><![CDATA[<h1 id="Problem-4-Largest-palindrome-product"><a href="#Problem-4-Largest-palindrome-product" class="headerlink" title="Problem 4 Largest palindrome product"></a>Problem 4 Largest palindrome product</h1><blockquote>
<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 &#x3D; 91 × 99.<br>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-4-最大回文数乘积"><a href="#问题-4-最大回文数乘积" class="headerlink" title="问题 4 最大回文数乘积"></a>问题 4 最大回文数乘积</h1><blockquote>
<p>回文数的两种读法都是一样的。由两个 2 位数字的乘积构成的最大回文数是 9009 &#x3D; 91 × 99。<br>找出由两个 3 位数字的乘积构成的最大回文数。</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p><strong>回文数</strong>就是一个从左往右读和从右往左读都是一样的数字，例如数字：<code>9009</code>、<code>101</code></p>
<p>其实这道题没有什么更好的技巧，<strong>暴力可解</strong></p>
<p><img src="https://img-blog.csdnimg.cn/3067d29eb80e4c1a838db0e69302fc54.png"></p>
<p>解题步骤：</p>
<ol>
<li>依次枚举所有的三位数</li>
<li>计算它们的乘积</li>
<li>筛选所有乘积中是<strong>回文数</strong>的数字：回文乘积</li>
<li>找到所有<strong>回文乘积</strong>中的最大值，即所求</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-08 10:07:23</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-08 10:26:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123; <span class="comment">//判断乘积是否为回文数</span></span><br><span class="line">    <span class="type">int</span> temp = a, b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        b = b * <span class="number">10</span> + temp % <span class="number">10</span>; <span class="comment">// 数字反转(数位截取知识点),存到 b 中</span></span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a == b; <span class="comment">//若是回文数，返回 true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i ++) <span class="comment">// 仅检查100-999之间的数(保证三位数)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; <span class="number">1000</span>; j ++)&#123; <span class="comment">// 双层循环保证每个三位数都做了乘积</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(i*j)) </span><br><span class="line">                ans = <span class="built_in">max</span>(ans, i*j);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>judge() 判断数字是否为回文数时，用到了<strong>数位截取</strong>，和 2021 年蓝桥杯省赛 C++ 组 B 题有类似思想，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjM5NTc2NjM=">详情参考<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>答案：906609</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 5 题】最小公倍数 Smallest multiple</title>
    <url>/2022/04/17/projecteuler005/</url>
    <content><![CDATA[<h1 id="Problem-5-Smallest-multiple"><a href="#Problem-5-Smallest-multiple" class="headerlink" title="Problem 5 Smallest multiple"></a>Problem 5 Smallest multiple</h1><blockquote>
<p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.<br>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-5-最小公倍数"><a href="#问题-5-最小公倍数" class="headerlink" title="问题 5 最小公倍数"></a>问题 5 最小公倍数</h1><blockquote>
<p>2520 是可以除以 1 到 10 的每个数字而没有任何余数的最小数字。<br>能被 1 到 20 的所有数整除的最小正数是多少？</p>
</blockquote>
<h1 id="理论要点"><a href="#理论要点" class="headerlink" title="理论要点"></a>理论要点</h1><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>引用下百科的解释：</p>
<blockquote>
<p>两个或多个整数公有的倍数叫做它们的公倍数，其中除 0 以外最小的一个公倍数就叫做这几个整数的最小公倍数<br>整数 $a,b$ 的最小公倍数记为 $[a,b]$ ，同样的， $a,b,c$ 的最小公倍数记为 $[a,b,c]$ ，多个整数的最小公倍数也有同样的记号</p>
</blockquote>
<p>那如何计算<strong>最小公倍数</strong>呢?</p>
<p>首先，把这几个数的<strong>质因数</strong>写出来，最小公倍数等于它们所有的质因数的乘积（如果有几个质因数相同，则比较两数中哪个数有该质因数的个数较多，乘较多的次数）</p>
<p>例如：</p>
<p><img src="https://img-blog.csdnimg.cn/19841814572a41269d25684939638df8.png"></p>
<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><blockquote>
<p>最大公约数，$a,b$ 的最大公约数记为 $(a,b)$</p>
</blockquote>
<p>即：短除寻找公因数数，直到找不出公因数，左侧公因数乘积即为最大公约数</p>
<p><img src="https://img-blog.csdnimg.cn/45999a3f105e4eeb981369ebfca05721.png"></p>
<h2 id="最大公约数和最小公倍数的关系"><a href="#最大公约数和最小公倍数的关系" class="headerlink" title="最大公约数和最小公倍数的关系"></a>最大公约数和最小公倍数的关系</h2><blockquote>
<p>两个数的乘积等于这两个数的最大公约数与最小公倍数的乘积</p>
</blockquote>
<p>若有两数 $a,b$，它们的最大公约数是 $p$，最小公倍数是 $q$</p>
<p>那么</p>
<p>$$<br>\large a×b&#x3D;p×q<br>$$</p>
<p>该公式可改写为</p>
<p>$$<br>\large a×b&#x3D;gcd\left (a,b \right)×q<br>$$</p>
<p>那么，我们给出最小公倍数的计算公式</p>
<p>$$<br>\large lcm(a,b)&#x3D;\frac{ab}{gcd(a,b)}&#x3D;q<br>$$</p>
<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><blockquote>
<p>又称<strong>辗转相除法</strong>，用于计算两个非负整数 $a,b$ 的最大公约数</p>
</blockquote>
<ul>
<li>用较小数除较大数</li>
<li>再余数（第一余数）去除除数</li>
<li>再用出现的余数（第二余数）去除第一余数</li>
<li>迭代，直到最后余数是0为止。若要求两个数的最大公约数，则最后的除数就是这两个数的最大公约数</li>
</ul>
<p>计算公式</p>
<p>$$<br>\large gcd\left (a,b \right)<br>$$</p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>根据欧几里得算法计算公式，计算得到两数最大公约数，再由最小公倍数计算公式得出最小公倍数。然后让两个数的最小公倍数和第三个数计算最小公倍数，迭代求算即可</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-11 14:08:31</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-11 14:59:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> variable; <span class="comment">// 定义类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="function">variable <span class="title">gcd</span><span class="params">(variable a, variable b)</span> <span class="comment">// gcd 实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b&gt;<span class="number">0</span> ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    variable ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans * i / <span class="built_in">gcd</span>(ans, i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：232792560</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 6 题】和的平方与平方的和差值 Sum square difference</title>
    <url>/2022/04/17/projecteuler006/</url>
    <content><![CDATA[<h1 id="Problem-6-Sum-square-difference"><a href="#Problem-6-Sum-square-difference" class="headerlink" title="Problem 6 Sum square difference"></a>Problem 6 Sum square difference</h1><blockquote>
<p>The sum of the squares of the first ten natural numbers is：</p>
</blockquote>
<p>$$<br>\large 1^2+2^2+3^2+\cdots+10^2&#x3D;385<br>$$</p>
<blockquote>
<p>The square of the sum of the first ten natural numbers is：</p>
</blockquote>
<p>$$<br>\large (1+2+3+\cdots+10)^2&#x3D;55^2&#x3D;3025<br>$$</p>
<blockquote>
<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is：</p>
</blockquote>
<p>$$<br>\large 3025 - 385 &#x3D; 2640<br>$$</p>
<blockquote>
<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-6-和的平方与平方的和差值"><a href="#问题-6-和的平方与平方的和差值" class="headerlink" title="问题 6 和的平方与平方的和差值"></a>问题 6 和的平方与平方的和差值</h1><blockquote>
<p>前十个自然数的<strong>平方的和</strong>为：</p>
</blockquote>
<p>$$<br>\large 1^2+2^2+3^2+\cdots+10^2&#x3D;385<br>$$</p>
<blockquote>
<p>而前十个自然数<strong>和的平方</strong>为：</p>
</blockquote>
<p>$$<br>\large (1+2+3+\cdots+10)^2&#x3D;55^2&#x3D;3025<br>$$</p>
<blockquote>
<p>因此，前十个自然数的平方和与和的平方之间的差是：</p>
</blockquote>
<p>$$<br>\large 3025 - 385 &#x3D; 2640<br>$$</p>
<blockquote>
<p>求前一百个自然数的平方和与和的平方之间的差</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>自然数的<strong>平方的和</strong>通项公式</p>
<p>$$<br>\large S(1)&#x3D;\frac{n(n+1)(2n+1)}{6}<br>$$</p>
<p>自然数<strong>和的平方</strong>通项公式</p>
<p>$$<br>\large S(2)&#x3D;\left ( \frac{n(n+1)}{2} \right )^2<br>$$</p>
<p>则和的平方与平方和差值通项公式为</p>
<p>$$<br>\large S(n)&#x3D;S(2)-S(1)&#x3D;\left ( \frac{n(n+1)}{2} \right )^2-\frac{n(n+1)(2n+1)}{6}<br>$$</p>
<p>$$<br>\large &#x3D;\frac{n(n-1)(n+1)(3n+2)}{12}<br>$$</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-12 10:48:07</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-12 11:16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ans = n * (n - <span class="number">1</span>) * (n + <span class="number">1</span>) * (<span class="number">3</span> * n + <span class="number">2</span>) / <span class="number">12</span>;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：25164150</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 7 题】第 10001 个素数 10001st prime</title>
    <url>/2022/04/17/projecteuler007/</url>
    <content><![CDATA[<h1 id="Problem-7-10001st-prime"><a href="#Problem-7-10001st-prime" class="headerlink" title="Problem 7 10001st prime"></a>Problem 7 10001st prime</h1><blockquote>
<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.<br>What is the 10 001st prime number?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-7-第-10001-个素数"><a href="#问题-7-第-10001-个素数" class="headerlink" title="问题 7 第 10001 个素数"></a>问题 7 第 10001 个素数</h1><blockquote>
<p>通过列出前六个素数：2、3、5、7、11 和 13，我们可以看到第 6 个素数是 13。<br>第10001个质数是多少？</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>读完题目，发现题目还是比较容易的。枚举出范围内所有的素数，加入循环判断，等到判断条件是第 100001 个质数时输出就好</p>
<h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p>另外需要知道质数的概念</p>
<blockquote>
<p>质数（又称素数），指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数</p>
</blockquote>
<p>下面介绍一种比较容易理解的，在程序中判断数字是否为质数的方法</p>
<p>因为，一个数如果可以进行因数分解，那么分解后，得到的两个数一定是<strong>一个小于等于 $sqrt(n)$，一个大于等于 $sqrt(n)$</strong></p>
<p>所以，我们并不需要从 2 一直判断到 $n-1$ ，而只需遍历到 $sqrt(n)$ 即可。既然在左侧都找不到因数，那么右侧一定不存在咯</p>
<p>贴下实现的代码，帮助理解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-13 16:25:25</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-13 16:53:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">// 标记当前是第几个素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i; <span class="comment">// 注意考虑数据范围大小</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; flag &lt; <span class="number">10001</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(i)) <span class="comment">// 只有该数是素数,标记才自增 1</span></span><br><span class="line">            flag++;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：104743</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 8 题】序列中最大的乘积 Largest product in a series</title>
    <url>/2022/04/17/projecteuler008/</url>
    <content><![CDATA[<h1 id="Problem-8-Largest-product-in-a-series"><a href="#Problem-8-Largest-product-in-a-series" class="headerlink" title="Problem 8 Largest product in a series"></a>Problem 8 Largest product in a series</h1><blockquote>
<p>The four adjacent digits in the 1000-digit number that have the greatest product are $9×9×8×9&#x3D;5832$.</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/54776efb4d0d42f9b42e1af38678c9a4.png"></p>
<blockquote>
<p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-8-序列中最大的乘积"><a href="#问题-8-序列中最大的乘积" class="headerlink" title="问题 8 序列中最大的乘积"></a>问题 8 序列中最大的乘积</h1><blockquote>
<p>1000 位数字中乘积最大的相邻四个数字是 $9×9×8×9&#x3D;5832$。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/54776efb4d0d42f9b42e1af38678c9a4.png"></p>
<blockquote>
<p>找出 1000 位数字中乘积最大的 13 个相邻数字。这个数字的乘积是什么？</p>
</blockquote>
<p><strong>数字文件</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">73167176531330624919225119674426574742355349194934</span><br><span class="line">96983520312774506326239578318016984801869478851843</span><br><span class="line">85861560789112949495459501737958331952853208805511</span><br><span class="line">12540698747158523863050715693290963295227443043557</span><br><span class="line">66896648950445244523161731856403098711121722383113</span><br><span class="line">62229893423380308135336276614282806444486645238749</span><br><span class="line">30358907296290491560440772390713810515859307960866</span><br><span class="line">70172427121883998797908792274921901699720888093776</span><br><span class="line">65727333001053367881220235421809751254540594752243</span><br><span class="line">52584907711670556013604839586446706324415722155397</span><br><span class="line">53697817977846174064955149290862569321978468622482</span><br><span class="line">83972241375657056057490261407972968652414535100474</span><br><span class="line">82166370484403199890008895243450658541227588666881</span><br><span class="line">16427171479924442928230863465674813919123162824586</span><br><span class="line">17866458359124566529476545682848912883142607690042</span><br><span class="line">24219022671055626321111109370544217506941658960408</span><br><span class="line">07198403850962455444362981230987879927244284909188</span><br><span class="line">84580156166097919133875499200524063689912560717606</span><br><span class="line">05886116467109405077541002256983155200055935729725</span><br><span class="line">71636269561882670428252483600823257530420752963450</span><br></pre></td></tr></table></figure>

<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>本题用 Python 效率会高一些，且思路更简单</p>
<p>我们将所有数字存放到本地的 txt 文件中，使用 Python 导入程序并存放在一个 List 中，此时，从 List 的第 0 位一直到最后，求出十三位数字的乘积并存方到另一个 List 中（结果集），在结果集中找出最大值并输出</p>
<p>下面附上两段代码供参考</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: chenwr_727</span></span><br><span class="line"><span class="string">Date: 2016-12-19 21:47:36</span></span><br><span class="line"><span class="string">LastEditTime: 2022-04-15 17:29:02</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">digit_str = <span class="string">&#x27;73167176531330624919225119674426574742355349194934&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;96983520312774506326239578318016984801869478851843&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;85861560789112949495459501737958331952853208805511&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;12540698747158523863050715693290963295227443043557&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;66896648950445244523161731856403098711121722383113&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;62229893423380308135336276614282806444486645238749&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;30358907296290491560440772390713810515859307960866&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;70172427121883998797908792274921901699720888093776&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;65727333001053367881220235421809751254540594752243&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;52584907711670556013604839586446706324415722155397&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;53697817977846174064955149290862569321978468622482&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;83972241375657056057490261407972968652414535100474&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;82166370484403199890008895243450658541227588666881&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;16427171479924442928230863465674813919123162824586&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;17866458359124566529476545682848912883142607690042&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;24219022671055626321111109370544217506941658960408&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;07198403850962455444362981230987879927244284909188&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;84580156166097919133875499200524063689912560717606&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;05886116467109405077541002256983155200055935729725&#x27;</span> + \</span><br><span class="line">    <span class="string">&#x27;71636269561882670428252483600823257530420752963450&#x27;</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">n = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">prod_12 = <span class="number">0</span></span><br><span class="line">prod_max = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i + n &lt; <span class="built_in">len</span>(digit_str):</span><br><span class="line">    <span class="keyword">if</span> prod_12 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> digit_str[i: i+n]:</span><br><span class="line">            prod_ = reduce(<span class="keyword">lambda</span> x,y: <span class="built_in">int</span>(x) * <span class="built_in">int</span>(y), digit_str[i: i+n])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = digit_str.index(<span class="string">&#x27;0&#x27;</span>, i) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> digit_str[i+n-<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            prod_12 = <span class="number">0</span></span><br><span class="line">            i += n</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prod_ = prod_12 * <span class="built_in">int</span>(digit_str[i+n-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> prod_ &gt; prod_max:</span><br><span class="line">        prod_max = prod_</span><br><span class="line">    prod_12 = prod_ / <span class="built_in">int</span>(digit_str[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(prod_max)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: metaquant</span></span><br><span class="line"><span class="string">Date: 2016-12-19 21:47:36</span></span><br><span class="line"><span class="string">LastEditTime: 2022-04-15 17:29:02</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your file location&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            data = data + line.strip()</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">988</span>):</span><br><span class="line">        sub = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> data[i:i+<span class="number">13</span>]]</span><br><span class="line">        prod = reduce(<span class="keyword">lambda</span> x,y:x*y, sub)</span><br><span class="line">        res.append(prod)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(res)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：23514624000</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 9 题】特殊的毕达哥拉斯三元数 Special Pythagorean triplet</title>
    <url>/2022/04/17/projecteuler009/</url>
    <content><![CDATA[<h1 id="Problem-9-Special-Pythagorean-triplet"><a href="#Problem-9-Special-Pythagorean-triplet" class="headerlink" title="Problem 9 Special Pythagorean triplet"></a>Problem 9 Special Pythagorean triplet</h1><blockquote>
<p>A Pythagorean triplet is a set of three natural numbers, $a &lt; b &lt; c$, for which,</p>
</blockquote>
<p>$$<br>\large a^2+b^2&#x3D;c^2<br>$$</p>
<blockquote>
<p>For example,</p>
</blockquote>
<p>$$<br>\large 3^2+4^2&#x3D;9+16&#x3D;25&#x3D;5^2<br>$$</p>
<blockquote>
<p>There exists exactly one Pythagorean triplet for which $a + b + c &#x3D; 1000$.<br>Find the product $abc$.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-9-特殊的毕达哥拉斯三元数"><a href="#问题-9-特殊的毕达哥拉斯三元数" class="headerlink" title="问题 9 特殊的毕达哥拉斯三元数"></a>问题 9 特殊的毕达哥拉斯三元数</h1><blockquote>
<p>毕达哥拉斯三元组是一组三个自然数的集合，且 $a &lt; b &lt; c$，其中</p>
</blockquote>
<p>$$<br>\large a^2+b^2&#x3D;c^2<br>$$</p>
<blockquote>
<p>例如：</p>
</blockquote>
<p>$$<br>\large 3^2+4^2&#x3D;9+16&#x3D;25&#x3D;5^2<br>$$</p>
<blockquote>
<p>恰好存在一个 $a + b + c &#x3D; 1000$ 的毕达哥拉斯三元组，求积 $abc$</p>
</blockquote>
<h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><p>题目中提到了毕达哥拉斯三元组，我们首先理解下其数学定义</p>
<h2 id="毕达哥拉斯定理"><a href="#毕达哥拉斯定理" class="headerlink" title="毕达哥拉斯定理"></a>毕达哥拉斯定理</h2><blockquote>
<p>在一个边长为 $a、b、c$ 的直角三角形中，$a²+b²&#x3D;c²$。理想的情况是 $a、b、c$ 均为整数，则称为<strong>毕达哥拉斯三元数组</strong></p>
</blockquote>
<p>如题目中给出的例子，$3、4、5$ 就符合条件</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题目叙述，我们要满足 $a &lt; b &lt; c$ 和 $a²+b²&#x3D;c²$ 的条件</p>
<p>那么只需要分别定义三个变量 $a、b、c$，分别给它们赋值为 $1、2、3$ 并符合比较关系，用来满足第一个条件</p>
<p>然后从变量 $c$ 开始，三层循环，最后一层中去判断 $a + b + c &#x3D; 1000$ 和 $a²+b²&#x3D;c²$ 条件</p>
<p>如果满足，则输出此时的乘积即为所求</p>
<p>这并不是唯一的解决方案，但是是我认为比较简单，最容易理解的一种</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-17 13:04:36</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-17 13:24:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">3</span>; c &lt; <span class="number">1000</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">2</span>; b &lt; c; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span>; a &lt; b; a++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a + b + c == <span class="number">1000</span>) &amp;&amp; (a * a + b * b == c * c))</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; a * b * c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：31875000</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 10 题】 质数之和 Summation of primes</title>
    <url>/2022/04/17/projecteuler010/</url>
    <content><![CDATA[<h1 id="Problem-10-Summation-of-primes"><a href="#Problem-10-Summation-of-primes" class="headerlink" title="Problem 10 Summation of primes"></a>Problem 10 Summation of primes</h1><blockquote>
<p>The sum of the primes below $10$ is </p>
</blockquote>
<p>$$<br>\large 2 + 3 + 5 + 7 &#x3D; 17<br>$$</p>
<blockquote>
<p>Find the sum of all the primes below two million.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-10-质数之和"><a href="#问题-10-质数之和" class="headerlink" title="问题 10 质数之和"></a>问题 10 质数之和</h1><blockquote>
<p>$10$ 以下的质数之和为</p>
</blockquote>
<p>$$<br>\large 2 + 3 + 5 + 7 &#x3D; 17<br>$$</p>
<blockquote>
<p>求两百万以下的所有质数之和</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>首先单看题目知识点，涉及到<strong>素数（质数）</strong>，和<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjQxNTA3OTE=">第七题 10001st prime<i class="fa fa-external-link-alt"></i></span>一定会有类似之处</p>
<p>我们采用最直接的方法求解（暴力），枚举范围内的所有质数，然后求和</p>
<p>注意，像这样的解决方案并非最佳，只适用于<strong>小规模</strong>数据，规模的调整对于对应算法的要求很高</p>
<p>比如说，这个题目你可以用<strong>暴力枚举</strong>解决它。但是，如果我把数据量级调整到<strong>亿</strong>，这种方法就未必可以使用，需要更高级的算法来解决，具体请参考文末代码段</p>
<p>总之，大家要根据实际情况采用最优的方案来解决对应的问题，没有什么办法可以一劳永逸，适用于所有情况</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-17 15:33:41</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-17 16:04:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>; <span class="comment">// 注意数据范围,考虑溢出情况</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">2000000</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(i))</span><br><span class="line">            sum += i;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：142913828922</p>
</blockquote>
<hr>
<h1 id="埃拉托斯特尼筛"><a href="#埃拉托斯特尼筛" class="headerlink" title="埃拉托斯特尼筛"></a>埃拉托斯特尼筛</h1><blockquote>
<p>原理：从 $2$ 开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列，此筛法是列出所有小素数最有效的方法之一</p>
</blockquote>
<p>这里使用<strong>埃氏筛法</strong>解决<strong>亿级</strong>数据量级问题，实现代码段如下，供参考学习</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-17 15:33:41</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-17 20:33:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m = (<span class="type">int</span>)<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++) <span class="keyword">if</span>(!vis[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i * i; j &lt;= n; j += i)  vis[j] = <span class="literal">true</span>;</span><br><span class="line">        ret += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m+<span class="number">1</span>;i &lt;= n;i++)  <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        ret += i;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sieve</span>(<span class="number">1000000000</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多关于本题的解决方案，详见 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5NTgwNDQ4">求十亿内所有质数的和，怎么做最快?<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 11 题】 网格中的最大乘积 Largest product in a grid</title>
    <url>/2022/04/18/projecteuler011/</url>
    <content><![CDATA[<h1 id="Problem-11-Largest-product-in-a-grid"><a href="#Problem-11-Largest-product-in-a-grid" class="headerlink" title="Problem 11 Largest product in a grid"></a>Problem 11 Largest product in a grid</h1><blockquote>
<p>In the $20×20$ grid below, four numbers along a diagonal line have been marked in red.</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/7f9101f5a97042fa8f04056590f60fcf.png"></p>
<blockquote>
<p>The product of these numbers is $26 × 63 × 78 × 14 &#x3D; 1788696$.<br>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the $20×20$ grid?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-11-网格中的最大乘积"><a href="#问题-11-网格中的最大乘积" class="headerlink" title="问题 11 网格中的最大乘积"></a>问题 11 网格中的最大乘积</h1><blockquote>
<p>在下面的 $20×20$ 网格中，沿对角线的四个数字被标记为红色。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/7f9101f5a97042fa8f04056590f60fcf.png"></p>
<blockquote>
<p>这些数字的乘积是 $26 × 63 × 78 × 14 &#x3D; 1788696$。<br>在 $20×20$ 的网格中，沿相同方向（上、下、左、右或对角线）的四个相邻数字的最大乘积是多少？</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>将数据表中的数字存入到二维数组中，依次计算相同方向的四个相邻数字乘积并暂存</p>
<p>比较所有乘积 ，找出最大值即所求</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-18 14:54:44</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-18 15:15:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> iMaxNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 分别表示四个相邻数字</span></span><br><span class="line">    <span class="type">int</span> n1, n2, n3, n4;</span><br><span class="line">    <span class="comment">// 初始化二维数组,存入数据表</span></span><br><span class="line">    <span class="type">int</span> array[<span class="number">400</span>] = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">97</span>, <span class="number">38</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">78</span>, <span class="number">52</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">77</span>, <span class="number">91</span>, <span class="number">8</span>,</span><br><span class="line">                      <span class="number">49</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">40</span>, <span class="number">17</span>, <span class="number">81</span>, <span class="number">18</span>, <span class="number">57</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">98</span>, <span class="number">43</span>, <span class="number">69</span>, <span class="number">48</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">62</span>, <span class="number">00</span>,</span><br><span class="line">                      <span class="number">81</span>, <span class="number">49</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">55</span>, <span class="number">79</span>, <span class="number">14</span>, <span class="number">29</span>, <span class="number">93</span>, <span class="number">71</span>, <span class="number">40</span>, <span class="number">67</span>, <span class="number">53</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">49</span>, <span class="number">13</span>, <span class="number">36</span>, <span class="number">65</span>,</span><br><span class="line">                      <span class="number">52</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">60</span>, <span class="number">11</span>, <span class="number">42</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">71</span>, <span class="number">37</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">91</span>,</span><br><span class="line">                      <span class="number">22</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">71</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">92</span>, <span class="number">36</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">66</span>, <span class="number">33</span>, <span class="number">13</span>, <span class="number">80</span>,</span><br><span class="line">                      <span class="number">24</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">60</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">33</span>, <span class="number">53</span>, <span class="number">78</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">50</span>,</span><br><span class="line">                      <span class="number">32</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">28</span>, <span class="number">64</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">67</span>, <span class="number">59</span>, <span class="number">54</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">18</span>, <span class="number">38</span>, <span class="number">64</span>, <span class="number">70</span>,</span><br><span class="line">                      <span class="number">67</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">68</span>, <span class="number">2</span>, <span class="number">62</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">95</span>, <span class="number">63</span>, <span class="number">94</span>, <span class="number">39</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">66</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">21</span>,</span><br><span class="line">                      <span class="number">24</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">73</span>, <span class="number">99</span>, <span class="number">26</span>, <span class="number">97</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">78</span>, <span class="number">96</span>, <span class="number">83</span>, <span class="number">14</span>, <span class="number">88</span>, <span class="number">34</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">72</span>,</span><br><span class="line">                      <span class="number">21</span>, <span class="number">36</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">75</span>, <span class="number">00</span>, <span class="number">76</span>, <span class="number">44</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">35</span>, <span class="number">14</span>, <span class="number">00</span>, <span class="number">61</span>, <span class="number">33</span>, <span class="number">97</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">95</span>,</span><br><span class="line">                      <span class="number">78</span>, <span class="number">17</span>, <span class="number">53</span>, <span class="number">28</span>, <span class="number">22</span>, <span class="number">75</span>, <span class="number">31</span>, <span class="number">67</span>, <span class="number">15</span>, <span class="number">94</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">92</span>,</span><br><span class="line">                      <span class="number">16</span>, <span class="number">39</span>, <span class="number">5</span>, <span class="number">42</span>, <span class="number">96</span>, <span class="number">35</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">88</span>, <span class="number">24</span>, <span class="number">00</span>, <span class="number">17</span>, <span class="number">54</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">85</span>, <span class="number">57</span>,</span><br><span class="line">                      <span class="number">86</span>, <span class="number">56</span>, <span class="number">00</span>, <span class="number">48</span>, <span class="number">35</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">44</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">58</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">58</span>,</span><br><span class="line">                      <span class="number">19</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">68</span>, <span class="number">5</span>, <span class="number">94</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">28</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">13</span>, <span class="number">86</span>, <span class="number">52</span>, <span class="number">17</span>, <span class="number">77</span>, <span class="number">4</span>, <span class="number">89</span>, <span class="number">55</span>, <span class="number">40</span>,</span><br><span class="line">                      <span class="number">4</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">35</span>, <span class="number">99</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">97</span>, <span class="number">57</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">27</span>, <span class="number">98</span>, <span class="number">66</span>,</span><br><span class="line">                      <span class="number">88</span>, <span class="number">36</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">20</span>, <span class="number">72</span>, <span class="number">3</span>, <span class="number">46</span>, <span class="number">33</span>, <span class="number">67</span>, <span class="number">46</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">63</span>, <span class="number">93</span>, <span class="number">53</span>, <span class="number">69</span>,</span><br><span class="line">                      <span class="number">4</span>, <span class="number">42</span>, <span class="number">16</span>, <span class="number">73</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">39</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">94</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">8</span>, <span class="number">46</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">62</span>, <span class="number">76</span>, <span class="number">36</span>,</span><br><span class="line">                      <span class="number">20</span>, <span class="number">69</span>, <span class="number">36</span>, <span class="number">41</span>, <span class="number">72</span>, <span class="number">30</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">99</span>, <span class="number">69</span>, <span class="number">82</span>, <span class="number">67</span>, <span class="number">59</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">16</span>,</span><br><span class="line">                      <span class="number">20</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">78</span>, <span class="number">31</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">74</span>, <span class="number">31</span>, <span class="number">49</span>, <span class="number">71</span>, <span class="number">48</span>, <span class="number">86</span>, <span class="number">81</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">57</span>, <span class="number">5</span>, <span class="number">54</span>,</span><br><span class="line">                      <span class="number">1</span>, <span class="number">70</span>, <span class="number">54</span>, <span class="number">71</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">16</span>, <span class="number">92</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">1</span>, <span class="number">89</span>, <span class="number">19</span>, <span class="number">67</span>, <span class="number">48</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = array[i * <span class="number">20</span> + j] * array[i * <span class="number">20</span> + j + <span class="number">1</span>] * array[i * <span class="number">20</span> + j + <span class="number">2</span>] * array[i * <span class="number">20</span> + j + <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (a &gt; iMaxNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                iMaxNumber = a;</span><br><span class="line">                n1 = array[i * <span class="number">20</span> + j];</span><br><span class="line">                n2 = array[i * <span class="number">20</span> + j + <span class="number">1</span>];</span><br><span class="line">                n3 = array[i * <span class="number">20</span> + j + <span class="number">2</span>];</span><br><span class="line">                n4 = array[i * <span class="number">20</span> + j + <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = array[j * <span class="number">20</span> + i] * array[(j + <span class="number">1</span>) * <span class="number">20</span> + i] * array[(j + <span class="number">2</span>) * <span class="number">20</span> + i] * array[(j + <span class="number">3</span>) * <span class="number">20</span> + i];</span><br><span class="line">            <span class="keyword">if</span> (a &gt; iMaxNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                iMaxNumber = a;</span><br><span class="line">                n1 = array[j * <span class="number">20</span> + i];</span><br><span class="line">                n2 = array[(j + <span class="number">1</span>) * <span class="number">20</span> + i];</span><br><span class="line">                n3 = array[(j + <span class="number">2</span>) * <span class="number">20</span> + i];</span><br><span class="line">                n4 = array[(j + <span class="number">3</span>) * <span class="number">20</span> + i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= i - <span class="number">3</span>; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            a = array[i - x + <span class="number">20</span> * x] * array[i - x - <span class="number">1</span> + <span class="number">20</span> * (x + <span class="number">1</span>)] * array[i - x - <span class="number">2</span> + <span class="number">20</span> * (x + <span class="number">2</span>)] * array[i - x - <span class="number">3</span> + <span class="number">20</span> * (x + <span class="number">3</span>)];</span><br><span class="line">            <span class="keyword">if</span> (a &gt; iMaxNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                iMaxNumber = a;</span><br><span class="line">                n1 = array[i - x + <span class="number">20</span> * x];</span><br><span class="line">                n2 = array[i - x - <span class="number">1</span> + <span class="number">20</span> * (x + <span class="number">1</span>)];</span><br><span class="line">                n3 = array[i - x - <span class="number">2</span> + <span class="number">20</span> * (x + <span class="number">2</span>)];</span><br><span class="line">                n4 = array[i - x - <span class="number">3</span> + <span class="number">20</span> * (x + <span class="number">3</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">16</span> - i; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            a = array[i + x + <span class="number">20</span> * x] * array[i + x + <span class="number">1</span> + <span class="number">20</span> * (x + <span class="number">1</span>)] * array[i + x + <span class="number">2</span> + <span class="number">20</span> * (x + <span class="number">2</span>)] * array[i + x + <span class="number">3</span> + <span class="number">20</span> * (x + <span class="number">3</span>)];</span><br><span class="line">            <span class="keyword">if</span> (a &gt; iMaxNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                iMaxNumber = a;</span><br><span class="line">                n1 = array[i + x + <span class="number">20</span> * x];</span><br><span class="line">                n2 = array[i + x + <span class="number">1</span> + <span class="number">20</span> * (x + <span class="number">1</span>)];</span><br><span class="line">                n3 = array[i + x + <span class="number">2</span> + <span class="number">20</span> * (x + <span class="number">2</span>)];</span><br><span class="line">                n4 = array[i + x + <span class="number">3</span> + <span class="number">20</span> * (x + <span class="number">3</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ans=%d. a = %d, b = %d, c = %d , d = %d.\n&quot;</span>, iMaxNumber, n1, n2, n3, n4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：70600674</p>
</blockquote>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 12 题】 高度可除的三角数 Highly divisible triangular number</title>
    <url>/2022/04/21/projecteuler012/</url>
    <content><![CDATA[<h1 id="Problem-12-Highly-divisible-triangular-number"><a href="#Problem-12-Highly-divisible-triangular-number" class="headerlink" title="Problem 12 Highly divisible triangular number"></a>Problem 12 Highly divisible triangular number</h1><blockquote>
<p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 &#x3D; 28$. The first ten terms would be:</p>
</blockquote>
<p>$$<br>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …<br>$$</p>
<blockquote>
<p>Let us list the factors of the first seven triangle numbers:</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/cf3be2c00a464bcf84f265b57f648408.png"></center>


<blockquote>
<p>We can see that $28$ is the first triangle number to have over five divisors.<br>What is the value of the first triangle number to have over five hundred divisors?</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-12-高度可除的三角数"><a href="#问题-12-高度可除的三角数" class="headerlink" title="问题 12 高度可除的三角数"></a>问题 12 高度可除的三角数</h1><blockquote>
<p>三角数由<strong>依次排列的自然数的和</strong>生成。所以第 $7$ 个三角数是 $1 + 2 + 3 + 4 + 5 + 6 + 7 &#x3D; 28$。前十项是：</p>
</blockquote>
<p>$$<br>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …<br>$$</p>
<blockquote>
<p>让我们列出前七个三角数的因数：</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/cf3be2c00a464bcf84f265b57f648408.png"></center>

<blockquote>
<p>我们可以看到 $28$ 是第一个有五个以上除数（因子）的三角数。<br>第一个有超过 $500$ 个除数（因子）的三角数的值是多少？</p>
</blockquote>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>拿到题目，我们首先做的要理解清除题目含义，对于从未听过的陌生概念、术语（一般会举例说明），我们也要试着首先理解示例</p>
<p>这里解释下题目中的<strong>三角数</strong>是如何得出的，请看下表计算过程</p>
<table>
<thead>
<tr>
<th>第 x 个</th>
<th>三角数值</th>
<th>计算过程</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>1+2&#x3D;3</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>1+2+3&#x3D;6</td>
</tr>
<tr>
<td>4</td>
<td>10</td>
<td>1+2+3+4&#x3D;10</td>
</tr>
<tr>
<td>5</td>
<td>15</td>
<td>1+2+3+4+5&#x3D;15</td>
</tr>
<tr>
<td>6</td>
<td>21</td>
<td>1+2+3+4+5+6&#x3D;21</td>
</tr>
<tr>
<td>7</td>
<td>28</td>
<td>1+2+3+4+5+6+7&#x3D;28</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p>依然是老朋友，<strong>暴力枚举</strong>，从 $1$ 开始依次枚举每个数字并<strong>判断它有多少个约数</strong></p>
<p>当约数个数大于 $500$ 时，退出循环并输出该值</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-19 20:58:43</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-19 21:58:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factor</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> <span class="comment">// 计算数字 num 因数个数 , 注意数据范围</span></span></span><br><span class="line"><span class="function"></span>&#123;                     </span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * i == n)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                count += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num += i;              <span class="comment">// 枚举三角数 循环过程可参照末尾注解</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">factor</span>(num) &gt; <span class="number">500</span>) <span class="comment">// 传值给 facto() 返回 num 因数个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; num &lt;&lt; endl; <span class="comment">// 满足条件&quot;第一个有超过 500 个因子&quot;的三角数时,输出 num 值</span></span><br><span class="line">            <span class="keyword">break</span>;               <span class="comment">// 循环结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// num i num+=i; 过程演示</span></span><br><span class="line">  <span class="comment">// 0 1</span></span><br><span class="line">  <span class="comment">// 1 2</span></span><br><span class="line">  <span class="comment">// 3 3</span></span><br><span class="line">  <span class="comment">// 6 4</span></span><br><span class="line">  <span class="comment">// 10 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：76576500</p>
</blockquote>
<hr>
<p>本题在完成三角数的枚举后，最重要的一步是<strong>如何判断一个数约数的个数</strong></p>
<p>从基本思想不断优化，降低算法的时间复杂度，详请参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjQzMjQ3MDM=">快速计算约数的个数——从基础到高级<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 13 题】 大数之和 Large sum</title>
    <url>/2022/04/21/projecteuler013/</url>
    <content><![CDATA[<h1 id="Problem-13-Large-sum"><a href="#Problem-13-Large-sum" class="headerlink" title="Problem 13 Large sum"></a>Problem 13 Large sum</h1><blockquote>
<p>Work out the first ten digits of the sum of the following one-hundred $50$-digit numbers.</p>
</blockquote>
<p><strong>Data file see end</strong></p>
<span id="more"></span>

<h1 id="问题-13-大数之和"><a href="#问题-13-大数之和" class="headerlink" title="问题 13 大数之和"></a>问题 13 大数之和</h1><blockquote>
<p>计算以下 $100$ 个 $50$ 位数字和的前十位数</p>
</blockquote>
<p><strong>数据文件见文末</strong></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>大家看到题目，首先不要被这一堆数字给吓到，觉得它很难，我们仔细阅读下题干，发现并不难，所用知识点都比较容易</p>
<p>将这 $100$ 个 $50$ 位数字写在程序中显得比较冗长，这里我们使用 <code>Python</code> 解决</p>
<p>直接将数据存入 <code>txt</code> 文本文件中，用 <code>Python</code> 打开文件并读取数据</p>
<p>求出总和后将<strong>和</strong>转化为字符串，最后截取前十位，得解</p>
<center><img src="https://img-blog.csdnimg.cn/b790e0cf8f7d43e685b94684fdff6a4c.gif" width=300></center>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: coder-jason</span></span><br><span class="line"><span class="string">Date: 2022-04-20 21:37:16</span></span><br><span class="line"><span class="string">LastEditTime: 2022-04-21 14:20:56 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">Max_num = <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">open</span>(<span class="string">&#x27;ProjectEuler/data/013.txt&#x27;</span>)))</span><br><span class="line">ans = <span class="built_in">str</span>(Max_num)[:<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(ans) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：5537376230</p>
</blockquote>
<p>如果在打开文件时遇到错误 <strong>FileNotFoundError: [Errno 2] No such file or directory</strong>，请<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjQzMjEwNzU=">查看这里<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">37107287533902102798797998220837590246510135740250</span><br><span class="line">46376937677490009712648124896970078050417018260538</span><br><span class="line">74324986199524741059474233309513058123726617309629</span><br><span class="line">91942213363574161572522430563301811072406154908250</span><br><span class="line">23067588207539346171171980310421047513778063246676</span><br><span class="line">89261670696623633820136378418383684178734361726757</span><br><span class="line">28112879812849979408065481931592621691275889832738</span><br><span class="line">44274228917432520321923589422876796487670272189318</span><br><span class="line">47451445736001306439091167216856844588711603153276</span><br><span class="line">70386486105843025439939619828917593665686757934951</span><br><span class="line">62176457141856560629502157223196586755079324193331</span><br><span class="line">64906352462741904929101432445813822663347944758178</span><br><span class="line">92575867718337217661963751590579239728245598838407</span><br><span class="line">58203565325359399008402633568948830189458628227828</span><br><span class="line">80181199384826282014278194139940567587151170094390</span><br><span class="line">35398664372827112653829987240784473053190104293586</span><br><span class="line">86515506006295864861532075273371959191420517255829</span><br><span class="line">71693888707715466499115593487603532921714970056938</span><br><span class="line">54370070576826684624621495650076471787294438377604</span><br><span class="line">53282654108756828443191190634694037855217779295145</span><br><span class="line">36123272525000296071075082563815656710885258350721</span><br><span class="line">45876576172410976447339110607218265236877223636045</span><br><span class="line">17423706905851860660448207621209813287860733969412</span><br><span class="line">81142660418086830619328460811191061556940512689692</span><br><span class="line">51934325451728388641918047049293215058642563049483</span><br><span class="line">62467221648435076201727918039944693004732956340691</span><br><span class="line">15732444386908125794514089057706229429197107928209</span><br><span class="line">55037687525678773091862540744969844508330393682126</span><br><span class="line">18336384825330154686196124348767681297534375946515</span><br><span class="line">80386287592878490201521685554828717201219257766954</span><br><span class="line">78182833757993103614740356856449095527097864797581</span><br><span class="line">16726320100436897842553539920931837441497806860984</span><br><span class="line">48403098129077791799088218795327364475675590848030</span><br><span class="line">87086987551392711854517078544161852424320693150332</span><br><span class="line">59959406895756536782107074926966537676326235447210</span><br><span class="line">69793950679652694742597709739166693763042633987085</span><br><span class="line">41052684708299085211399427365734116182760315001271</span><br><span class="line">65378607361501080857009149939512557028198746004375</span><br><span class="line">35829035317434717326932123578154982629742552737307</span><br><span class="line">94953759765105305946966067683156574377167401875275</span><br><span class="line">88902802571733229619176668713819931811048770190271</span><br><span class="line">25267680276078003013678680992525463401061632866526</span><br><span class="line">36270218540497705585629946580636237993140746255962</span><br><span class="line">24074486908231174977792365466257246923322810917141</span><br><span class="line">91430288197103288597806669760892938638285025333403</span><br><span class="line">34413065578016127815921815005561868836468420090470</span><br><span class="line">23053081172816430487623791969842487255036638784583</span><br><span class="line">11487696932154902810424020138335124462181441773470</span><br><span class="line">63783299490636259666498587618221225225512486764533</span><br><span class="line">67720186971698544312419572409913959008952310058822</span><br><span class="line">95548255300263520781532296796249481641953868218774</span><br><span class="line">76085327132285723110424803456124867697064507995236</span><br><span class="line">37774242535411291684276865538926205024910326572967</span><br><span class="line">23701913275725675285653248258265463092207058596522</span><br><span class="line">29798860272258331913126375147341994889534765745501</span><br><span class="line">18495701454879288984856827726077713721403798879715</span><br><span class="line">38298203783031473527721580348144513491373226651381</span><br><span class="line">34829543829199918180278916522431027392251122869539</span><br><span class="line">40957953066405232632538044100059654939159879593635</span><br><span class="line">29746152185502371307642255121183693803580388584903</span><br><span class="line">41698116222072977186158236678424689157993532961922</span><br><span class="line">62467957194401269043877107275048102390895523597457</span><br><span class="line">23189706772547915061505504953922979530901129967519</span><br><span class="line">86188088225875314529584099251203829009407770775672</span><br><span class="line">11306739708304724483816533873502340845647058077308</span><br><span class="line">82959174767140363198008187129011875491310547126581</span><br><span class="line">97623331044818386269515456334926366572897563400500</span><br><span class="line">42846280183517070527831839425882145521227251250327</span><br><span class="line">55121603546981200581762165212827652751691296897789</span><br><span class="line">32238195734329339946437501907836945765883352399886</span><br><span class="line">75506164965184775180738168837861091527357929701337</span><br><span class="line">62177842752192623401942399639168044983993173312731</span><br><span class="line">32924185707147349566916674687634660915035914677504</span><br><span class="line">99518671430235219628894890102423325116913619626622</span><br><span class="line">73267460800591547471830798392868535206946944540724</span><br><span class="line">76841822524674417161514036427982273348055556214818</span><br><span class="line">97142617910342598647204516893989422179826088076852</span><br><span class="line">87783646182799346313767754307809363333018982642090</span><br><span class="line">10848802521674670883215120185883543223812876952786</span><br><span class="line">71329612474782464538636993009049310363619763878039</span><br><span class="line">62184073572399794223406235393808339651327408011116</span><br><span class="line">66627891981488087797941876876144230030984490851411</span><br><span class="line">60661826293682836764744779239180335110989069790714</span><br><span class="line">85786944089552990653640447425576083659976645795096</span><br><span class="line">66024396409905389607120198219976047599490197230297</span><br><span class="line">64913982680032973156037120041377903785566085089252</span><br><span class="line">16730939319872750275468906903707539413042652315011</span><br><span class="line">94809377245048795150954100921645863754710598436791</span><br><span class="line">78639167021187492431995700641917969777599028300699</span><br><span class="line">15368713711936614952811305876380278410754449733078</span><br><span class="line">40789923115535562561142322423255033685442488917353</span><br><span class="line">44889911501440648020369068063960672322193204149535</span><br><span class="line">41503128880339536053299340368006977710650566631954</span><br><span class="line">81234880673210146739058568557934581403627822703280</span><br><span class="line">82616570773948327592232845941706525094512325230608</span><br><span class="line">22918802058777319719839450180888072429661980811197</span><br><span class="line">77158542502016545090413245809786882778948721859617</span><br><span class="line">72107838435069186155435662884062257473692284509516</span><br><span class="line">20849603980134001723930671666823555245252804609722</span><br><span class="line">53503534226472524250874054075591789781264330331690</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>【欧拉计划第 14 题】 最长的考拉兹序列 Longest Collatz sequence</title>
    <url>/2022/05/01/projecteuler014/</url>
    <content><![CDATA[<h1 id="Problem-14-Longest-Collatz-sequence"><a href="#Problem-14-Longest-Collatz-sequence" class="headerlink" title="Problem 14 Longest Collatz sequence"></a>Problem 14 Longest Collatz sequence</h1><blockquote>
<p>The following iterative sequence is defined for the set of positive integers:</p>
</blockquote>
<p>$$<br>\large n\rightarrow \frac{n}{2}\ \left ( n\ is\ even \right ) ,n\rightarrow3n+1\ \left ( \ n\ is\ odd \right )<br>$$</p>
<blockquote>
<p>Using the rule above and starting with $13$, we generate the following sequence:</p>
</blockquote>
<p>$$<br>\large 13\rightarrow40\rightarrow20\rightarrow10\rightarrow5\rightarrow16\rightarrow8\rightarrow4\rightarrow2\rightarrow1<br>$$</p>
<blockquote>
<p>It can be seen that this sequence (starting at $13$ and finishing at 1) contains $10$ terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at $1$.<br>Which starting number, under one million, produces the longest chain?<br>NOTE: Once the chain starts the terms are allowed to go above one million.</p>
</blockquote>
<span id="more"></span>

<h1 id="问题-14-最长的考拉兹序列"><a href="#问题-14-最长的考拉兹序列" class="headerlink" title="问题 14 最长的考拉兹序列"></a>问题 14 最长的考拉兹序列</h1><blockquote>
<p>为所有正整数集定义以下迭代序列：</p>
</blockquote>
<p>$$<br>\large n\rightarrow \frac{n}{2}\ \left (  n,是偶数 \right ) ,n\rightarrow3n+1\ \left ( n,是奇数 \right )<br>$$</p>
<blockquote>
<p>使用上面的规则并从 $13$ 开始，生成以下序列：</p>
</blockquote>
<p>$$<br>\large 13\rightarrow40\rightarrow20\rightarrow10\rightarrow5\rightarrow16\rightarrow8\rightarrow4\rightarrow2\rightarrow1<br>$$</p>
<blockquote>
<p>可以看出这个序列从 $13$ 开始并到 $1$ 结束总共包含 $10$ 个数。<br>考拉兹猜想指出使用以上迭代规则，所有正整数都会最终回到一，虽然这个猜想仍未得到证明。<br>求在一百万以下，哪个起始数可以产生最长的考拉兹序列？<br>注意：序列中包含的数的个数可以超过一百万。</p>
</blockquote>
<h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><h2 id="考拉兹猜想"><a href="#考拉兹猜想" class="headerlink" title="考拉兹猜想"></a>考拉兹猜想</h2><p>考拉兹猜想（Collatz conjecture），又称为奇偶归一猜想、3n+1 猜想、冰雹猜想、角谷猜想、哈塞猜想、乌拉姆猜想或叙拉古猜想，<strong>是指对于每一个正整数，如果它是奇数，则对它乘 3 再加 1，如果它是偶数，则对它除以 2，如此循环，最终都能够得到 1</strong></p>
<p>$$<br>\large f\left ( n \right )&#x3D;\left\{\begin{matrix}\frac{n}{2} \quad\quad\quad if \, n\equiv 0\\3n+1 \quad if \, n\equiv 1\end{matrix}\right.\left .\quad( mod \,\, 2 \right )<br>$$</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>其实当你看到题目的时候，不知到你有没有和我想到一块儿去，那必然又是咱滴老朋友<strong>暴力算法</strong>啦</p>
<p><img src="https://img-blog.csdnimg.cn/b4fe785c36964aceb37914a12f68ce2e.png#pic_center"></p>
<p>显然，我们只要求算出一到一百万之间所有数字的<strong>考拉兹序列</strong>长度，然后在所有求出的序列长度值中找出最大值就能解决本题</p>
<p>但是可以做一些优化，比如大家都知道当 <code>n</code> 是奇数时，<code>3n+1</code> 一定是偶数。那我们根本没必要让程序重复执行冗余步骤</p>
<p>换言之，当 <code>n</code> 是奇数的时候，在其后追加一步，继续计算 <code>(3n+1)/2</code>。便可省去很多中间计算步骤，程序执行效率自然得到提高</p>
<p>还有一点是参考其他大神写的题解意识到的，就是程序重复计算的问题。较大的数据量在计算过程中可能会产生重复数据，我们是不是可以将所有计算步骤得到的结果做下缓存。这样在下一步遇到重复值时可以直接调用，避免重复计算，提高程序执行效率</p>
<p>或者也可以使用<strong>递归法</strong>实现本题</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-05-1 09:00:42</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-05-01 09:13:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">cal</span>(<span class="number">3</span> * n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="number">1</span> + <span class="built_in">cal</span>(n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="built_in">cal</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; ans)</span><br><span class="line">        &#123;</span><br><span class="line">            n = i;</span><br><span class="line">            ans = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: sorrowise</span></span><br><span class="line"><span class="string">Date: 2022-05-1 08:42:30</span></span><br><span class="line"><span class="string">LastEditTime: 2022-05-01 09:13:19</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">N=<span class="number">10</span>**<span class="number">6</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N):</span><br><span class="line">    i,n = x,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> x &lt; i:</span><br><span class="line">            n = n + d[x]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            x = x // <span class="number">2</span></span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = (<span class="number">3</span>*x+<span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            n += <span class="number">2</span></span><br><span class="line">    d[i] = n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(d,key=d.get))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案：837799</p>
</blockquote>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTA0MjkxMTg=">递归算法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanlyb3kvcC8xMDI3NDQxNC5odG1s">记忆化搜索算法优化<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wZS5tZXRhcXVhbnQub3JnL3BlMDE0Lmh0bWw=">longest Collatz sequence<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>欧拉计划</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>FileNotFoundError: [Errno 2] No such file or directory</title>
    <url>/2022/04/21/python-error/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近用 Python 解决<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMjQzMDc5MzI=">欧拉计划第十三题<i class="fa fa-external-link-alt"></i></span>时，打开文件时总是报错</p>
<p><code>FileNotFoundError: [Errno 2] No such file or directory: &#39;/ProjectEuler/data/013.txt&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">open</span>(<span class="string">&#x27;data/013.txt&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8c827acbcd1b4067888f945d95c5306a.png"></p>
<p>后来查了下，发现是和编辑器有关系，涉及到<strong>工作区</strong>的概念，下面给出解决方案</p>
<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>首先给大家看下我的工作区，<code>Vscode</code> 编辑器解析打开的整个文件夹为工作区</p>
<p><img src="https://img-blog.csdnimg.cn/d7c532c3a2ba4a70ab606efa80ec036b.png"></p>
<p>什么意思呢？就是说，这里编辑器默认我们的工作区是 <code>algorithms</code> 这一整个文件夹，文件位置分布是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">algorithms</span><br><span class="line">|__ProjectEuler</span><br><span class="line">	|__data</span><br><span class="line">	|	|__013.txt</span><br><span class="line">	|__013.py</span><br></pre></td></tr></table></figure>

<p>如果我们要让程序正确识别文件位置，应该将路径修改为<strong>相对工作区</strong>的路径，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">open</span>(<span class="string">&#x27;ProjectEuler/data/013.txt&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>此时再次执行代码，便不会报错</p>
<p><img src="https://img-blog.csdnimg.cn/03bf9f645c964bea94bf1ec7f24e23bc.png"></p>
<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1NjExNzYvYXJ0aWNsZS9kZXRhaWxzLzgyMTA3MzUw">Python OSError: Errno 22 Invalid argument:的出现和解决<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>你还没有抢到冰墩墩?</title>
    <url>/2022/02/08/python-turtle-BingDwenDwen/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/BeijingOlympics.png"></p>
<div class="note info"><p>近日，火爆全网的北京2022冬奥会吉祥物冰墩墩一度售罄，既然买不到，那就自己做一个吧！</p>
</div>

<span id="more"></span>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.title(<span class="string">&#x27;BingDwenDwen&#x27;</span>)</span><br><span class="line"></span><br><span class="line">turtle.speed(<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">177</span>, <span class="number">112</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">turtle.pensize(<span class="number">3</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">80</span>)</span><br><span class="line">turtle.circle(-<span class="number">45</span>, <span class="number">200</span>)</span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">182</span>, <span class="number">95</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.setheading(<span class="number">95</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.circle(-<span class="number">37</span>, <span class="number">160</span>)</span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">30</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">73</span>, <span class="number">230</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">turtle.pensize(<span class="number">3</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">20</span>)</span><br><span class="line">turtle.circle(-<span class="number">250</span>, <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">50</span>)</span><br><span class="line">turtle.circle(-<span class="number">42</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">50</span>)</span><br><span class="line">turtle.circle(-<span class="number">190</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">320</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">120</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">12</span>)</span><br><span class="line">turtle.circle(-<span class="number">18</span>, <span class="number">85</span>)</span><br><span class="line">turtle.circle(-<span class="number">180</span>, <span class="number">23</span>)</span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">110</span>)</span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">115</span>)</span><br><span class="line">turtle.circle(<span class="number">100</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">120</span>)</span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">110</span>)</span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">70</span>)</span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">35</span>)</span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">120</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">200</span>)</span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">86</span>)</span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">122</span>)</span><br><span class="line">turtle.circle(-<span class="number">53</span>, <span class="number">160</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">130</span>, <span class="number">180</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">120</span>)</span><br><span class="line">turtle.circle(-<span class="number">28</span>, <span class="number">160</span>)</span><br><span class="line">turtle.setheading(<span class="number">210</span>)</span><br><span class="line">turtle.circle(<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">90</span>, <span class="number">230</span>)</span><br><span class="line">turtle.setheading(<span class="number">40</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.circle(-<span class="number">30</span>, <span class="number">170</span>)</span><br><span class="line">turtle.setheading(<span class="number">125</span>)</span><br><span class="line">turtle.circle(<span class="number">150</span>, <span class="number">23</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">180</span>, -<span class="number">55</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.setheading(-<span class="number">120</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">27</span>, <span class="number">200</span>)</span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line">turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">turtle.circle(<span class="number">300</span>, <span class="number">14</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">108</span>, -<span class="number">168</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(-<span class="number">115</span>)</span><br><span class="line">turtle.circle(<span class="number">110</span>, <span class="number">15</span>)</span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">10</span>)</span><br><span class="line">turtle.circle(-<span class="number">18</span>, <span class="number">80</span>)</span><br><span class="line">turtle.circle(-<span class="number">180</span>, <span class="number">13</span>)</span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">60</span>)</span><br><span class="line">turtle.setheading(<span class="number">42</span>)</span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">29</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">38</span>, -<span class="number">210</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(-<span class="number">155</span>)</span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">100</span>)</span><br><span class="line">turtle.circle(-<span class="number">10</span>, <span class="number">110</span>)</span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">65</span>)</span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">15</span>)</span><br><span class="line">turtle.setheading(-<span class="number">14</span>)</span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">27</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">64</span>, <span class="number">120</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">40</span>)</span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">152</span>)</span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">130</span>)</span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">47</span>, <span class="number">55</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">25</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">45</span>, <span class="number">62</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">45</span>, <span class="number">68</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">47</span>, <span class="number">86</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">51</span>, <span class="number">82</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">120</span>)</span><br><span class="line">turtle.circle(-<span class="number">32</span>, <span class="number">152</span>)</span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">55</span>)</span><br><span class="line">turtle.circle(-<span class="number">25</span>, <span class="number">120</span>)</span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">45</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">60</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">24</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">64</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">70</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">88</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line">turtle.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">37</span>, <span class="number">80</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line">turtle.circle(-<span class="number">22</span>, <span class="number">100</span>)</span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">15</span>, <span class="number">48</span>)</span><br><span class="line">turtle.setheading(-<span class="number">36</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.circle(<span class="number">60</span>, <span class="number">70</span>)</span><br><span class="line">turtle.setheading(-<span class="number">132</span>)</span><br><span class="line">turtle.circle(-<span class="number">45</span>, <span class="number">100</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">135</span>, <span class="number">120</span>)</span><br><span class="line">turtle.pensize(<span class="number">5</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;cyan&quot;</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line">turtle.circle(-<span class="number">165</span>, <span class="number">150</span>)</span><br><span class="line">turtle.circle(-<span class="number">130</span>, <span class="number">78</span>)</span><br><span class="line">turtle.circle(-<span class="number">250</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">138</span>, <span class="number">105</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">131</span>, <span class="number">116</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;slateblue&quot;</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line">turtle.circle(-<span class="number">160</span>, <span class="number">144</span>)</span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">78</span>)</span><br><span class="line">turtle.circle(-<span class="number">242</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">135</span>, <span class="number">105</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">127</span>, <span class="number">112</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;orangered&quot;</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line">turtle.circle(-<span class="number">155</span>, <span class="number">136</span>)</span><br><span class="line">turtle.circle(-<span class="number">116</span>, <span class="number">86</span>)</span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">134</span>, <span class="number">103</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">123</span>, <span class="number">108</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;gold&quot;</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">136</span>)</span><br><span class="line">turtle.circle(-<span class="number">104</span>, <span class="number">86</span>)</span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">126</span>, <span class="number">102</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">120</span>, <span class="number">104</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;greenyellow&quot;</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line">turtle.circle(-<span class="number">145</span>, <span class="number">136</span>)</span><br><span class="line">turtle.circle(-<span class="number">90</span>, <span class="number">83</span>)</span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">220</span>, <span class="number">115</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.setheading(<span class="number">36</span>)</span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line">turtle.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line">turtle.setheading(<span class="number">110</span>)</span><br><span class="line">turtle.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">5</span>, -<span class="number">170</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">10</span>, -<span class="number">170</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">25</span>, -<span class="number">170</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">2</span>, -<span class="number">175</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgoldenrod&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">16</span>, -<span class="number">175</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">turtle.goto(-<span class="number">16</span>, -<span class="number">160</span>)</span><br><span class="line">turtle.write(<span class="string">&quot;BEIJING 2022&quot;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br><span class="line">turtle.hideturtle()</span><br><span class="line"></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<p>实现效果如下，可爱的冰墩墩到手啦</p>
<img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/bing-dwen-dwen.png" width="70%">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>七夕❤️朋友圈—炸锅了</title>
    <url>/2021/08/14/qixi-festival-love-code/</url>
    <content><![CDATA[<h1 id="大事件"><a href="#大事件" class="headerlink" title="大事件"></a>大事件</h1><p>今早起来，逛逛朋友圈，看到的全是各种秀。唉，图片咱就不放了，难免戳中某位朋友瘦小的心灵，主要我也怕，你们知道叭</p>
<img src="https://img-blog.csdnimg.cn/d6ccc21554a24a7eb515e9f4f2b98c1e.jpg" width="45%">

<p>这种时候怎么能让我们的朋友圈是白茫茫的一片呢？必须怼回去，这气可不能受，下面的操作学会了，这波气势也不输，还不快快学起来~~</p>
<span id="more"></span>

<h1 id="文件建立"><a href="#文件建立" class="headerlink" title="文件建立"></a>文件建立</h1><p>桌面右击，新建文本文档</p>
<img src="https://img-blog.csdnimg.cn/578b5db60c9d4abc80c60b582ce2930e.png" width="60%">

<p>将文件命名格式修改为 <strong>.css</strong> ，保存， <strong>js</strong> 文件建立同理</p>
<img src="https://img-blog.csdnimg.cn/67c18f43a51846438d6e551c711df4a4.png" width="60%">

<h1 id="3D立体相册"><a href="#3D立体相册" class="headerlink" title="3D立体相册"></a>3D立体相册</h1><h2 id="demo-css"><a href="#demo-css" class="headerlink" title="demo.css"></a>demo.css</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">30deg</span>) <span class="built_in">rotateY</span>(-<span class="number">80deg</span>);</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: rotate <span class="number">20s</span> infinite;</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rotate &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_front</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_back</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_left</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_right</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_top</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.out_bottom</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: bloack;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_pic</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_front</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_back</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">50px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_left</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_right</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_top</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> <span class="selector-class">.in_bottom</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_front</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_back</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">200px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_left</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_right</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_top</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.out_bottom</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://img-blog.csdnimg.cn/d01dc2e4ddf74f20a8596017dcbb0e35.gif#pic_center"></p>
<h1 id="爱心表白"><a href="#爱心表白" class="headerlink" title="爱心表白"></a>爱心表白</h1><h2 id="test-css"><a href="#test-css" class="headerlink" title="test.css"></a>test.css</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-love</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body_left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">98</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.love</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">440px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">260px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">220px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.love</span> <span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.love</span> <span class="selector-class">.block</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../image/love.jpg&quot;</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> border &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">5%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">5%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">10%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">15%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">20%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">30%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">35%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">35%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">40%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">45%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">55%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">55%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">60%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">65%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">65%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">70%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">80%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">85%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">90%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">95%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.border</span> <span class="selector-class">.border-top</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid black;</span><br><span class="line">    <span class="attribute">transform-origin</span>: left center;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: border <span class="number">312</span> linear;</span><br><span class="line">    -o-<span class="attribute">animation</span>: border <span class="number">12s</span> linear;</span><br><span class="line">    <span class="attribute">animation</span>: border <span class="number">12s</span> linear;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.border</span> <span class="selector-class">.border-bottom</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid red;</span><br><span class="line">    <span class="attribute">transform-origin</span>: right center;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: border <span class="number">7s</span> linear <span class="number">12s</span>;</span><br><span class="line">    -o-<span class="attribute">animation</span>: border <span class="number">7s</span> linear <span class="number">12s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: border <span class="number">7s</span> linear <span class="number">12s</span>;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.copyright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: dimgray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mylove-js"><a href="#Mylove-js" class="headerlink" title="Mylove.js"></a>Mylove.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blk_pitn = &#123;</span><br><span class="line">    <span class="attr">block1</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block2</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block3</span>: [[-<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block4</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block5</span>: [[-<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block6</span>: [[<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block7</span>: [[-<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block8</span>: [[-<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block9</span>: [[<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block10</span>: [[-<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block11</span>: [[<span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block12</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block13</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block14</span>: [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block15</span>: [[<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block16</span>: [[-<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block17</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block18</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block19</span>: [[<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block20</span>: [[<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block21</span>: [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>]],</span><br><span class="line">    <span class="attr">block22</span>: [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="attr">block23</span>: [[<span class="number">0</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">&#125;,</span><br><span class="line">    offset_pitn = &#123;</span><br><span class="line">        <span class="attr">block1</span>: [<span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="attr">block2</span>: [<span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">        <span class="attr">block3</span>: [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        <span class="attr">block4</span>: [<span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">        <span class="attr">block5</span>: [<span class="number">3</span>, -<span class="number">1</span>],</span><br><span class="line">        <span class="attr">block6</span>: [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="attr">block7</span>: [<span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">        <span class="attr">block8</span>: [<span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">        <span class="attr">block9</span>: [<span class="number">1</span>, -<span class="number">3</span>],</span><br><span class="line">        <span class="attr">block10</span>: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        <span class="attr">block11</span>: [<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="attr">block12</span>: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        <span class="attr">block13</span>: [-<span class="number">1</span>, -<span class="number">4</span>],</span><br><span class="line">        <span class="attr">block14</span>: [<span class="number">0</span>, -<span class="number">2</span>],</span><br><span class="line">        <span class="attr">block15</span>: [-<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">        <span class="attr">block16</span>: [-<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">        <span class="attr">block17</span>: [-<span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">        <span class="attr">block18</span>: [-<span class="number">3</span>, -<span class="number">2</span>],</span><br><span class="line">        <span class="attr">block19</span>: [-<span class="number">4</span>, <span class="number">0</span>],</span><br><span class="line">        <span class="attr">block20</span>: [-<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="attr">block21</span>: [-<span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="attr">block22</span>: [-<span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">        <span class="attr">block23</span>: [-<span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blocks = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;block&quot;</span>),</span><br><span class="line">    block = blocks[<span class="number">0</span>],</span><br><span class="line">    love = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;love&quot;</span>)[<span class="number">0</span>],</span><br><span class="line">    timer = <span class="literal">null</span>,</span><br><span class="line">    index = <span class="number">0</span>,</span><br><span class="line">    clone_block;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">block.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&quot;50%&quot;</span>;</span><br><span class="line">block.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&quot;50%&quot;</span>;</span><br><span class="line">block.<span class="property">style</span>.<span class="property">margin</span> = <span class="string">&quot;-20px 0 0 -20px&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> block_left = <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(block, <span class="literal">null</span>).<span class="property">left</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">2</span>)),</span><br><span class="line">    block_top = <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(block, <span class="literal">null</span>).<span class="property">top</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (++index &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Rise</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    block.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&quot;visible&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    block.<span class="property">style</span>.<span class="property">left</span> = block_left + <span class="number">40</span> * offset_pitn[<span class="string">&quot;block&quot;</span> + index][<span class="number">0</span>] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    block.<span class="property">style</span>.<span class="property">top</span> = block_top - <span class="number">40</span> * offset_pitn[<span class="string">&quot;block&quot;</span> + index][<span class="number">1</span>] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; block.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        block.<span class="property">children</span>[i].<span class="property">style</span>.<span class="property">left</span> = blk_pitn[<span class="string">&quot;block&quot;</span> + index][i][<span class="number">0</span>] * -<span class="number">40</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        block.<span class="property">children</span>[i].<span class="property">style</span>.<span class="property">top</span> = blk_pitn[<span class="string">&quot;block&quot;</span> + index][i][<span class="number">1</span>] * -<span class="number">40</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone_block = block.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    love.<span class="title function_">appendChild</span>(clone_block);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (love.<span class="property">children</span>.<span class="property">length</span> &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">        blocks[blocks.<span class="property">length</span> - <span class="number">1</span>].<span class="property">children</span>[<span class="number">2</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">        block.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rise</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> timer2 = <span class="literal">null</span>,</span><br><span class="line">        distance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> target = <span class="number">120</span>,</span><br><span class="line">        speed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> love_top = <span class="built_in">parseFloat</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(love, <span class="literal">null</span>).<span class="property">top</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    timer2 = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        distance += speed;</span><br><span class="line">        <span class="keyword">if</span> (distance &gt;= target) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer2);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;over&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        love.<span class="property">style</span>.<span class="property">top</span> = (love_top - distance) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Next</span>();</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">12000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://img-blog.csdnimg.cn/622b4df993fd4ee2abe147c0d78e02b4.gif"></p>
<hr>
<p>xdm，师弟只能带你到这里了，剩下的修行就靠你们自己了，我先行一步，暂且告退……</p>
<img src="https://img-blog.csdnimg.cn/a0d0da040e0942da922b80dd30fb8596.png" width="40%">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>【玩转 RT-Thread】 RT-Thread Studio —— 按键控制电机正反转、蜂鸣器</title>
    <url>/2022/04/28/rt-thread01/</url>
    <content><![CDATA[<h1 id="初识RT-Thread"><a href="#初识RT-Thread" class="headerlink" title="初识RT-Thread"></a>初识RT-Thread</h1><p><code>做世界级的 OS，让万物互联，信息畅通无阻。</code><br><code>成为未来 AIoT 领域最为主流的操作系统平台。</code></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>RT-Thread 是一个集<code>实时操作系统（RTOS）内核、中间件组件和开发者社区于一体</code>的技术平台，由<code>熊谱翔先生</code>带领并集合开源社区力量开发而成，RT-Thread 也是一个<code>组件完整丰富、高度可伸缩、简易开发、超低功耗、高安全性</code>的<code>物联网操作系统</code>。</p>
</blockquote>
<h2 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h2><blockquote>
<p>RT-Thread 具备一个 IoT OS 平台所需的所有关键组件，例如GUI、网络协议栈、安全传输、低功耗组件等等。经过11年的累积发展，RT-Thread 已经拥有一个<code>国内最大的嵌入式开源社区</code>，同时被广泛应用于能源、车载、医疗、消费电子等多个行业，累积装机量超过 14亿 台，成为国人<code>自主开发</code>、国内最成熟稳定和装机量最大的<code>开源 RTOS</code>。</p>
</blockquote>
<h2 id="软件生态"><a href="#软件生态" class="headerlink" title="软件生态"></a>软件生态</h2><blockquote>
<p>RT-Thread 拥有<code>良好的软件生态</code>，支持市面上所有主流的编译工具如 GCC、Keil、IAR 等，工具链完善、友好，支持各类标准接口，如 POSIX、CMSIS、C++应用环境、Javascript 执行环境等，方便开发者移植各类应用程序。商用支持所有主流MCU架构，如 ARM Cortex-M&#x2F;R&#x2F;A, MIPS, X86, Xtensa, C-Sky, RISC-V，几乎支持市场上所有主流的 MCU 和 Wi-Fi 芯片。</p>
</blockquote>
<span id="more"></span>

<h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><ul>
<li>编程工具：<code>RT-Thread studio</code></li>
<li>开发板：<code>潘多拉STM32L475</code></li>
</ul>
<h1 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h1><ul>
<li>1.使用按键控制蜂鸣器和电机，当按下KEY0 后电机左转，当按下KEY1 后电机<br>右转，当按下KEY2 后电机停止，当按住WK_UP 时蜂鸣器鸣叫，松开WK_UP 后蜂鸣器关闭。</li>
<li>2.其中KEY0 KEY1 KEY2 三个按键会触发中断，通过pin 设备的中断回调函数控制电机，WK_UP 按键通过轮询的方式控制蜂鸣器鸣叫。</li>
</ul>
<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="新建RT-Thread工程"><a href="#新建RT-Thread工程" class="headerlink" title="新建RT-Thread工程"></a>新建RT-Thread工程</h2><p><img src="https://img-blog.csdnimg.cn/85370c1057554323ba75dd83c3d1844f.png"></p>
<h2 id="RT-Thread-Studio界面介绍"><a href="#RT-Thread-Studio界面介绍" class="headerlink" title="RT-Thread Studio界面介绍"></a>RT-Thread Studio界面介绍</h2><p><img src="https://img-blog.csdnimg.cn/b24064da660f40b5b00e9e0f03d4f1ff.png"></p>
<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p><img src="https://img-blog.csdnimg.cn/c556436b0d44443686dafa3a0f389bd5.png"></p>
<h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p><img src="https://img-blog.csdnimg.cn/c5ea1524e61e4b92af667e17decd12bb.png"></p>
<h2 id="串口监视"><a href="#串口监视" class="headerlink" title="串口监视"></a>串口监视</h2><p><img src="https://img-blog.csdnimg.cn/eae3d5a76ae14aa0a7e6a2d00145024d.png"></p>
<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p><code>1.头文件</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;board.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>2.宏定义</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按键初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_KEY0 GET_PIN(D, 10) <span class="comment">// PD10: KEY0 --&gt; KEY</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_KEY1 GET_PIN(D, 9) <span class="comment">// PD9: KEY1 --&gt; KEY</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_KEY2 GET_PIN(D, 8) <span class="comment">// PD8: KEY2 --&gt; KEY</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_WK_UP GET_PIN(C,13)<span class="comment">//PC13：WK_UP</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//电机初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MOTOR_A GET_PIN(A,1)<span class="comment">//PA1：MOTOR_A</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MOTOR_B GET_PIN(A,0)<span class="comment">//PA0：MOTOR_B</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//蜂鸣器初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_BEEP GET_PIN(B,2)<span class="comment">//PB2：BEEP</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MOTOR_STOP,</span><br><span class="line">    MOTOR_LEFT,</span><br><span class="line">    MOTOR_RIGHT</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>3.void motor_ctrl(rt_uint8_t turn) //电机控制函数</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">motor_ctrl</span><span class="params">(<span class="type">rt_uint8_t</span> turn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (turn == MOTOR_STOP)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_pin_write(PIN_MOTOR_A, PIN_LOW);</span><br><span class="line">        rt_pin_write(PIN_MOTOR_B, PIN_LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (turn == MOTOR_LEFT)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_pin_write(PIN_MOTOR_A, PIN_LOW);</span><br><span class="line">        rt_pin_write(PIN_MOTOR_B, PIN_HIGH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (turn == MOTOR_RIGHT)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_pin_write(PIN_MOTOR_A, PIN_HIGH);</span><br><span class="line">        rt_pin_write(PIN_MOTOR_B, PIN_LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;err parameter ! Please enter 0-2.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>4.void beep_ctrl(rt_uint8_t on) //蜂鸣器控制函数</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">beep_ctrl</span><span class="params">(<span class="type">rt_uint8_t</span> on)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (on)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_pin_write(PIN_BEEP, PIN_HIGH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_pin_write(PIN_BEEP, PIN_LOW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>5.void irq_callback(void *args) // 中断回调函数</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_callback</span><span class="params">(<span class="type">void</span> *args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_uint32_t</span> sign = (<span class="type">rt_uint32_t</span>)args;</span><br><span class="line">    <span class="keyword">switch</span> (sign)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> PIN_KEY0:</span><br><span class="line">        motor_ctrl(MOTOR_LEFT);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;KEY0 interrupt. motor turn left.&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PIN_KEY1:</span><br><span class="line">        motor_ctrl(MOTOR_RIGHT);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;KEY1 interrupt. motor turn right.&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PIN_KEY2:</span><br><span class="line">        motor_ctrl(MOTOR_STOP);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;KEY2 interrupt. motor stop.&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        rt_kprintf(<span class="string">&quot;error sign= %d !&quot;</span>, sign);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>6.主函数</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置按键引脚为输入模式*/</span></span><br><span class="line">    rt_pin_mode(PIN_KEY0, PIN_MODE_INPUT_PULLUP);</span><br><span class="line">    rt_pin_mode(PIN_KEY1, PIN_MODE_INPUT_PULLUP);</span><br><span class="line">    rt_pin_mode(PIN_KEY2, PIN_MODE_INPUT_PULLUP);</span><br><span class="line">    rt_pin_mode(PIN_WK_UP, PIN_MODE_INPUT_PULLDOWN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置电机控制引脚为输入模式*/</span></span><br><span class="line">    rt_pin_mode(PIN_MOTOR_A, PIN_MODE_OUTPUT);</span><br><span class="line">    rt_pin_mode(PIN_MOTOR_B, PIN_MODE_OUTPUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置蜂鸣器引脚为输出模式*/</span></span><br><span class="line">    rt_pin_mode(PIN_BEEP, PIN_MODE_OUTPUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置按键中断模式与中断回调函数*/</span></span><br><span class="line">    rt_pin_attach_irq(PIN_KEY0, PIN_IRQ_MODE_FALLING , irq_callback , (<span class="type">void</span> *)PIN_KEY0</span><br><span class="line">    );</span><br><span class="line">    rt_pin_attach_irq(PIN_KEY1, PIN_IRQ_MODE_FALLING , irq_callback , (<span class="type">void</span> *)PIN_KEY1</span><br><span class="line">    );</span><br><span class="line">    rt_pin_attach_irq(PIN_KEY2, PIN_IRQ_MODE_FALLING , irq_callback , (<span class="type">void</span> *)PIN_KEY2</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断*/</span></span><br><span class="line">    rt_pin_irq_enable(PIN_KEY0, PIN_IRQ_ENABLE);</span><br><span class="line">    rt_pin_irq_enable(PIN_KEY1, PIN_IRQ_ENABLE);</span><br><span class="line">    rt_pin_irq_enable(PIN_KEY2, PIN_IRQ_ENABLE);</span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rt_pin_read(PIN_WK_UP) == PIN_HIGH)</span><br><span class="line">        &#123;</span><br><span class="line">            rt_thread_mdelay(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">if</span> (rt_pin_read(PIN_WK_UP) == PIN_HIGH)</span><br><span class="line">            &#123;</span><br><span class="line">                rt_kprintf(<span class="string">&quot;WK_UP pressed. beep on.&quot;</span>);</span><br><span class="line">                beep_ctrl(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            beep_ctrl(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">10</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h1><p>通过按键引脚、电机以及蜂鸣器的输入输出模式，并对按键设置中断编写中断回调函数，在使能中断后。<br>1.电机控制：当有外部事件触发引脚状态（按下按键）时，中断回调函数对特定的触发引脚进行判断，并执行相应的操作<br>2.蜂鸣器控制：在主函数中循环执行判断是否WK_UP按键是否按下，按下触发蜂鸣器响，松开停止发声。</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>KEY0</td>
<td>电机左转</td>
</tr>
<tr>
<td>KEY1</td>
<td>电机右转</td>
</tr>
<tr>
<td>KEY2</td>
<td>电机停止</td>
</tr>
<tr>
<td>WK_UP</td>
<td>蜂鸣器响</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>RT-Thread</category>
      </categories>
      <tags>
        <tag>RT-Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【玩转 RT-Thread】I2C 内核</title>
    <url>/2022/04/28/rt-thread02/</url>
    <content><![CDATA[<h1 id="i2c协议"><a href="#i2c协议" class="headerlink" title="i2c协议"></a>i2c协议</h1><p>由飞利浦公司开发，支持设备间的短距离通信。i2c通信需要的引脚少，硬件实现简单、可扩展性强，被广泛应用在系统内多个集成电路（IC）间的通信。</p>
<h1 id="i2c物理层"><a href="#i2c物理层" class="headerlink" title="i2c物理层"></a>i2c物理层</h1><ul>
<li><p>i2c通信总线可连接多个i2c通信设备，支持多个通信主机和多个通信从机。i2c通信只需要两条双向总线——SDA（串行数据线）和SCL（串行时钟线）。<br><code>SDA</code>：用于传输数据<br><code>SCL</code>：用于同步数据收发</p>
</li>
<li><p>每个连接到总线的设备都有一个独立地址，共7bit，主机正是利用该地址对设备进行访问</p>
</li>
<li><p>i2c支持多主控，任何时间点都只能有一个主控。<br><img src="https://img-blog.csdnimg.cn/01cc1805f0db4842a836a7dae9b11978.png"></p>
</li>
<li><p>i2c器件的SDA引脚和SCL引脚是开漏电路形式，因此，SDA和SCL总线都需要连接上拉电阻，当总线空闲时，两条总线均为高电平。</p>
</li>
<li><p>各器件的SDA和SCL信号线在总线上都是<code>线与</code>关系。（即连接到总线上的任意器件输出低电平都会将总线信号拉低）</p>
</li>
</ul>
<span id="more"></span>

<h1 id="i2c协议层"><a href="#i2c协议层" class="headerlink" title="i2c协议层"></a>i2c协议层</h1><p>协议层定义了i2c的通信协议。一个完整的i2c数据传输包含开始信号，器件地址，读写控制，器件内访问地址，有效数据，应答信号和结束信号。</p>
<h2 id="i2c总线的位传输"><a href="#i2c总线的位传输" class="headerlink" title="i2c总线的位传输"></a>i2c总线的位传输</h2><p>数据传输：当SCL位高电平时，SDA必须保持稳定，SDA上传1位数据。<br>数据改变：当SCL为低电平时，SDA才可以改变电平<br><code>i2c位传输时序图</code><br><img src="https://img-blog.csdnimg.cn/3bcc9522f82841b5a9808703e4c29fa9.png"></p>
<h2 id="i2c总线的开始和结束信号"><a href="#i2c总线的开始和结束信号" class="headerlink" title="i2c总线的开始和结束信号"></a>i2c总线的开始和结束信号</h2><p><code>开始信号</code>：SCL 为高电平时，主机将SDA 拉低，表示数据传输即将开始。<br><code>结束信号</code>：在SDA 为低电平时，主机将SCL 拉高并保持高电平，然后在将SDA 拉高，表示传输结束。</p>
<h2 id="i2c应答信号"><a href="#i2c应答信号" class="headerlink" title="i2c应答信号"></a>i2c应答信号</h2><ul>
<li>在<code>主机</code>发送完每一个字节数据后，释放SDA（保持高电平），被寻址的接收器在成功接收到每一个字节后，必须产生一个应答<code>ACK</code>（从机将SDA拉低，使它在这个时钟脉冲的高电平期间保持稳定的低电平）</li>
<li>当<code>从机</code>接收不到数据或通信故障时，<code>从机</code>必须使SDA保持高电平，<code>主机</code>产生一个结束信号终止传输或者产生新的传输。</li>
</ul>
<h2 id="i2c总线的仲裁机制"><a href="#i2c总线的仲裁机制" class="headerlink" title="i2c总线的仲裁机制"></a>i2c总线的仲裁机制</h2><ul>
<li>SDA的仲裁也是建立在总线具有<code>线与</code>逻辑功能的原理上的。</li>
<li>节点在发送1位数据后，比较总线上所呈现的数据与自己发送的是否一致。是，继续发送；否则，退出竞争。</li>
<li>SDA的仲裁可以保证i2c总线系统在多个主节点上同时企图控制总线时通信正常进行而且数据不丢失（总线系统通过仲裁只允许一个主节点可以继续占据总线）</li>
<li>当SCL为高电平时，仲裁在SDA上发生。在其他主机发送低电平时，发送高电平的主机将会断开它的数据传输级，因为总线上的电平是<code>线与</code>连接。</li>
</ul>
<h1 id="访问i2c总线设备"><a href="#访问i2c总线设备" class="headerlink" title="访问i2c总线设备"></a>访问i2c总线设备</h1><p>一般情况下MCU 的I2C 器件都是作为主机和从机通讯，在RT-Thread 中将I2C 主机虚拟为I2C 总线设备，I2C 从机通过I2C 设备接口和I2C 总线通讯，相关接口如下所示：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>rt_device_find()</td>
<td>根据I2C 总线设备名称查找设备获取设备句柄</td>
</tr>
<tr>
<td>rt_i2c_transfer()</td>
<td>传输数据</td>
</tr>
</tbody></table>
<h1 id="查找i2c总线设备"><a href="#查找i2c总线设备" class="headerlink" title="查找i2c总线设备"></a>查找i2c总线设备</h1><p>在使用I2C 总线设备前需要根据I2C 总线设备名称获取设备句柄，进而才可以操作I2C 总线设备，查找设备函数如下所示，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rt_device_t rt_device_find(const char* name);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>i2c总线设备名称</td>
</tr>
<tr>
<td><strong>返回</strong></td>
<td>–</td>
</tr>
<tr>
<td>设备句柄</td>
<td>查找到对应设备将返回相应的设备句柄</td>
</tr>
<tr>
<td>RT-NULL</td>
<td>没有找到相应的设备对象</td>
</tr>
</tbody></table>
<p>一般情况下，注册到系统的I2C 设备名称为i2c0 ，i2c1 等，使用示例如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_I2C_BUS_NAME <span class="string">&quot;i2c1&quot;</span> <span class="comment">/* 传感器连接的I2C总线设备名称*/</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_bus_device</span> *<span class="title">i2c_bus</span>;</span> <span class="comment">/* I2C总线设备句柄*/</span></span><br><span class="line"><span class="comment">/* 查找I2C总线设备， 获取I2C总线设备句柄*/</span></span><br><span class="line">i2c_bus = (<span class="keyword">struct</span> rt_i2c_bus_device *)rt_device_find(name);</span><br></pre></td></tr></table></figure>

<h1 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h1><p>获取到I2C 总线设备句柄就可以使用rt_i2c_transfer() 进行数据传输。函数原型如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_size_t</span> <span class="title function_">rt_i2c_transfer</span><span class="params">(<span class="keyword">struct</span> rt_i2c_bus_device *bus,</span></span><br><span class="line"><span class="params">										<span class="keyword">struct</span> rt_i2c_msg msgs[],</span></span><br><span class="line"><span class="params">										<span class="type">rt_uint32_t</span> num)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bus</td>
<td>i2c总线设备句柄</td>
</tr>
<tr>
<td>msgs[]</td>
<td>待传输的消息数组指针</td>
</tr>
<tr>
<td>num</td>
<td>消息数组的元素个数</td>
</tr>
<tr>
<td><strong>返回</strong></td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>消息数组的元素个数</td>
<td>成功</td>
</tr>
<tr>
<td>错误码</td>
<td>失败</td>
</tr>
</tbody></table>
<ul>
<li>和SPI 总线的自定义传输接口一样，I2C 总线的自定义传输接口传输的数据也是以一个消息为单位。</li>
<li>参数msgs[] 指向待传输的消息数组，用户可以自定义每条消息的内容，实现I2C 总线所支持的2 种不同的数据传输模式。如果主设备需要发送重复开始条件，则需要发送2 个消息。<br><code>!!! note “注意事项” 此函数会调用rt_mutex_take(), 不能在中断服务程序里面调用，会导致assertion报错。</code></li>
</ul>
<blockquote>
<p>I2C 消息数据结构原型如下：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">rt_uint16_t</span> addr; <span class="comment">/* 从机地址*/</span></span><br><span class="line"><span class="type">rt_uint16_t</span> flags; <span class="comment">/* 读、写标志等*/</span></span><br><span class="line"><span class="type">rt_uint16_t</span> len; <span class="comment">/* 读写数据字节数*/</span></span><br><span class="line"><span class="type">rt_uint8_t</span> *buf; <span class="comment">/* 读写数据缓冲区指针　*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>从机地址addr：支持7 位和10 位二进制地址，需查看不同设备的数据手册。</li>
<li>标志flags 可取值为以下宏定义，根据需要可以与其他宏使用位运算“|” 组合起来使用。<br>  <code>!!! note “注意事项” RT-Thread I2C 设备接口使用的从机地址均不包含读写位，读写位控制需修改标志flags。</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_WR 0x0000 <span class="comment">/* 写标志*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_RD (1u &lt;&lt; 0) <span class="comment">/* 读标志*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_ADDR_10BIT (1u &lt;&lt; 2) <span class="comment">/* 10 位地址模式*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_NO_START (1u &lt;&lt; 4) <span class="comment">/* 无开始条件*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_IGNORE_NACK (1u &lt;&lt; 5) <span class="comment">/* 忽视NACK */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_I2C_NO_READ_ACK (1u &lt;&lt; 6) <span class="comment">/* 读的时候不发送ACK */</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用示例如下所示：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_I2C_BUS_NAME <span class="string">&quot;i2c1&quot;</span> <span class="comment">/* 传感器连接的I2C总线设备名称*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_ADDR 0x38 <span class="comment">/* 从机地址*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_bus_device</span> *<span class="title">i2c_bus</span>;</span> <span class="comment">/* I2C总线设备句柄*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查找I2C总线设备， 获取I2C总线设备句柄*/</span></span><br><span class="line">i2c_bus = (<span class="keyword">struct</span> rt_i2c_bus_device *)rt_device_find(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读传感器寄存器数据*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">read_regs</span><span class="params">(<span class="keyword">struct</span> rt_i2c_bus_device *bus, <span class="type">rt_uint8_t</span> len, <span class="type">rt_uint8_t</span></span></span><br><span class="line"><span class="params">*buf)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_msg</span> <span class="title">msgs</span>;</span></span><br><span class="line">	msgs.addr = AHT10_ADDR; <span class="comment">/* 从机地址*/</span></span><br><span class="line">	msgs.flags = RT_I2C_RD; <span class="comment">/* 读标志*/</span></span><br><span class="line">	msgs.buf = buf; <span class="comment">/* 读写数据缓冲区指针　*/</span></span><br><span class="line">	msgs.len = len; <span class="comment">/* 读写数据字节数*/</span></span><br><span class="line">	<span class="comment">/* 调用I2C设备接口传输数据*/</span></span><br><span class="line">	<span class="keyword">if</span> (rt_i2c_transfer(bus, &amp;msgs, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> RT_EOK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> -RT_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="i2c总线设备使用示例"><a href="#i2c总线设备使用示例" class="headerlink" title="i2c总线设备使用示例"></a>i2c总线设备使用示例</h1><p>I2C 设备的具体使用方式可以参考如下示例代码，示例代码的主要步骤如下：</p>
<ol>
<li><pre><code>首先根据I2C 设备名称查找I2C 名称，获取设备句柄，然后初始化aht10 传感器。
</code></pre>
</li>
<li><pre><code>控制传感器的2 的函数为写传感器寄存器write\_reg\(\) 和读传感器寄存器read\_regs\(\)
</code></pre>
</li>
</ol>
<p>这两个函数分别调用了rt_i2c_transfer() 传输数据。读取温湿度信息的函数read_temp_humi() 则是调用这两个函数完成功能。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 程序清单： 这是一个I2C 设备使用例程</span></span><br><span class="line"><span class="comment">* 例程导出了i2c_aht10_sample 命令到控制终端</span></span><br><span class="line"><span class="comment">* 命令调用格式： i2c_aht10_sample i2c1</span></span><br><span class="line"><span class="comment">* 命令解释： 命令第二个参数是要使用的I2C总线设备名称， 为空则使用默认的I2C总线设备</span></span><br><span class="line"><span class="comment">* 程序功能： 通过I2C 设备读取温湿度传感器aht10 的温湿度数据并打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_I2C_BUS_NAME <span class="string">&quot;i2c1&quot;</span> <span class="comment">/* 传感器连接的I2C总线设备名称*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_ADDR 0x38 <span class="comment">/* 从机地址*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_CALIBRATION_CMD 0xE1 <span class="comment">/* 校准命令*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_NORMAL_CMD 0xA8 <span class="comment">/* 一般命令*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT10_GET_DATA 0xAC <span class="comment">/* 获取数据命令*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_bus_device</span> *<span class="title">i2c_bus</span> =</span> RT_NULL; <span class="comment">/* I2C总线设备句柄*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_bool_t</span> initialized = RT_FALSE; <span class="comment">/* 传感器初始化状态*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写传感器寄存器*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">write_reg</span><span class="params">(<span class="keyword">struct</span> rt_i2c_bus_device *bus, <span class="type">rt_uint8_t</span> reg, <span class="type">rt_uint8_t</span>*data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">rt_uint8_t</span> buf[<span class="number">3</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_msg</span> <span class="title">msgs</span>;</span></span><br><span class="line">	buf[<span class="number">0</span>] = reg; <span class="comment">//cmd</span></span><br><span class="line">	buf[<span class="number">1</span>] = data[<span class="number">0</span>];</span><br><span class="line">	buf[<span class="number">2</span>] = data[<span class="number">1</span>];</span><br><span class="line">	msgs.addr = AHT10_ADDR;</span><br><span class="line">	msgs.flags = RT_I2C_WR;</span><br><span class="line">	msgs.buf = buf;</span><br><span class="line">	msgs.len = <span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 调用I2C设备接口传输数据*/</span></span><br><span class="line">	<span class="keyword">if</span> (rt_i2c_transfer(bus, &amp;msgs, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> RT_EOK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> -RT_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读传感器寄存器数据*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">read_regs</span><span class="params">(<span class="keyword">struct</span> rt_i2c_bus_device *bus, <span class="type">rt_uint8_t</span> len, <span class="type">rt_uint8_t</span>*buf)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_i2c_msg</span> <span class="title">msgs</span>;</span></span><br><span class="line">	msgs.addr = AHT10_ADDR;</span><br><span class="line">	msgs.flags = RT_I2C_RD;</span><br><span class="line">	msgs.buf = buf;</span><br><span class="line">	msgs.len = len;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 调用I2C设备接口传输数据*/</span></span><br><span class="line">	<span class="keyword">if</span> (rt_i2c_transfer(bus, &amp;msgs, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> RT_EOK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> -RT_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">read_temp_humi</span><span class="params">(<span class="type">float</span> *cur_temp, <span class="type">float</span> *cur_humi)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">rt_uint8_t</span> temp[<span class="number">6</span>];</span><br><span class="line">	write_reg(i2c_bus, AHT10_GET_DATA, <span class="number">0</span>); <span class="comment">/* 发送命令*/</span></span><br><span class="line">	rt_thread_mdelay(<span class="number">400</span>);</span><br><span class="line">	read_regs(i2c_bus, <span class="number">6</span>, temp); <span class="comment">/* 获取传感器数据*/</span></span><br><span class="line">	<span class="comment">/* 湿度数据转换*/</span></span><br><span class="line">	*cur_humi = (temp[<span class="number">1</span>] &lt;&lt; <span class="number">12</span> | temp[<span class="number">2</span>] &lt;&lt; <span class="number">4</span> | (temp[<span class="number">3</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) * <span class="number">100.0</span> / (<span class="number">1</span>&lt;&lt; <span class="number">20</span>);</span><br><span class="line">	<span class="comment">/* 温度数据转换*/</span></span><br><span class="line">	*cur_temp = ((temp[<span class="number">3</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">16</span> | temp[<span class="number">4</span>] &lt;&lt; <span class="number">8</span> | temp[<span class="number">5</span>]) * <span class="number">200.0</span> / (<span class="number">1</span> &lt;&lt; <span class="number">20</span>)- <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">aht10_init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">rt_uint8_t</span> temp[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">	<span class="comment">/* 查找I2C总线设备， 获取I2C总线设备句柄*/</span></span><br><span class="line">	i2c_bus = (<span class="keyword">struct</span> rt_i2c_bus_device *)rt_device_find(name);</span><br><span class="line">	<span class="keyword">if</span> (i2c_bus == RT_NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		rt_kprintf(<span class="string">&quot;can&#x27;t find %s device!\n&quot;</span>, name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		write_reg(i2c_bus, AHT10_NORMAL_CMD, temp);</span><br><span class="line">		rt_thread_mdelay(<span class="number">400</span>);</span><br><span class="line">		temp[<span class="number">0</span>] = <span class="number">0x08</span>;</span><br><span class="line">		temp[<span class="number">1</span>] = <span class="number">0x00</span>;</span><br><span class="line">		write_reg(i2c_bus, AHT10_CALIBRATION_CMD, temp);</span><br><span class="line">		rt_thread_mdelay(<span class="number">400</span>);</span><br><span class="line">		initialized = RT_TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">i2c_aht10_sample</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">float</span> humidity, temperature;</span><br><span class="line">	<span class="type">char</span> name[RT_NAME_MAX];</span><br><span class="line">	humidity = <span class="number">0.0</span>;</span><br><span class="line">	temperature = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		rt_strncpy(name, argv[<span class="number">1</span>], RT_NAME_MAX);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		rt_strncpy(name, AHT10_I2C_BUS_NAME, RT_NAME_MAX);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!initialized)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 传感器初始化*/</span></span><br><span class="line">		aht10_init(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (initialized)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 读取温湿度数据*/</span></span><br><span class="line">		read_temp_humi(&amp;temperature, &amp;humidity);</span><br><span class="line">		rt_kprintf(<span class="string">&quot;read aht10 sensor humidity : %d.%d %%\n&quot;</span>, (<span class="type">int</span>)humidity, (<span class="type">int</span>)</span><br><span class="line">		(humidity * <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>( temperature &gt;= <span class="number">0</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			rt_kprintf(<span class="string">&quot;read aht10 sensor temperature: %d.%d°C\n&quot;</span>, (<span class="type">int</span>)temperature,</span><br><span class="line">			(<span class="type">int</span>)(temperature * <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			rt_kprintf(<span class="string">&quot;read aht10 sensor temperature: %d.%d°C\n&quot;</span>, (<span class="type">int</span>)temperature,</span><br><span class="line">			(<span class="type">int</span>)(-temperature * <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		rt_kprintf(<span class="string">&quot;initialize sensor failed!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到msh 命令列表中*/</span></span><br><span class="line">MSH_CMD_EXPORT(i2c_aht10_sample, i2c aht10 sample);</span><br></pre></td></tr></table></figure>

<hr>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5eDAyMjQvYXJ0aWNsZS9kZXRhaWxzLzgzMzg1MTY4">句柄详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAyMjMxMjE0NjM0MC5odG1s">《嵌入式系统设计》<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbHViLnJ0LXRocmVhZC5vcmcvaW5kZXguaHRtbA==">RT-Thread 官方论坛<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ndWxiL2FydGljbGUvZGV0YWlscy84MTE3NDIzMw==">开漏、开集电路详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z5bXgyMDMvYXJ0aWNsZS9kZXRhaWxzLzg5NDI2NDAz">上拉、下拉电阻的原理和作用<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>RT-Thread</category>
      </categories>
      <tags>
        <tag>RT-Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【玩转 RT-Thread】线程管理原理</title>
    <url>/2022/04/28/rt-thread03/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在日常生活中，我们通常会将一个大的问题拆分细化，拆开成若干个小问题，通过逐个解决小问题，大问题也就解决了。<br>同样的在RT-Thread多线程操作系统中，开发人员基于这种分而治之的思想，将一个复杂的应用问题抽象成若干个小的、可调度的、可序列化的程序单元。当合理地划分任务并正确地执行时，这种设计能够让系统满足实时系统的性能及时间的要求。</p>
<p>下面看一个例子：我们的任务是读取传感器上的数据，并将相关数据显示出来。通过拆分结构，我们可以发现主要有两个任务：</p>
<blockquote>
<p>1.读取数据<br>2.显示数据</p>
</blockquote>
<p>简单来说，就是一个子任务不间断地读取传感器数据，并将数据写到共享内存中，另外一个子任务周期性的从共享内存中读取数据，并将传感器数据输出到显示屏上。  </p>
<p><img src="https://img-blog.csdnimg.cn/6d57696f2ffc4e859bf8c8c1ffc0789e.png">  </p>
<p>在RT-Thread 中，与上述子任务对应的程序实体就是线程，<code>线程是实现任务的载体</code>。<br>它是RT-Thread中<code>最基本的调度单位</code>，它描述了一个任务执行的运行环境，也描述了这个任务所处的优先等级，重要的任务可设置相对较高的<code>优先级</code>，非重要的任务可以设置较低的优先级，不同的任务还可以设置相同的优先级，轮流运行。<br><code>上下文：</code>当线程运行时，它会认为自己是以独占CPU 的方式在运行，线程执行时的运行环境称为上下文，具体来说就是各个变量和数据，包括所有的寄存器变量、堆栈、内存信息等。</p>
<span id="more"></span>

<h1 id="线程管理的功能特点"><a href="#线程管理的功能特点" class="headerlink" title="线程管理的功能特点"></a>线程管理的功能特点</h1><p>RT-Thread 线程管理的主要功能是<code>对线程进行管理和调度</code>，系统中总共存在两类线程，分别是<code>系统线程</code>和<code>用户线程</code>。系统线程是由RT-Thread 内核创建的线程，用户线程是由应用程序创建的线程，这两类线程都会从内核对象容器中分配线程对象，当线程被删除时，也会被从对象容器中删除。</p>
<p>如图所示，每个线程都有重要的属性，如线程控制块、线程栈、入口函数等。  </p>
<p><img src="https://img-blog.csdnimg.cn/5584a47897de430597897d3a6bddd710.png"></p>
<ul>
<li>RT-Thread 的线程调度器是<code>抢占式</code>的，主要的工作就是从就绪线程列表中查找最高优先级线程，保证最高优先级的线程能够被运行，最高优先级的任务一旦就绪，总能得到CPU 的使用权。</li>
<li>当一个运行着的线程使一个比它优先级高的线程满足运行条件，当前线程的CPU 使用权就被剥夺了，或者说被让出了，高优先级的线程立刻得到了CPU 的使用权。<br>如果是中断服务程序使一个高优先级的线程满足运行条件，中断完成时，被中断的线程挂起，优先级高的线程开始运行。</li>
<li>当调度器调度线程切换时，先将当前线程上下文保存起来，当再切回到这个线程时，线程调度器将该线程上下文信息恢复。</li>
</ul>
<h1 id="线程的工作机制"><a href="#线程的工作机制" class="headerlink" title="线程的工作机制"></a>线程的工作机制</h1><h2 id="线程控制块"><a href="#线程控制块" class="headerlink" title="线程控制块"></a>线程控制块</h2><p>在RT-Thread 中，线程控制块由结构体struct rt_thread 表示，线程控制块是操作系统用于管理线程的一个数据结构，它会存放线程的一些信息，例如优先级、线程名称、线程状态等，也包含线程与线程之间连接用的链表结构，线程等待事件集合等，详细定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 线程控制块*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_thread</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">/* rt 对象*/</span></span><br><span class="line">	<span class="type">char</span> name[RT_NAME_MAX]; <span class="comment">/* 线程名称*/</span></span><br><span class="line">	<span class="type">rt_uint8_t</span> type; <span class="comment">/* 对象类型*/</span></span><br><span class="line">	<span class="type">rt_uint8_t</span> flags; <span class="comment">/* 标志位*/</span></span><br><span class="line">	<span class="type">rt_list_t</span> <span class="built_in">list</span>; <span class="comment">/* 对象列表*/</span></span><br><span class="line">	<span class="type">rt_list_t</span> tlist; <span class="comment">/* 线程列表*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 栈指针与入口指针*/</span></span><br><span class="line">	<span class="type">void</span> *sp; <span class="comment">/* 栈指针*/</span></span><br><span class="line">	<span class="type">void</span> *entry; <span class="comment">/* 入口函数指针*/</span></span><br><span class="line">	<span class="type">void</span> *parameter; <span class="comment">/* 参数*/</span></span><br><span class="line">	<span class="type">void</span> *stack_addr; <span class="comment">/* 栈地址指针*/</span></span><br><span class="line">	<span class="type">rt_uint32_t</span> stack_size; <span class="comment">/* 栈大小*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 错误代码*/</span></span><br><span class="line">	<span class="type">rt_err_t</span> error; <span class="comment">/* 线程错误代码*/</span></span><br><span class="line">	<span class="type">rt_uint8_t</span> stat; <span class="comment">/* 线程状态*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 优先级*/</span></span><br><span class="line">	<span class="type">rt_uint8_t</span> current_priority; <span class="comment">/* 当前优先级*/</span></span><br><span class="line">	<span class="type">rt_uint8_t</span> init_priority; <span class="comment">/* 初始优先级*/</span></span><br><span class="line">	<span class="type">rt_uint32_t</span> number_mask;</span><br><span class="line">	......</span><br><span class="line">	<span class="type">rt_ubase_t</span> init_tick; <span class="comment">/* 线程初始化计数值*/</span></span><br><span class="line">	<span class="type">rt_ubase_t</span> remaining_tick; <span class="comment">/* 线程剩余计数值*/</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_timer</span> <span class="title">thread_timer</span>;</span> <span class="comment">/* 内置线程定时器*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> rt_thread *tid); <span class="comment">/* 线程退出清除函数*/</span></span><br><span class="line">	<span class="type">rt_uint32_t</span> user_data; <span class="comment">/* 用户数据*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>其中init_priority 是线程创建时指定的线程优先级，在线程运行过程当中是不会被改变的（除非用户 执行线程控制函数进行手动调整线程优先级）。</code></li>
<li><code>cleanup 会在线程退出时，被空闲线程回调一次以执行用户设置的清理现场等工作。</code></li>
<li><code>最后的一个成员user_data 可由用户挂接一些数据信息到线程控制块中，以提供类似线程私有数据的实现。</code></li>
</ul>
<h2 id="线程的重要属性"><a href="#线程的重要属性" class="headerlink" title="线程的重要属性"></a>线程的重要属性</h2><h3 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h3><ul>
<li>RT-Thread 线程具有独立的栈，当进行线程切换时，会将当前线程的上下文存在栈中，当线程要恢复运行时，再从栈中读取上下文信息，进行恢复。</li>
<li>线程栈还用来存放函数中的局部变量：函数中的局部变量从线程栈空间中申请；函数中局部变量初始时从寄存器中分配（ARM 架构），当这个函数再调用另一个函数时，这些局部变量将放入栈中。</li>
<li>对于线程第一次运行，可以以手工的方式构造这个上下文来设置一些初始的环境：入口函数（PC 寄存器）、入口参数（R0 寄存器）、返回位置（LR 寄存器）、当前机器运行状态（CPSR 寄存器）。</li>
<li>线程栈的增长方向是芯片构架密切相关的，RT-Thread 3.1.0 以前的版本，均只支持栈由高地址向低地址增长的方式，对于ARM Cortex-M 架构，线程栈可构造如下图所示。<br><img src="https://img-blog.csdnimg.cn/041732b5e1fd43d5a62382931ad50360.png"></li>
</ul>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>线程运行的过程中，同一时间内只允许一个线程在处理器中运行，从运行的过程上划分，线程有多种不同的运行状态，如初始状态、挂起状态、就绪状态等。<br>在RT-Thread 中，线程包含五种状态，操作系统会自动根据它运行的情况来动态调整它的状态。如下表所示：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>初始态</td>
<td>当线程刚开始创建还没开始运行时就处于初始状态；在初始状态下，线程不参与调度。此状态在RT-Thread 中的宏定义为RT_THREAD_INIT</td>
</tr>
<tr>
<td>就绪态</td>
<td>在就绪状态下，线程按照优先级排队，等待被执行；一旦当前线程运行完毕让出处理器，操作系统会马上寻找最高优先级的就绪态线程运行。此状态在RT-Thread 中的宏定义为RT_THREAD_READY</td>
</tr>
<tr>
<td>运行态</td>
<td>线程当前正在运行。在单核系统中，只有rt_thread_self() 函数返回的线程处于运行状态；在多核系统中，可能就不止这一个线程处于运行状态。此状态在RT-Thread 中的宏定义为RT_THREAD_RUNNING</td>
</tr>
<tr>
<td>挂起态</td>
<td>也称阻塞态。它可能因为资源不可用而挂起等待，或线程主动延时一段时间而挂起。在挂起状态下，线程不参与调度。此状态在RT-Thread 中的宏定义为RT_THREAD_SUSPEND</td>
</tr>
<tr>
<td>关闭态</td>
<td>当线程运行结束时将处于关闭状态。关闭状态的线程不参与线程的调度。此状态在RT-Thread 中的宏定义为RT_THREAD_CLOSE</td>
</tr>
</tbody></table>
<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul>
<li><p>RT-Thread 线程的优先级是表示线程被调度的优先程度。每个线程都具有优先级，线程越重要，赋予的优先级就应越高，线程被调度的可能才会越大。</p>
</li>
<li><p>RT-Thread 最大支持256 个线程优先级(0~255)，数值越小的优先级越高，0 为最高优先级。在一些资源比较紧张的系统中，可以根据实际情况选择只支持8 个或32 个优先级的系统配置；对于ARM Cortex-M系列，普遍采用32 个优先级。最低优先级默认分配给空闲线程使用，用户一般不使用。在系统中，当有比当前线程优先级更高的线程就绪时，当前线程将立刻被换出，高优先级线程抢占处理器运行。</p>
</li>
</ul>
<h3 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h3><blockquote>
<p>每个线程都有时间片这个参数，但时间片仅对优先级相同的就绪态线程有效。系统对优先级相同的就绪态线程采用时间片轮转的调度方式进行调度时，时间片起到约束线程单次运行时长的作用，其单位是一个系统节拍（OS Tick）。</p>
</blockquote>
<p>假设有2 个<code>优先级相同的就绪态线程A 与B</code>，A 线程的时间片设置为10，B 线程的时间片设置为5，那么当系统中不存在比A 优先级高的就绪态线程时，系统会在A、B 线程间来回切换执行，并且每次对A 线程执行10 个节拍的时长，对B 线程执行5 个节拍的时长，如下图。  </p>
<p><img src="https://img-blog.csdnimg.cn/31c4fb41bf8947c1a47864b12b9e602e.png"></p>
<h3 id="线程的入口函数"><a href="#线程的入口函数" class="headerlink" title="线程的入口函数"></a>线程的入口函数</h3><p>线程控制块中的<code>entry</code>是线程的入口函数，它是线程实现预期功能的函数。</p>
<p>线程的入口函数由用户设计实现，一般有以下两种代码形式：  </p>
<p>1.<code>无限循环模式</code></p>
<blockquote>
<p>在实时系统中，线程通常是被动式的：这个是由实时系统的特性所决定的，实时系统通常总是等待外<br>界事件的发生，而后进行相应的服务：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span>* paramenter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 等待事件的发生*/</span></span><br><span class="line">		<span class="comment">/* 对事件进行服务、进行处理*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作为一个实时系统，一个优先级明确的实时系统，如果一个线程中的程序陷入了死循环操作，那么比它优先级低的线程都将不能够得到执行。<br>所以在实时操作系统中必须注意的一点就是：<strong>线程中不能陷入死循环操作，必须要有让出CPU使用权的动作，如循环中调用延时函数或者主动挂起。用户设计这种无线循环的线程的目的，就是为了让这个线程一直被系统循环调度运行，永不删除。</strong></p>
</blockquote>
<p>2.<code>顺序执行或有限次循环模式</code></p>
<blockquote>
<p>如简单的顺序语句、do whlie() 或for() 循环等，此类线程不会循环或不会永久循环，可谓是“一次性”线程，一定会被执行完毕。在执行完毕后，线程将被系统自动删除。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span>* parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* 处理事务#1 */</span></span><br><span class="line">	…</span><br><span class="line">	<span class="comment">/* 处理事务#2 */</span></span><br><span class="line">	…</span><br><span class="line">	<span class="comment">/* 处理事务#3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见的线程错误码"><a href="#常见的线程错误码" class="headerlink" title="常见的线程错误码"></a>常见的线程错误码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EOK 0 <span class="comment">/* 无错误*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_ERROR 1 <span class="comment">/* 普通错误*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_ETIMEOUT 2 <span class="comment">/* 超时错误*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EFULL 3 <span class="comment">/* 资源已满*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EEMPTY 4 <span class="comment">/* 无资源*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_ENOMEM 5 <span class="comment">/* 无内存*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_ENOSYS 6 <span class="comment">/* 系统不支持*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EBUSY 7 <span class="comment">/* 系统忙*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EIO 8 <span class="comment">/* IO 错误*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EINTR 9 <span class="comment">/* 中断系统调用*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_EINVAL 10 <span class="comment">/* 非法参数*/</span></span></span><br></pre></td></tr></table></figure>

<h2 id="线程状态切换"><a href="#线程状态切换" class="headerlink" title="线程状态切换"></a>线程状态切换</h2><p>RT-Thread 提供一系列的操作系统调用接口，使得线程的状态在这五个状态之间来回切换。几种状态间的转换关系如下图所示：<br><img src="https://img-blog.csdnimg.cn/3c79cc6198144f02b4830d4521384c30.png"></p>
<blockquote>
<ul>
<li>线程通过调用函数<code>rt_thread_create/init()</code> 进入到初始状态<code>（RT_THREAD_INIT）</code>；</li>
<li>初始状态的线程通过调用函数<code>rt_thread_startup()</code> 进入到就绪状态<code>（RT_THREAD_READY）</code>；</li>
<li>就绪状态的线程被调度器调度后进入运行状态<code>（RT_THREAD_RUNNING）</code>；</li>
<li>当处于运行状态的线程调用rt_thread_delay()，rt_sem_take()，rt_mutex_take()，rt_mb_recv() 等函数或者获取不到资源时， 将进入到挂起状态<code>（RT_THREAD_SUSPEND）</code>；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>处于挂起状态的线程，如果等待超时依然未能获得资源或由于其他线程释放了资源，那么它将返回到就绪状态。</li>
<li>挂起状态的线程，如果调用<code>rt_thread_delete/detach()</code> 函数，将更改为关闭状态<code>（RT_THREAD_CLOSE）</code>；</li>
<li>而运行状态的线程，如果运行结束，就会在线程的最后部分执行<code>rt_thread_exit()</code> 函数，将状态更改为关闭状态。</li>
</ul>
</blockquote>
<p><strong><code>!!! note “注意事项” RT-Thread 中，实际上线程并不存在运行状态，就绪状态和运行状态是等同的。</code></strong></p>
<h2 id="系统线程"><a href="#系统线程" class="headerlink" title="系统线程"></a>系统线程</h2><p>系统线程是指由系统创建的线程，用户线程是由用户程序调用线程管理接口创建的线程，在RT-Thread 内核中的系统线程有空闲线程和主线程。</p>
<h3 id="空闲线程"><a href="#空闲线程" class="headerlink" title="空闲线程"></a>空闲线程</h3><p><code>空闲线程</code>是系统创建的最低优先级的线程，线程状态<code>永远为就绪态</code>。当系统中无其他就绪线程存在时，调度器将调度到空闲线程，它通常是一个死循环，且永远不能被挂起。</p>
<p>另外，空闲线程在RT-Thread 也有着它的特殊用途：</p>
<ul>
<li>若某线程运行完毕，系统将自动删除线程：自动执行rt_thread_exit() 函数，先将该线程从系统就绪队列中删除，再将该线程的状态更改为关闭状态，不再参与系统调度，然后挂入rt_thread_defunct 僵尸队列（资源未回收、处于关闭状态的线程队列）中，最后空闲线程会回收被删除线程的资源。</li>
<li>空闲线程也提供了接口来运行用户设置的钩子函数，在空闲线程运行时会调用该钩子函数，适合钩入功耗管理、看门狗喂狗等工作。（关于<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAxMzIxNzcvYXJ0aWNsZS9kZXRhaWxzLzExMDcwNDcyMT9vcHNfcmVxdWVzdF9taXNjPSZyZXF1ZXN0X2lkPSZiaXpfaWQ9MTAyJnV0bV90ZXJtPSVFOSU5MiVBOSVFNSVBRCU5MCVFNSU4NyVCRCVFNiU5NSVCMCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1d2VifmRlZmF1bHQtMC0xMTA3MDQ3MjEubm9uZWNhc2Umc3BtPTEwMTguMjIyNi4zMDAxLjQxODc=">钩子函数<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3L2FydGljbGUvZGV0YWlscy85OTEyMTY0NT9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NDk4MzcwMDYxNjc4MDI2OTg3OTIxNSUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTI1MjIlMjU3RCZyZXF1ZXN0X2lkPTE2NDk4MzcwMDYxNjc4MDI2OTg3OTIxNSZiaXpfaWQ9MCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTk5MTIxNjQ1LjE0MiU1RXY3JTVFYXJ0aWNsZV9zY29yZV9yYW5rLDE1NyU1RXY0JTVFY29udHJvbCZ1dG1fdGVybT0lRTclOUMlOEIlRTklOTclQTglRTclOEIlOTcmc3BtPTEwMTguMjIyNi4zMDAxLjQxODc=">看门狗<i class="fa fa-external-link-alt"></i></span>不懂的可以看这里）</li>
</ul>
<h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><p>在系统启动时，系统会创建main 线程，它的入口函数为main_thread_entry()，用户的应用入口函数main() 就是从这里真正开始的，系统调度器启动后，main 线程就开始运行。</p>
<p>过程如下图，用户可以在main() 函数里添加自己的应用程序初始化代码。  </p>
<p><img src="https://img-blog.csdnimg.cn/b08911ca57334476945d473ab814f006.png"></p>
<h1 id="线程的管理方式"><a href="#线程的管理方式" class="headerlink" title="线程的管理方式"></a>线程的管理方式</h1><p>可以使用rt_thread_create() 创建一个动态线程，使用rt_thread_init() 初始化一个静态线程。</p>
<p>动态线程与静态线程的区别是：动态线程是系统自动从动态内存堆上分配栈空间与线程句柄（初始化heap 之后才能使用create 创建动态线程），静态线程是由用户分配栈空间与线程句柄。</p>
<p>下图描述了线程的相关操作，包含：创建&#x2F; 初始化线程、启动线程、运行线程、删除&#x2F; 脱离线程。</p>
<p><img src="https://img-blog.csdnimg.cn/fea91f8134b648ccaefeb5cf201de15f.png"></p>
<h2 id="创建和删除线程"><a href="#创建和删除线程" class="headerlink" title="创建和删除线程"></a>创建和删除线程</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p>一个线程要成为可执行的对象，就必须由操作系统的内核来为它创建一个线程。可以通过如下的接口创建一个动态线程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> <span class="title function_">rt_thread_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name,</span></span><br><span class="line"><span class="params">							 <span class="type">void</span> (*entry)(<span class="type">void</span>* parameter),</span></span><br><span class="line"><span class="params">							 <span class="type">void</span>* parameter,</span></span><br><span class="line"><span class="params">							 <span class="type">rt_uint32_t</span> stack_size,</span></span><br><span class="line"><span class="params">							 <span class="type">rt_uint8_t</span> priority,</span></span><br><span class="line"><span class="params">							 <span class="type">rt_uint32_t</span> tick)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用这个函数时，系统会从动态堆内存中分配一个线程句柄以及按照参数中指定的栈大小从动态堆内存中分配相应的空间。分配出来的栈空间是按照rtconfig.h 中配置的RT_ALIGN_SIZE 方式对齐。</p>
</blockquote>
<p>线程创建rt_thread_create() 的参数和返回值见下图：  </p>
<p><img src="https://img-blog.csdnimg.cn/f1ba4c76de384fcc91060025bff4bef7.png"></p>
<h3 id="删除线程"><a href="#删除线程" class="headerlink" title="删除线程"></a>删除线程</h3><p>对于一些使用rt_thread_create() 创建出来的线程，当不需要使用，或者运行出错时，我们可以使用下面的函数接口来从系统中把线程完全删除掉：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_delete</span><span class="params">(<span class="type">rt_thread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure>

<p>调用该函数后，线程对象将会被移出线程队列并且从内核对象管理器中删除，线程占用的堆栈空间也会被释放，收回的空间将重新用于其他的内存分配。实际上，用rt_thread_delete() 函数删除线程接口，仅仅是把相应的线程状态更改为RT_THREAD_CLOSE 状态，然后放入到rt_thread_defunct 队列中；而真正的删除动作（释放线程控制块和释放线程栈）需要到下一次执行空闲线程时，由空闲线程完成最后的线程删除动作。</p>
<p>线程删除rt_thread_delete() 接口的参数和返回值见下图：  </p>
<p><img src="https://img-blog.csdnimg.cn/eb9a07efdd95454c8873506f5178d1ff.png">  </p>
<p><code>这个函数仅在使能了系统动态堆时才有效（即RT_USING_HEAP 宏定义已经定义了）。</code></p>
<h2 id="初始化和脱离线程"><a href="#初始化和脱离线程" class="headerlink" title="初始化和脱离线程"></a>初始化和脱离线程</h2><h3 id="初始化线程"><a href="#初始化线程" class="headerlink" title="初始化线程"></a>初始化线程</h3><p><code>线程的初始化</code>可以使用下面的函数接口完成，来初始化静态线程对象：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_init</span><span class="params">(<span class="keyword">struct</span> rt_thread* thread,</span></span><br><span class="line"><span class="params">					    <span class="type">const</span> <span class="type">char</span>* name,</span></span><br><span class="line"><span class="params">						<span class="type">void</span> (*entry)(<span class="type">void</span>* parameter), <span class="type">void</span>* parameter,</span></span><br><span class="line"><span class="params">						<span class="type">void</span>* stack_start, <span class="type">rt_uint32_t</span> stack_size,</span></span><br><span class="line"><span class="params">						<span class="type">rt_uint8_t</span> priority, <span class="type">rt_uint32_t</span> tick)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c1e6ca6ef6b84ebe93d0888ff71332af.png"></p>
<h3 id="脱离线程"><a href="#脱离线程" class="headerlink" title="脱离线程"></a>脱离线程</h3><p>对于用rt_thread_init() 初始化的线程，使用rt_thread_detach() 将使线程对象在线程队列和内核对象管理器中被脱离。线程脱离函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_detach</span> <span class="params">(<span class="type">rt_thread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>thread</td>
<td>线程句柄，它应该是由rt_thread_init 进行初始化的线程句柄。</td>
</tr>
<tr>
<td>返回</td>
<td>—</td>
</tr>
<tr>
<td>RT_EOK</td>
<td>线程脱离成功</td>
</tr>
<tr>
<td>-RT_ERROR</td>
<td>线程脱离失败</td>
</tr>
</tbody></table>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><p>创建（初始化）的线程状态处于初始状态，并未进入就绪线程的调度队列，我们可以在线程初始化&#x2F;创建成功后调用下面的函数接口让该线程进入就绪态：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_startup</span><span class="params">(<span class="type">rt_thread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/431f38ae0feb46dc833f9835ec57577e.png"></p>
<blockquote>
<p>当调用这个函数时，将把线程的状态更改为就绪状态，并放到相应优先级队列中等待调度。如果新启<br>动的线程优先级比当前线程优先级高，将立刻切换到这个线程。</p>
</blockquote>
<h2 id="获得当前线程"><a href="#获得当前线程" class="headerlink" title="获得当前线程"></a>获得当前线程</h2><p>在程序的运行过程中，相同的一段代码可能会被多个线程执行，在执行的时候可以通过下面的函数接口获得当前执行的线程句柄：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> <span class="title function_">rt_thread_self</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/33c1e79ddc8b42c0a28237a91e67b92c.png"></p>
<h2 id="使线程出让处理器资源"><a href="#使线程出让处理器资源" class="headerlink" title="使线程出让处理器资源"></a>使线程出让处理器资源</h2><blockquote>
<p>当前线程的时间片用完或者该线程主动要求让出处理器资源时，它将不再占有处理器，调度器会选择相同优先级的下一个线程执行。线程调用这个接口后，这个线程仍然在就绪队列中。</p>
</blockquote>
<p>线程让出处理器使用下面的函数接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用该函数后，当前线程首先把自己从它所在的就绪优先级线程队列中删除，然后把自己挂到这个优先级队列链表的尾部，然后激活调度器进行线程上下文切换（如果当前优先级只有这一个线程，则这个线程继续执行，不进行上下文切换动作）。</p>
</blockquote>
<h2 id="使线程睡眠"><a href="#使线程睡眠" class="headerlink" title="使线程睡眠"></a>使线程睡眠</h2><blockquote>
<p>在实际应用中，我们有时需要让运行的当前线程延迟一段时间，在指定的时间到达后重新运行，这就叫做“线程睡眠”。</p>
</blockquote>
<p>线程睡眠可使用以下三个函数接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_sleep</span><span class="params">(<span class="type">rt_tick_t</span> tick)</span>;</span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_delay</span><span class="params">(<span class="type">rt_tick_t</span> tick)</span>;</span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_mdelay</span><span class="params">(<span class="type">rt_int32_t</span> ms)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6ebefaeea61f48a7b26d43e0d6589055.png"></p>
<h2 id="挂起和恢复线程"><a href="#挂起和恢复线程" class="headerlink" title="挂起和恢复线程"></a>挂起和恢复线程</h2><h3 id="线程挂起"><a href="#线程挂起" class="headerlink" title="线程挂起"></a>线程挂起</h3><blockquote>
<ul>
<li>当线程调用rt_thread_delay() 时，线程将主动挂起；当调用rt_sem_take()，rt_mb_recv() 等函数时，资源不可使用也将导致线程挂起。</li>
<li>处于挂起状态的线程，如果其等待的资源超时（超过其设定的等待时间），那么该线程将不再等待这些资源，并返回到就绪状态；或者，当其他线程释放掉该线程所等待的资源时，该线程也会返回到就绪状态。</li>
</ul>
</blockquote>
<p><code>线程挂起</code>使用下面的函数接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_suspend</span> <span class="params">(<span class="type">rt_thread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/eed2dcfd794040798637c029b253fb87.png">  </p>
<p><code>!!! note “注意事项” 通常不应该使用这个函数来挂起线程本身， 如果确实需要采用rt_thread_suspend() 函数挂起当前任务， 需要在调用rt_thread_suspend() 函数后立刻调用rt_schedule() 函数进行手动的线程上下文切换。</code></p>
<h3 id="恢复线程"><a href="#恢复线程" class="headerlink" title="恢复线程"></a>恢复线程</h3><blockquote>
<p>恢复线程就是让挂起的线程重新进入就绪状态，并将线程放入系统的就绪队列中；如果被恢复线程在<br>所有就绪态线程中，位于最高优先级链表的第一位，那么系统将进行线程上下文的切换。</p>
</blockquote>
<p><code>线程恢复</code>使用下面的函数接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_resume</span> <span class="params">(<span class="type">rt_thread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0640fc789a1645d3b424f605d3aca937.png"></p>
<h2 id="控制线程"><a href="#控制线程" class="headerlink" title="控制线程"></a>控制线程</h2><p>当需要对线程进行一些其他控制时，例如动态更改线程的优先级，可以调用如下函数接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_control</span><span class="params">(<span class="type">rt_thread_t</span> thread, <span class="type">rt_uint8_t</span> cmd, <span class="type">void</span>* arg)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/348eb561864549528d9695d8f504af92.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">指示控制命令cmd 当前支持的命令包括：</span><br><span class="line">•RT_THREAD_CTRL_CHANGE_PRIORITY：动态更改线程的优先级；</span><br><span class="line">•RT_THREAD_CTRL_STARTUP：开始运行一个线程，等同于rt_thread_startup() 函数调用；</span><br><span class="line">•RT_THREAD_CTRL_CLOSE：关闭一个线程，等同于rt_thread_delete() 函数调用。</span><br></pre></td></tr></table></figure>

<h2 id="设置和删除空闲钩子"><a href="#设置和删除空闲钩子" class="headerlink" title="设置和删除空闲钩子"></a>设置和删除空闲钩子</h2><blockquote>
<p>空闲钩子函数是空闲线程的钩子函数，如果设置了空闲钩子函数，就可以在系统执行空闲线程时，自动执行空闲钩子函数来做一些其他事情，比如系统指示灯。</p>
</blockquote>
<p>设置&#x2F; 删除空闲钩子的接口如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_idle_sethook</span><span class="params">(<span class="type">void</span> (*hook)(<span class="type">void</span>))</span>;</span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_thread_idle_delhook</span><span class="params">(<span class="type">void</span> (*hook)(<span class="type">void</span>))</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>hook</td>
<td>设置&#x2F;删除的钩子函数</td>
</tr>
<tr>
<td>返回</td>
<td>—</td>
</tr>
<tr>
<td>RT-EOK</td>
<td>设置&#x2F;删除成功</td>
</tr>
<tr>
<td>-RT_EFULL</td>
<td>设置失败</td>
</tr>
<tr>
<td>-RT_ENOSYS</td>
<td>删除失败</td>
</tr>
</tbody></table>
<p><code>!!! note “注意事项” 空闲线程是一个线程状态永远为就绪态的线程，因此设置的钩子函数必须保证空闲线程在任何时刻都不会处于挂起状态，例如rt_thread_delay()，rt_sem_take() 等可能会导致线程挂起的函数都不能使用。</code></p>
<h2 id="设置调度器钩子"><a href="#设置调度器钩子" class="headerlink" title="设置调度器钩子"></a>设置调度器钩子</h2><p><code>在整个系统的运行时，系统都处于线程运行、中断触发- 响应中断、切换到其他线程，甚至是线程间的切换过程中，或者说系统的上下文切换是系统中最普遍的事件。有时用户可能会想知道在一个时刻发生了什么样的线程切换，可以通过调用下面的函数接口设置一个相应的钩子函数。</code></p>
<p>在系统线程切换时，这个钩子函数将被调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rt_scheduler_sethook</span><span class="params">(<span class="type">void</span> (*hook)(<span class="keyword">struct</span> rt_thread* from, <span class="keyword">struct</span> rt_thread* to))</span>;</span><br></pre></td></tr></table></figure>

<p><code>设置调度器钩子函数的输入参数</code>如下表所示：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>hook</td>
<td>表示用户定义的钩子函数指针</td>
</tr>
</tbody></table>
<p><code>钩子函数hook() 的声明</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void hook(struct rt_thread* from, struct rt_thread* to);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>from</td>
<td>表示系统所要切换出的线程控制块指针</td>
</tr>
<tr>
<td>to</td>
<td>表示系统所要切换到的线程控制块指针</td>
</tr>
</tbody></table>
<p><code>!!! note “注意事项” 请仔细编写你的钩子函数，稍有不慎将很可能导致整个系统运行不正常（在这个 钩子函数中，基本上不允许调用系统API，更不应该导致当前运行的上下文挂起）。</code></p>
<hr>
<p>参考资料：  </p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3L2FydGljbGUvZGV0YWlscy85OTEyMTY0NT9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NDk4MzcwMDYxNjc4MDI2OTg3OTIxNSUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTI1MjIlMjU3RCZyZXF1ZXN0X2lkPTE2NDk4MzcwMDYxNjc4MDI2OTg3OTIxNSZiaXpfaWQ9MCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTk5MTIxNjQ1LjE0MiU1RXY3JTVFYXJ0aWNsZV9zY29yZV9yYW5rLDE1NyU1RXY0JTVFY29udHJvbCZ1dG1fdGVybT0lRTclOUMlOEIlRTklOTclQTglRTclOEIlOTcmc3BtPTEwMTguMjIyNi4zMDAxLjQxODc=">【STM32】HAL库 STM32CubeMX教程五—-看门狗(独立看门狗,窗口看门狗)<i class="fa fa-external-link-alt"></i></span>  </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAxMzIxNzcvYXJ0aWNsZS9kZXRhaWxzLzExMDcwNDcyMT9vcHNfcmVxdWVzdF9taXNjPSZyZXF1ZXN0X2lkPSZiaXpfaWQ9MTAyJnV0bV90ZXJtPSVFOSU5MiVBOSVFNSVBRCU5MCVFNSU4NyVCRCVFNiU5NSVCMCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1d2VifmRlZmF1bHQtMC0xMTA3MDQ3MjEubm9uZWNhc2Umc3BtPTEwMTguMjIyNi4zMDAxLjQxODc=">什么是钩子函数<i class="fa fa-external-link-alt"></i></span>  </li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMv">RT-Thread文档中心<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU2OTE0MTQ2L2FydGljbGUvZGV0YWlscy8xMjQxNDUxNTM=">【操作系统】进程上下文和线程上下文<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>RT-Thread</category>
      </categories>
      <tags>
        <tag>RT-Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>双击运行 jar 文件</title>
    <url>/2022/03/22/run-jar-file/</url>
    <content><![CDATA[<blockquote>
<p>windows 下设置双击运行 jar 文件</p>
</blockquote>
<p>大家都知道，项目打包的 jar 文件应该是可以直接运行的，虽然我们也可以用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<p>运行，但是总归是麻烦些，要是能双击直接打开岂不是很方便，下面我们就来一起看看怎么操作吧</p>
<span id="more"></span>

<p>首先确保本地 <code>java</code> 的开发环境配置成功，<code>cmd</code> 执行指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>正确显示版本号则配置无误，未配置过的朋友请<span class="exturl" data-url="aHR0cHM6Ly9kcC1qc29uLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzExODg3NTk2Nw==">参考这里<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/dcf6e9547cde4c3786b12f6b84dd6c77.png"></p>
<p>接下来我们找到一个可以执行的 <code>jar</code> 包，右键选择 <strong>打开方式</strong> 为 <code>jdk</code> 安装目录下的 <code>java\jdk1.8.0_221\bin\javaw.exe</code>，并勾选 <strong>始终用此程序打开</strong> </p>
<p><img src="https://img-blog.csdnimg.cn/c6a7e1cdf07e4aef817ef22f9c2860e5.png"></p>
<p><code>Win + R</code> 组合键输入 <code>regedit</code> 打开注册表编辑器找到<code>HKEY_CLASSES_ROOT\Applications\javaw.exe\shell\open\command</code></p>
<p><img src="https://img-blog.csdnimg.cn/3a02f0db31474e6980c1c6d8b638b5fa.png"></p>
<p>右键修改值，路径后添加 <code> -jar &quot;%1&quot; %*</code> 注意 <code> -</code> 前方有一个空格</p>
<p><img src="https://img-blog.csdnimg.cn/27bd07380d334c4cb02b9d2a9ee3d4f0.png"></p>
<p>修改后返回 <code>jar</code> 包的位置，发现已经改变了，双击即可运行</p>
<p><img src="https://img-blog.csdnimg.cn/11e79d2bce91475899c97d52f5a721fa.png"></p>
<p>有时候可能被电脑里的解压程序默认关联了文件格式，这时候如果未生效的话需要到相关软件中取消文件格式关联</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器部署 code-server</title>
    <url>/2021/03/03/setup-code-server/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cDovL3ZzYy5jb2Rlci1qYXNvbi5jbjo4MDgwLw==">效果预览<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>记录实际操作中的一些坑，下面放上项目地址，感兴趣的小伙伴请阅读官方文档</p>
</blockquote>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZGVyL2NvZGUtc2VydmVy">https://github.com/coder/code-server<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><blockquote>
<p>本文配置环境为 : aliyun ECS + Centos 8.2</p>
</blockquote>
<span id="more"></span>

<h1 id="开始上手"><a href="#开始上手" class="headerlink" title="开始上手"></a>开始上手</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用远程工具（推荐 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS9lbi8=">XShell<i class="fa fa-external-link-alt"></i></span> ，有<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS9lbi9mcmVlLWZvci1ob21lLXNjaG9vbC8=">免费的家庭和学生版<i class="fa fa-external-link-alt"></i></span>）链接服务器后，有以下两种方式装载所需包</p>
<ol>
<li>命令下载并解压进入解压后文件内</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/cdr/code-server/releases/download/v4.0.1/code-server-4.0.1-linux-amd64.tar.gz </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf code-server-4.0.1-linux-amd64.tar.gz  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录中</span></span><br><span class="line"><span class="built_in">cd</span>  code-server-4.0.1-linux-amd64/   </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>下载到本地再上传至服务器</li>
</ol>
<h2 id="修改默认-IP"><a href="#修改默认-IP" class="headerlink" title="修改默认 IP"></a>修改默认 IP</h2><p>为避免默认 IP 限制问题，我们直接编辑 config 文件，然后再打开访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入文件中</span></span><br><span class="line">vim ~/.config/code-server/config.yaml </span><br></pre></td></tr></table></figure>

<p>按键盘 <kbd>i</kbd> 键进入编辑模式，修改完后按键盘 <kbd>Esc</kbd> 键，输入指令 <code>:wq</code> 保存退出</p>
<p><img src="https://img-blog.csdnimg.cn/abc6baae64fa40eaa64f37cb7bb3b29e.png"></p>
<p>因为默认是只能给 ip 127.0.0.1 端口 8080 访问的，但是我们大部分的电脑没有固定的 ip ，所以我们设置为 0.0.0.0（端口可修改，修改前请在服务器安全组中放行自定义端口，系统防火墙中同样需要放行），让所有的 ip 都能访问到</p>
<p>密码可以在此处修改也可以按下方步骤操作，但注意不要加特殊字符，例如：&#x3D;&#x3D;@&#x3D;&#x3D;，启动会报错</p>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>添加密码到环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;your password&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动服务前请确保当前目录在解压后的文件夹内，执行如下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/code-server</span><br></pre></td></tr></table></figure>

<p>浏览器中输入公网 IP ，测试是否可以正常访问</p>
<p><img src="https://img-blog.csdnimg.cn/d34aa4cd5a5b4e8b9f67ba7c7c509ee8.png"></p>
<p>输入刚才设置的密码，就能进入 云上 IDE 啦</p>
<p><img src="https://img-blog.csdnimg.cn/68d73c869e714261ace221d5f3674827.png"></p>
<h2 id="添加后台进程"><a href="#添加后台进程" class="headerlink" title="添加后台进程"></a>添加后台进程</h2><p>我们现在使用的是链接工具，输入启动命令的方式来运行 code-sesrver ，那我们要是想实现随时随地都能链接到服务的目的，必须让它保持后台进程，这里推荐使用 tmux</p>
<p>使用包管理器安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 、 Debian</span></span><br><span class="line">sudo apt-get install tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 、 Fedora</span></span><br><span class="line">sudo yum install tmux</span><br></pre></td></tr></table></figure>

<p>创建新会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s vscode_online</span><br></pre></td></tr></table></figure>

<p>在该会话中执行 code-server 启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/code-server --port 8080 --host 0.0.0.0 --auth password</span><br></pre></td></tr></table></figure>

<p>这样服务就能常驻后台，随时可以访问到了，使用以下命令用于查看&#x2F;关闭服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接入会话</span></span><br><span class="line">tmux a -t vscode_online</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束会话</span></span><br><span class="line">tmux kill-session -t vscode_online</span><br></pre></td></tr></table></figure>

<h1 id="优化提升"><a href="#优化提升" class="headerlink" title="优化提升"></a>优化提升</h1><ul>
<li>主要就是为服务绑定域名，添加证书，比较容易，请移步文末参考资料处</li>
<li>不足：目前是 端口号+域名 访问，未配置 <strong>反向代理</strong>，后续补充</li>
</ul>
<hr>
<p>参考资料:</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85YzZlYTcwNjUyNTY=">code-server部署<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTkvMTAvdG11eC5odG1s">Tmux 使用教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjY2NmJhYnkuY29tLzIwMjEvMDgvMjIvdXNlLWNvZGUtc2VydmVyLw==">搭建网页版VSCode(code-server)<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>网站建设</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 搭建免费图床</title>
    <url>/2021/09/05/setup-image-storage/</url>
    <content><![CDATA[<p>文章开始前，先给大家科普下 Typora 和 SM.MS 是什么，当然，对于经常写博客的小伙伴并不陌生</p>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><image src="https://img-blog.csdnimg.cn/fb30d63fee9f4d4c8c0cd55881e60edf.gif" width="80%">

<p><span class="exturl" data-url="aHR0cHM6Ly90eXBvcmEuaW8vIw==">Typora<i class="fa fa-external-link-alt"></i></span> 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>，拥有 OS X、Windows、Linux 三大平台版本，且完全免费</p>
<span id="more"></span>

<p>它的功能巨多，进入 “偏好设置” 选项卡中，你就会知道这款编辑器设计的有多么地人性化，多么地细节，简直是众多 Markdown 编辑器里的领头羊，像打字机模式、专注模式、源代码模式、实时预览、文件&#x2F;大纲侧边栏等一系列功能应有尽有</p>
<p>官方特性介绍：Typora为您提供了一个无缝的体验，作为读者和作者。它删除了预览窗口，模式切换器，markdown源代码的语法符号，和所有其他不必要的干扰。相反 ,它提供了一个真实的实时预览功能，以帮助您集中精力于内容本身</p>
<p>对于经常写博客的小伙伴，特别是在多平台分享的朋友，拥有这样一个 “利器” ，搭配上程序猿们忠爱的 GitHub 主题，那感觉简直不要太爽</p>
<h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>举个栗子，这篇博客里你所看到的图片，它们存放的位置是哪里呢？图片在我电脑的某个磁盘里，你是怎么看到的呢？显然，你看到的是 “网上” 的图片，图床就是储存图片的服务器，我们发朋友圈、空间、微博里的图片都上传到了各个平台自家的图床，供天涯海角的小伙伴查看</p>
<p>图床有国内和国外之分：国外的图床由于网络、距离等因素访问速度较慢，严重影响图片显示速度，国内也分为单线空间、多线空间和 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DRE4vNDIwOTUx">CDN加速<i class="fa fa-external-link-alt"></i></span> 三种</p>
<h1 id="Typora配置图床"><a href="#Typora配置图床" class="headerlink" title="Typora配置图床"></a>Typora配置图床</h1><p>打开 Typora 中的 “偏好设置”，下载 PicGo（一个用于快速上传图片并获取图片 URL 链接的工具）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ceeb8d6c3df2318db880f34b6bb798c9.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz">GitHub地址<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMV9rNlFmZ19helBYUFNobGlDZ0Y3YWc=">网盘地址<i class="fa fa-external-link-alt"></i></span>，提取码：peng</p>
<p>设定图片插入规则</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a18233ac2882580a6a36c85b549271a6.png"></p>
<p>软件主界面</p>
<p><img src="https://img-blog.csdnimg.cn/6a4c1678e8a142a7bd7eb846a90fcd52.png"></p>
<p>图床这个东西，还是稳定的好，选择一些老牌子，服务运行久的较为可靠，不然没几天停服可是</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fda8da72cd8dbc977dd4a32535de1784.png"></p>
<h1 id="SM-MS图床"><a href="#SM-MS图床" class="headerlink" title="SM.MS图床"></a>SM.MS图床</h1><p>打开 <span class="exturl" data-url="aHR0cHM6Ly9zbS5tcy8=">SM.MS<i class="fa fa-external-link-alt"></i></span> ，获取Token</p>
<div class="note info"><p>Token，就是汉语 “令牌” 的意思，是服务端生成的一串字符串，作为客户端进行请求的一个令牌，当第一次登录后，服务器生成一个 Token 便将此 Token 返回到客户端，日后客户端只需要附带此 Token 前来请求数据即可，无需再次带上用户名和密码</p>
</div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/7054f4088da597f4c0fb3a49ddb496c9.png"></p>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hcGkvMTAxNTQ=">API<i class="fa fa-external-link-alt"></i></span> Token</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1bd6a4fc11be2d356439d31a46b6a5a2.png"></p>
<p>打开图床设置，粘贴 SM.MS 图床的 Token</p>
<p><img src="https://img-blog.csdnimg.cn/c6fc2bc7f73a4a2ebbf9cd5bede70539.png"></p>
<p>好了，现在就可以使用 Typora 这款神仙级 Markdown 编辑器记笔记、写博客了，再也没有发布文章需要一张张重新上传图片的烦恼了</p>
<h1 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h1><p>有时候我们总会在想这些图床的服务器到底靠不靠谱，能不能长时间维护，万一哪天崩了，作为使用者的我们岂不是凉凉。这里还有一个方法，那就是用代码托管仓库来建立图床，国内的<strong>Gitee</strong>在图片上传速度上可能更具优势，但是<strong>PicGo</strong>工具对于码云的配置更为繁琐，需要安装插件，比较简单的还是直接上手<strong>GitHub</strong>吧</p>
<p>新建仓库</p>
<p><img src="https://img-blog.csdnimg.cn/677b881224ca42b4bba5f4954532d2d9.png"></p>
<p>获取<strong>Token</strong></p>
<p><img src="https://img-blog.csdnimg.cn/ec78dbafed114d488680ff8e31687ecd.png"></p>
<p>创建<strong>Token</strong></p>
<p><img src="https://img-blog.csdnimg.cn/ff8fb263fd1d40d3a364316e53beeda5.png"></p>
<p>创建成功后，注意：<strong>Token只显示一次，可以记录在文档中保存下来，忘记的话重新Get一个就好</strong></p>
<p>设置PicGo</p>
<p><img src="https://img-blog.csdnimg.cn/1fcfabbe56d4473b977c1a01597544c7.png"></p>
<p>测试上传</p>
<p><img src="https://img-blog.csdnimg.cn/119bbe3bbdb949c79c9b9a5adeb806c6.png"></p>
<p><img src="https://img-blog.csdnimg.cn/61aabbbaf47349e9a82c95138d32261d.png"></p>
<hr>
<p>参考资料</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jL3poL2d1aWRlLyMlRTUlQkElOTQlRTclOTQlQTglRTYlQTYlODIlRTglQkYlQjA=">PicGo | PicGo<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80MDQ5OQ==">图片就交给它了<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg3NTI0NS9hcnRpY2xlL2RldGFpbHMvMTA4NTU0OTI2">Typora + PicGo 图床配置以及 PicGo 上传失败的解决方案<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>网站建设</category>
      </categories>
      <tags>
        <tag>云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建个人博客 —— 保姆级教程</title>
    <url>/2022/01/19/setup-personal-blog/</url>
    <content><![CDATA[<div class="note danger"><p>本站点主题现已更换为 Next，文中除主题外的配置参数均不受影响</p>
</div>

<span id="more"></span>

<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>偶然间，看到某乎上高赞的一个问题：怎么证明下计算机专业学生的能力？问题下面呢，也是有众多网友评论哈，我记得最清晰、也最现实的一条是：有什么能力的，为了装个 X 罢了</p>
<p><img src="https://img-blog.csdnimg.cn/ea2783af495240279e29d90c6db3dc5e.png"></p>
<p>看到这个我就不得不站出来说一句了，证明能力的方式也不是只有建网站这一种方式是吧，那毕竟还是“术业有专攻”呢，对吧。也不知道为什么锻炼下自己的实操能力，拓宽下学识就成了键盘侠下的装 X，咱也喷不过，求饶求饶啊</p>
<p>好了，回归正题，我建立个人网站呢，初衷其实非常简单，说不定你也想过，只是没去做而已。我是想：现在的网络中有好多的写作平台，比如我现在在用的C站，它已经非常成熟，社区讨论、问题发布、Blink动态等等，一应俱全。我在学完相关知识后，为什么不能自己写一个呢？也许更多的是我爱折腾罢了，哈哈</p>
<p><img src="https://img-blog.csdnimg.cn/ca8d2f14076a4376aef1c62f70b46c55.png"></p>
<p>最开始接触是在C站文章发布“板块自定义”模块中，输入几行代码，就能有漂亮的界面。当时因为还没有接触到CSS、Web前端这些，是从网上白嫖来的，更是激起了我深入学习的兴趣</p>
<p>什么是博客，博客是大家分享、交流的一个平台，我们可以从中吸取别人的经验，提升自己。对于看博客的人来说是这样，对于写博客的博主呢，更是对自己所学的总结，能理清自己的思路，便于日后复盘，养成良好的习惯。技术博客，能记录我们遇到的问题，更好的Bug处理方案，在我们日后开发的过程中遇到同样的问题，记忆会更加深刻</p>
<p>有了想法就要动手，当我真正动手去实现的时候，才发现并不是一些标题党发的文章，像“十分钟建立属于你的网站、你还不会自己建网站？”。等到自己真正看着他们的视频、文章去操作的时候，有的是真大神，他默认的一些东西你应该是会的，会写的简单一些。还有一些，就是“伟大的搬运工”了，完完全全就是发布了别人的文章，还不放原文链接那种</p>
<p>正是我没有发现一套完整的，能帮助新手开发一个网站的资源，所以决定写下 UP 建站的过程，分享我从初学到最后实现的一些经验。所以，如果你也想要拥有一个属于自己的网站，可以跟着上手操作下，过程中如果遇到问题可以私信或留言。下面，让我们一起开始吧</p>
<p>思考下，我们查资料用的最多的是什么？有些朋友就会说了：那还用问，必须是“在B站上大学“啦，亦或是搜索引擎了。没错，我想这正是我们大多数人学习新东西、不断探索向前时使用最多的工具了。那，我们搜些什么呢？比如，你可以这样：</p>
<p><img src="https://img-blog.csdnimg.cn/832f424d141a46cbbffdf9bb78f4efa5.png"></p>
<p>或许，你还可以这样：</p>
<p><img src="https://img-blog.csdnimg.cn/710508a41cf74abfae9034e86f4da8b3.png"></p>
<p>的确能搜到很多的视频、文章。但是在这部分，我以我是初学者的角度来描述下我的心路历程：因为这东西目前在我的脑子里就是一个初步的想法，我还不知道怎么去实现它。就像是一个人在山里迷路了，我只知道要出去，可我找不到路啊</p>
<p><img src="https://img-blog.csdnimg.cn/fa7494f0e63146d2ac35388ef35df12d.png"></p>
<p>这一 pa，我们就来聊一些建站，我应该准备什么。网上大多数教程啊，都是一个大长篇，鼠标滑好几下都不带滑完的那种。会给刚入门的朋友一种：”哇，好难啊，这么多东西啊“的感觉，所以这里我对各部分的内容进行了分类，你只要按照顺序，一步步往下走就好啦</p>
<h1 id="本地网站"><a href="#本地网站" class="headerlink" title="本地网站"></a>本地网站</h1><p>这里为什么要强调是”本地“呢，一开始啊，我也是看的教程，跟着别人的思路来走，像什么先买个域名，买台服务器啥的，我都踩过坑。这对刚入门的朋友在购买或者选择上会造成困难，我们莫不如换一种思考方式，现在我自己的电脑上建立一个网站，然后在”发送“出去，让别人都能看到。你看，这不就很明确了吗？</p>
<p>在自己的电脑上实现网站，必须的两个东西<strong>浏览器</strong>、<strong>开发工具</strong>，前者大家肯定是都有了，不做赘述（不然你拿什么看到的我这篇文章呢，嘿嘿），我们重点介绍后者</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>WebStorm 是JetBrains公司旗下一款JavaScript 开发工具。已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与IntelliJ IDEA同源，继承了IntelliJ IDEA强大的JS部分的功能</p>
<p>废话少说，来这里下载 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=">传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/a2e3c8a3ffc94521bf59282e28284cea.png"></p>
<p>这儿呢，有个小问题，这玩意是收费的，如果你是一名大学生，可以通过学生认证免费申请到教育账号，如果……（不多说奥，自己去问度娘，能找到方法），直接无脑下一步安装就行，不要慌</p>
<h3 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h3><p>Visual Studio Code（简称“VS Code” ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">传送门<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/45fb2c8b80ef40538892f88fb09c5f31.png"></p>
<p>这两个工具具体来说就是：前者是全家桶（啥都有，不用你管，直接用就行），后者是一个空壳公司，需要各种员工（插件）去实现一些功能。所以如果你懒得去配置了，就直接下第一个，第二个可能在写博客<strong>Markdown</strong>语法上更方便一些，这个我后面会说到。此处如果你是新手，我建议你下<strong>WebStorm</strong>，后文的一些配置上，会更加方便</p>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>“框架”这是啥，懵了吧，嘿嘿。遇到事情不要慌，且听杰森娓娓道来。这里咱们看下某度词条的解释：</p>
<blockquote>
<p>框架（framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题<br>框架这个广泛的定义使用的十分流行，尤其在软件概念。框架也能用于机械结构</p>
</blockquote>
<p>这东西相当于什么呢，比如咱们建房子，你说你怎么建？咱不能没有图纸、没有工人就开始吧，这不是“天方夜谭”嘛。首先肯定是需要设计师根据用户需求设计好这个图纸，然后工人再依据这张图纸开始建房子对吧。这里省略了很多，行业大咖求放过，举个栗子哈</p>
<p>我们搭建网站也一样如此，你真的以为那么多的网站，都是程序猿没日没夜一行一行从零开始写出来的吗？emmm，其实最开始对于这个问题，我的回答是：嗯，是的，那肯定得呀。直到我去实习的时候，才发现企业里的一些东西也并不是全部从零开始开发的。（开源大法好，哈哈哈）难道你想成为这样？</p>
<p><img src="https://img-blog.csdnimg.cn/ca5458a3fa854d45b7900dcb43468d74.png"></p>
<p>一个产品、项目、网站……只要是有前人做过的东西，我们都可以从中汲取经验啊，学习好的编码，开源的，别人已经实现的我们何必浪费时间再去搞一遍呢？尤其是下文要将的<strong>WordPress</strong>，简直就是“无脑式操作”，你可能都不知道自己做了什么，但一个属于你的网站就那么出来了</p>
<p><strong>博客框架</strong>通俗的说就是别人写好的一套源码，你拿过来会用就行，改一改自己的配置啊，配上想要的主题啊，这种就足够了（大佬请绕路）。所以下面我会给大家分享一些在搭建我的个人网站时，了解到的一些框架，并简单分析，供大家选择</p>
<p>还是老话，此专栏受众对象是刚接触的朋友，所以一些复杂，不需要知道的参数我并不会提及，只涉及到最关键的部分，方便大家快速找到适合自己的那一个</p>
<blockquote>
<p>提前声明，杰森用的框架是 &#x3D;&#x3D;Hexo&#x3D;&#x3D; ，各位可以和我选择不同，但配置不尽相同，同理可得的那种</p>
</blockquote>
<h3 id="Hexo（强烈推荐）"><a href="#Hexo（强烈推荐）" class="headerlink" title="Hexo（强烈推荐）"></a>Hexo（强烈推荐）</h3><p>Hexo 是一个快速、简单且功能强大的博客框架。你用Markdown（或其他标记语言）写帖子，Hexo 会在几秒钟内生成带有漂亮主题的静态文件。<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2luZGV4Lmh0bWw=">&gt;点我直达&lt;<i class="fa fa-external-link-alt"></i></span></p>
<p>Hexo特性：</p>
<ul>
<li>运行效果极佳，成本低</li>
<li>多平台：本地、云、PC、移动端通吃</li>
<li>支持多种<strong>CDN</strong>服务（开启可以提高网页的打卡速度）</li>
<li>各大搜索引擎对网站的收录及<strong>权重</strong>有较大优势（用户搜到你发布的内容可能性更大）</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/cc55ace4c77f4bd8a0038735dc0f69c7.png"></p>
<p>如果你喜欢配置，对代码操作后完成一定的配置，这款符合你胃口。放上配置截图供参考：</p>
<p><img src="https://img-blog.csdnimg.cn/e4fdf3733f1140b291cefc1ea382c8c1.png"></p>
<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>WordPress是基于PHP和MySQL的免费开源内容管理系统（CMS）。 是全球使用最广泛的CMS软件，从最开始一款简单的博客系统，发展成为现在具有数千款插件，小工具和主题功能完整的CMS系统。<span class="exturl" data-url="aHR0cHM6Ly9jbi53b3JkcHJlc3Mub3JnLw==">&gt; 点我直达 &lt;<i class="fa fa-external-link-alt"></i></span><br>WordPress特性：</p>
<ul>
<li>商用范围广</li>
<li>方便后续备份和转移，有自带的工具支持</li>
<li>扩展性强大（此处可联想Google的插件商城）</li>
<li>对自定义用户非常友好（绝对可以打造出你想要的）</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/bf10fc73dc664e74bd343e85bae709dc.png"></p>
<p>如果你并不像看那些代码，可以用这款，<strong>WordPress</strong>自带后端管理，选择自己想要的主题，然后拖拽所需控件（比如你想实现显示时间这个功能，会有一个像手机端桌面小组件一样的东西，拖拽到想显示的位置即可实现）。<strong>另外最重要的是，使用它你需要先搞一台服务器</strong></p>
<p>为了大家能更快速的找到合适的，我不会给大家很多的可选项，更不会告诉大家还有什么（不然你会觉得，我现在的可能不是最好的，我要尝试更多的。倘若这样的话，不知不觉间你就会浪费很多时间，莫不如跟着一个先搭建下来，等日后熟悉了，再更换其他的。）等到自己独立上手时，也能有个清晰的思路，不至于在某一点上花太多时间</p>
<p><img src="https://img-blog.csdnimg.cn/a24e06bf834d4a5c901ceefc5ef9d090.png"></p>
<h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>这一块呢，不用过多的介绍，可以理解为我们建房子需要水泥、铲子等工具和原料一样，本地的环境就是我们用到的铲子，是工具。而<strong>Hexo</strong>的博客框架就是水泥这样的原材料，我们需要用工具才开始干活，不然你***用手干啊……</p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>简单描述下它用来做什么，Look Here：</p>
<blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持</p>
</blockquote>
<p>不必理会上面你从未听过的词汇，这么来。某度网盘用过吧，是不是有个自动备份，你选中本地的某个文件夹，当本地文件发生改变时，只要软件在后台运行，是不是云上也会和本地自动保持一致。过程就是这么个情况，但是<strong>git</strong>的操作目前你就可以相像成一个云，用一些命令你就可以把本地的代码“发送&#x2F;备份”到云上</p>
<p>我并未深入展开讲<strong>git</strong>的分布式特性，命令等内容，这里推荐入门的朋友可以<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9naXQvZ2l0LWJhc2ljLW9wZXJhdGlvbnMuaHRtbA==">&gt; 看这里 &lt;<i class="fa fa-external-link-alt"></i></span>的教程，方便快速入门</p>
<p>既然要使用Git，那么我们首先就要安装并配置Git的环境，<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">点击这里<i class="fa fa-external-link-alt"></i></span>下载（Windows操作系统），点击Download按钮即可</p>
<img src="https://oscimg.oschina.net/oscnet/2348e786eb7a4c2da133338a12aa6670.png" width="80%">

<p>安装过程不再赘述，直接使用默认配置，一“Next(站)” 到底</p>
<p>下面我们配置环境变量信息，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTg4NzU5Njc=">详情参考此处<i class="fa fa-external-link-alt"></i></span>，打开 Path 变量后，添加本地环境安装目录（确保文件位置到达 cmd ）</p>
<p><img src="https://img-blog.csdnimg.cn/3c49d776d6dd4ee4bc20bb3bde0cb9ba.png"></p>
<p>安装完成后，你可能没有看到桌面的快捷方式，不要着急。我们在Windows搜索框中搜索Git就可以看到这样几个图标</p>
<p><img src="https://img-blog.csdnimg.cn/ba1113bb892c45d6bbf5906242cf2de4.png"></p>
<p>可以直接点击 Git Bash 或者在桌面任意位置右键，打开 Git Bash Here 就可以使用啦</p>
<p><img src="https://img-blog.csdnimg.cn/1d89848f17c144a6a3823098892c6c44.png"></p>
<h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">&gt; 下载直达 &lt;<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/f0bf90b791614bc1b09cc6f94105b00c.png"></p>
<p>很多朋友纠结这两个版本，看下这个解释相信就知道需要哪个了，杰森用的是<strong>LTS版本</strong></p>
<blockquote>
<p><strong>LTS</strong>代表“Long Term Support（长期支持）”，Current代表“当前的”<br><strong>Current</strong>就代表最新发布的版本（每6个月一次的），它可能是奇数版本也可能是偶数版本</p>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>桌面右击，打开<strong>git bash here</strong>输入命令安装（默认位置即可，方面后续配置，不建议修改）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>这里我已经装过了，可能显示的和你的不一样，执行完后关闭窗口就行，此时本地已经有了<strong>hexo</strong>的环境。怎么样，是不是很简单呢？</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在你本地任意位置（但要记住路径）方便起见<strong>建议直接在除C盘的任意盘符下的跟目录新建</strong>，命名任意，比如我这里是在D盘新建的 hexo-jason-blog 文件夹，可以参考下</p>
<p>本来我想用自己已经搭好的本地环境给大家演示，但是为了能真实体现“新手”的操作环境，杰森决定重新建立，一步步重新操作，只为大家能走好每一步，直到成功</p>
<p>在该文件夹下打开 git bash here 输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6922e3628acf441496d0d8a303cbc299.png"></p>
<p>此时你可能会遇到这个错误，不要慌张，是从<strong>GitHub</strong>克隆时网络原因，多试几次就好</p>
<p><img src="https://img-blog.csdnimg.cn/92bbacd9593b437990a8ef5d670349c2.png"></p>
<p>关于此类问题的解决方案请<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmFpcnlseWwvcC8xNTA1OTQzNy5odG1s">&gt; 参考这里 &lt;<i class="fa fa-external-link-alt"></i></span></p>
<p>成功效果：</p>
<p><img src="https://img-blog.csdnimg.cn/6f75f87ba4cf42fe85bd604fdfcb9277.png"></p>
<p>根文件目录下多了这些文件</p>
<p><img src="https://img-blog.csdnimg.cn/590bda80915546c1b3a904af3169057a.png"></p>
<p>简单介绍下hexo的文件结构：</p>
<ul>
<li>public  最终所见网页的所有内容 </li>
<li>node_modules  插件以及hexo所需node.js模块 </li>
<li>_config.yml  站点配置文件，设定一些公开信息等</li>
<li>package.json  应用程序信息，配置hexo运行所需js包</li>
<li>scaffolds   模板文件夹，新建文章，会默认包含对应模板内容</li>
<li>themes  存放主题文件，hexo根据主题生成静态网页（速度贼快）</li>
<li>source 用于存放用户资源（除 <em>posts 文件夹，其余命名方式为 “</em> + 文件名”的文件被忽略）</li>
</ul>
<p>我们日常写文的操作都在 source&#x2F;_post下，既然我们已经有了建房子时“和泥”的工具——WebStorm，为什么不用呢？</p>
<p>在WebStorm中打开根目录 hexo-jason-blog （直接将该文件拽到桌面WebStorm的快捷方式打开就行），打开终端并输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1c60954ce9994f08b87502fc05662446.png"></p>
<p>点击链接 <strong><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000<i class="fa fa-external-link-alt"></i></span></strong>（图中黄色下划线位置）进行本地预览，默认是hexo内置的landscape 主题</p>
<p><img src="https://img-blog.csdnimg.cn/166b60aaca844a45848981e4c34af06a.png"></p>
<p>光标停留在 Terminal 位置，组合键 <a class="btn" href="#">Ctrl</a> + <a class="btn" href="#">C</a> 停止本地预览，这就是本地最简单的一个网站啦</p>
<p>emmm，默认的页面朋友们也预览成功了，大概呢，就是这样，嘿：</p>
<p><img src="https://img-blog.csdnimg.cn/827a7d03aeec46a29e0fd9e315dc0fc2.gif"></p>
<p>但总感觉，还是差了点什么东西。没有一些博客、网站该有的东西，那怎么能让它更像一个网站呢？</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>这里我们介绍下<strong>主题</strong>和<strong>框架</strong>，我们现在使用的<strong>Hexo</strong>是一款快速、简单的博客框架，主题就是开发者根据此框架开发的功能更加完备、页面样式、栏目更多的一种”配件“。就像你用的手机，换上手机壳，选手机壳时需要匹配自己手机的型号，不然也不配套啊是吧</p>
<p>再举个“栗子”，像Android手机（IOS闭源，除非越狱），厂家生产时默认的桌面主题，在<strong>主题商店</strong>这个app里你能根据自己的喜好选择更好看的图标、背景、字体。就像是“换上新衣”，可以从这个角度理解我们下面要做的操作</p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>提及主题，肯定就会有很多啦。还是那句话，大家根据自己的喜好选择就好，这里是<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">官方主题库<i class="fa fa-external-link-alt"></i></span>，我比较喜欢<strong>Butterfly</strong>这款主题，下面带大家给自己的网站“换新衣”</p>
<h3 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h3><p>先给大家看下主题的页面</p>
<p>博客主页</p>
<p><img src="https://img-blog.csdnimg.cn/e875c1528ae748be83db91cf2058ad56.gif"></p>
<p>博文页面</p>
<p><img src="https://img-blog.csdnimg.cn/09ab60bd347540ca9bbe317babdaeaac.gif"></p>
<p>从主题的文档中看，作者也是一直在维护的，时间很近。正所谓好的产品必须要有好的文档嘛，作者也是相当用心，大家可以跟着文档一步一步配置，非常简单，只是把一些工具组成链条罢了</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>Terminal 输入命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/344b9b18ace74732b725f60bb3831e2a.png"></p>
<p>等待安装完成，<strong>themes</strong>文件夹下显示了<strong>butterfly</strong>主题的一些文件</p>
<p><img src="https://img-blog.csdnimg.cn/bd527d4926494ec8b27540dabb5cb0c2.png"></p>
<ul>
<li>安装插件</li>
</ul>
<p>安装 pug 以及 stylus 的渲染器，如果没有安装，预览界面是这样的</p>
<p><img src="https://img-blog.csdnimg.cn/f28ea972cbce4c788723f02ba0adaba8.png"></p>
<p>控制台输入命令，回车等待安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件</li>
</ul>
<p> 网站根目录下找到**_config.yml<strong>文件，修改主题为</strong>butterfly<strong>（注意</strong>yml**文件格式）</p>
<p><img src="https://img-blog.csdnimg.cn/38d2cd795f084129b9d9ce2022dc0af2.png"></p>
<ul>
<li>本地预览</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean //执行此命令后继续下一条</span><br><span class="line">hexo g //生成博客目录</span><br><span class="line">hexo s //本地预览</span><br></pre></td></tr></table></figure>

<p>效果图</p>
<p><img src="https://img-blog.csdnimg.cn/9d5acea822264f5d92d866944a0ae7d0.gif"></p>
<p>可能看上去还是那么的“简陋”，额，这个问题呢，会涉及到后续的”主题美化“（其实就是加上了一些好看的图片而已，也很简单）。我的博客也没有优化的很细节，非常粗糙，时间有限，后面再说吧，可以看下，留个”念想“，相信你做的会比我更好</p>
<p><img src="https://img-blog.csdnimg.cn/1dbf897a90c54e19b4bbe4f5b45fedf5.gif"></p>
<h1 id="正式上线"><a href="#正式上线" class="headerlink" title="正式上线"></a>正式上线</h1><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>这是个ma玩意啊？？？不要慌，大家不是看咱们默认主题的网站一点儿都不好看么，那是因为没图片啊，你要是给它换上一套配图，优化一下，是不是就好多了呢？那在网络中我们引用图片一种是本地上传，代码里放上路径引用；另一种则是通过网址，显然后者更方便（如果类比到后面要用到的服务器上，随着图片量日渐增多、存储空间慢慢减少，每次发文都需要连同图片一起上传，那得占用多大的空间呐）</p>
<p>然而，如果我们自己有一个地方，能把本地图片转换成链接（人人通过这个链接都能访问到你发布的照片）是不是就很棒了nie。<strong>Picgo</strong>和一些其他插件就能实现</p>
<p>前些时候更新过一片文章，使用<strong>GitHub</strong>和<strong>SM.MS</strong>。如果有不能类比操作的朋友，<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjIyMzk1">&gt; 看这里 &lt;<i class="fa fa-external-link-alt"></i></span>由于<strong>GitHub</strong>毕竟是国外的，访问速度上会有点儿慢，<strong>SM.MS</strong>倒是一个运行了很久的老牌子了，但它俩在访问速度上都略慢</p>
<p>杰森强烈推荐国内的<strong>码云（Gitee）</strong>，配合<strong>Picgo</strong>使用。稳定、快速，还不容易丢失。（ps：此处就会有些朋友问了，我公开了我的仓库，里面全放的是我的照片，会不会隐私存在隐私泄露什么的）对于这类问题，我只能说</p>
<p><img src="https://img-blog.csdnimg.cn/27e0e65793664211a2893681263089a0.gif"></p>
<p>谁天天闲的没事去看你仓库啊？？再者说，你能上传到仓库里XXX（自行想象）照片么？？所以说，放心用，不要想辣么多真的是</p>
<p>另外，友情提示：<strong>Gitee对免费版账户存储容量最大为5G，仓库满了记得从软件中改下路径，使用后不要乱改自己Gitee账户的名称（不是昵称，英文那个名称），不然就等404吧</strong></p>
<h2 id="Butterfly配置"><a href="#Butterfly配置" class="headerlink" title="Butterfly配置"></a>Butterfly配置</h2><p>直接放上<span class="exturl" data-url="aHR0cHM6Ly9idXR0ZXJmbHkuanMub3JnL3Bvc3RzLzRhYThhYmJlLw==">官方文档<i class="fa fa-external-link-alt"></i></span>，朋友们可以先配置一下，非常简单。你看到的页面可能是繁体中文，不要用浏览器自带的翻译引擎（可能翻译后，部分内容不显示）贴心的作者，早已想到了，我们只要在网站右下角设置中切换一下就好</p>
<p><img src="https://img-blog.csdnimg.cn/ac0eb14b282649578572db051a27f47f.png"></p>
<p>杰森在后面会专门出一期，来讲下主题配置中的一些问题，相信看到这里的小伙伴已经迫不及待想要把自己的网站发不到网上了吧，我们重点讲这个问题</p>
<h2 id="GitHub-Pages配置"><a href="#GitHub-Pages配置" class="headerlink" title="GitHub Pages配置"></a>GitHub Pages配置</h2><p><strong>GitHub Pages</strong>是一种由<strong>GitHub</strong>中的仓库&#x2F;项目直接创建的网页。管理简单，在本地编辑仓库中的内容，上传到GitHub上，GitHub Pages就能快速完成更新，重点是<strong>不花钱，不花钱，不花钱</strong></p>
<p><img src="https://img-blog.csdnimg.cn/513ac1b27a354b1fba32011318edbf9f.png"></p>
<p>新建仓库，填写内容如下，<strong>特别注意红框位置</strong></p>
<p><img src="https://img-blog.csdnimg.cn/c4f6cb765a774149a1231ee3479d3606.png"></p>
<p>保证仓库<strong>public</strong>，名称填写正确<strong>用户名.github.io</strong>，系统自动变更为<strong>Pages</strong></p>
<p>在仓库设置中找到<strong>Pages</strong></p>
<p><img src="https://img-blog.csdnimg.cn/e780856e478c4e72b51ac048b6cddea1.png"></p>
<p>记住仓库地址，我们会将本地的文件上传到仓库</p>
<p><img src="https://img-blog.csdnimg.cn/30700a47e4cb4c1680c7036a3ab3d944.png"></p>
<p>如果你是在电脑上第一次使用<strong>git</strong>，请先配置<strong>SSH公钥</strong>（一种安全协议，你可以理解为登陆某网站需要的验证码）</p>
<p>在<strong>WebStorm</strong>中链接到远程，添加仓库地址，这里<strong>不是发布网站需要的仓库</strong>（非“用户名”+github.io仓库，新建一个，为了管理本地代码）</p>
<p><img src="https://img-blog.csdnimg.cn/9a6b98e6fc2147ceb39a16c932d1fa49.png"></p>
<p>因为这里都是基本的<strong>git</strong>命令，前面也提到过，不清楚的小伙伴可以看这个专栏里的资料，都是一些基础操作，非常容易上手</p>
<p>修改网站部署设置</p>
<p><img src="https://img-blog.csdnimg.cn/9ac139c8fb2841cdaf4b206c1b15dc6a.png"></p>
<p>在网站本地<strong>根目录</strong>下打开 git bash here 依次执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean //执行此命令后继续下一条</span><br><span class="line">hexo g //生成博客目录</span><br><span class="line">hexo s //本地预览</span><br><span class="line">hexo d //部署项目</span><br></pre></td></tr></table></figure>

<p>执行完毕后，所有人就能通过<strong>你的用户名+github.io</strong>这个域名访问你的网站了。到这儿，我们就成功上线了自己的网站</p>
<p>如果感觉<strong>GitHub</strong>访问速度慢（嗯，其实就是慢，还会有打不开的情况）可以部署到<strong>Gitee</strong>，都是一样的操作，还是中文，不要太简单ei</p>
<p>额，发布确实是发布了，那你觉得像<strong>用户名+github.io</strong>这样的名称方便记忆吗？？我想，如果是一个新手（可能都不知道<strong>GitHub</strong>是什么的用户，肯定是很困难了）</p>
<p>那，怎么样方便记忆，而且足够个性化呢？</p>
<p><img src="https://img-blog.csdnimg.cn/2457d271a3b7408d95bb092f6a585cae.png"></p>
<p>当然，这部分肯定是不免费的了，哪儿有什么都白嫖的道理呢？对吧，推荐在<strong>阿里云</strong>或<strong>腾讯云</strong>完成下面的操作哦，如果你使用其他的平台，不是不行，但是建议购买域名和服务器都在相同的平台，方便管理</p>
<p>国内的大厂，都有保障，无脑冲就可以啦。从经济性角度来看，哪个有活动，更实惠就选哪个，杰森是看到了<strong>阿里云</strong>当时的活动比<strong>腾讯云</strong>更实惠，so~~</p>
<h2 id="服务器选购攻略"><a href="#服务器选购攻略" class="headerlink" title="服务器选购攻略"></a>服务器选购攻略</h2><p>收到有些朋友反应：那么多入口，都找不到从哪里买&#x2F;找不到活动入口。这里讲下怎么查看最新的活动，平台会有哪些优惠，入口在哪里</p>
<h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><h4 id="学生专享"><a href="#学生专享" class="headerlink" title="学生专享"></a>学生专享</h4><p>账号中心完成学生认证购买更优惠</p>
<h4 id="活动专享"><a href="#活动专享" class="headerlink" title="活动专享"></a>活动专享</h4><p>最新活动 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9hY3Rpdml0eT9zcG09NTE3Ni4xOTcyMDI1OC5KXzgwNTg4MDMyNjAuMi4zNmY4MmM0YUxKREc4RQ==">&gt; 戳我直达 &lt;<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/de9c6fba2bed4ff78d3bee37ea4e680f.png"></p>
<h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p>不得不说，两家界面基本一致，熟悉一个就行，所以位置差不多都一样</p>
<h4 id="学生专享-1"><a href="#学生专享-1" class="headerlink" title="学生专享"></a>学生专享</h4><p>学生党查看这里 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9hY3QvY2FtcHVzP3V0bV9zb3VyY2U9cWNsb3VkJnV0bV9tZWRpdW09bmF2aWdhdGlvbiZ1dG1fY2FtcGFpZ249Y2FtcHVz">&gt; 戳我直达 &lt;<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/c0b733075577441185e137f9aebbf171.png"></p>
<h4 id="活动专享-1"><a href="#活动专享-1" class="headerlink" title="活动专享"></a>活动专享</h4><p>最新活动 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9hY3Q=">&gt; 戳我直达 &lt;<i class="fa fa-external-link-alt"></i></span><br><img src="https://img-blog.csdnimg.cn/2a0d06a2636b48b99bb23e78edfad445.png"></p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><blockquote>
<p>域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）<br>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串</p>
</blockquote>
<p>如果你没有看懂，没关系，那听杰森细细道来。简单来说，在公网上访问的资源都有其固定地址<strong>IP</strong>，但是如果你要访问特定的<strong>IP</strong>，就需要记住它。但是呢，它不方便记忆，人们就想出了<strong>域名</strong>这东西</p>
<p>给<strong>IP</strong>起了一个个性化的名称，比如攻城狮杰森是全称，朋友们喊我森森、阿森、小森，都是别名，但都指向“攻城狮杰森”这个人。那在网络中如何实现起别名呢？这里介绍下<strong>DNS</strong>，它是互联网中的一项服务，实<strong>域名</strong>和<strong>IP</strong>的相互映射，也就是说，你输入域名访问的就是域名所对应的<strong>IP地址</strong></p>
<h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>既然理解了什么是<strong>域名</strong>，那我们先来买个域名吧！<br><span class="exturl" data-url="aHR0cHM6Ly93YW53YW5nLmFsaXl1bi5jb20vP3NwbT01MTc2LjIxMjEzMzAzLjExNTgwODEuMy43ZmY2M2VkYWhTRjRrVSZzY209MjAxNDA3MjIuU19jYXJkQEAlRTUlOEQlQTElRTclODklODdAQDU4MS5fLklEX2NhcmRAQCVFNSU4RCVBMSVFNyU4OSU4N0BANTgxLVJMXyVFNSU5RiU5RiVFNSU5MCU4RCVFOCVCNCVBRCVFNCVCOSVCMC1PUl9zZXItVl8yLVAwXzA=">&gt; 点击此处 &lt; <i class="fa fa-external-link-alt"></i></span>查询你想要的域名</p>
<p>举个栗子，输入后查询，选好后加入清单，付款购买即可。不同的后缀价格不同，凭个人喜好</p>
<blockquote>
<p>域名后缀，亦被称为顶级域名，是指代表一个域名类型的符号。 不同后缀的域名有不同的含义。域名共分为两类：国别域名（ccTLD），例如中国的.cn、美国的.us、俄罗斯的.ru、以及国际通用域名（gTLD），例如.com、.xyz、.top、.wang、pub、.xin、.net等1000多种，所有域名后缀作用无差异，仅外观和本身含义不同，但只有少数例如举例中的域名后缀可以在国内支持网站的备案</p>
</blockquote>
<p>更多域名后缀信息，<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUYlOUYlRTUlOTAlOEQlRTUlOTAlOEUlRTclQkMlODAvNjY3NjQxIzp+OnRleHQ9JUU0JUI4JThEJUU1JTkwJThDJTIwJUU1JTkwJThFJUU3JUJDJTgwJTIwJUU3JTlBJTg0JUU1JTlGJTlGJUU1JTkwJThEJUU2JTlDJTg5JUU0JUI4JThEJUU1JTkwJThDJUU3JTlBJTg0JUU1JTkwJUFCJUU0JUI5JTg5JUUzJTgwJTgyJTIwJUU1JTlGJTlGJUU1JTkwJThEJUU1JTg1JUIxJUU1JTg4JTg2JUU0JUI4JUJBJUU0JUI4JUE0JUU3JUIxJUJCJUVGJUJDJTlBJTIwJUU1JTlCJUJEJUU1JTg4JUFCJUU1JTlGJTlGJUU1JTkwJThEJTIwJUVGJUJDJTg4Y2NUTEQlRUYlQkMlODklRUYlQkMlOEMlRTQlQkUlOEIlRTUlQTYlODIlRTQlQjglQUQlRTUlOUIlQkQlRTclOUElODQlMjAuY24lMjAlRTMlODAlODElRTclQkUlOEUlRTUlOUIlQkQlRTclOUElODQsLndhbmclMjAlRTMlODAlODFwdWIlRTMlODAlODElMjAueGluJTIwJUUzJTgwJTgxJTIwLm5ldCUyMCVFNyVBRCU4OTEwMDAlRTUlQTQlOUElRTclQTclOEQlRUYlQkMlOEMlRTYlODklODAlRTYlOUMlODklRTUlOUYlOUYlRTUlOTAlOEQlRTUlOTAlOEUlRTclQkMlODAlRTQlQkQlOUMlRTclOTQlQTglRTYlOTclQTAlRTUlQjclQUUlRTUlQkMlODIlRUYlQkMlOEMlRTQlQkIlODUlRTUlQTQlOTYlRTglQTclODIlRTUlOTIlOEMlRTYlOUMlQUMlRTglQkElQUIlRTUlOTAlQUIlRTQlQjklODklRTQlQjglOEQlRTUlOTAlOEMlRUYlQkMlOEMlRTQlQkQlODYlRTUlOEYlQUElRTYlOUMlODklRTUlQjAlOTElRTYlOTUlQjAlRTQlQkUlOEIlRTUlQTYlODIlRTQlQjglQkUlRTQlQkUlOEIlRTQlQjglQUQlRTclOUElODQlRTUlOUYlOUYlRTUlOTAlOEQlRTUlOTAlOEUlRTclQkMlODAlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTUlOUIlQkQlRTUlODYlODUlRTYlOTQlQUYlRTYlOEMlODElRTclQkQlOTElRTclQUIlOTklRTclOUElODQlRTUlQTQlODclRTYlQTElODglMjAlNUIxJTVEJTIwJUUzJTgwJTgy">查看这里<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/35738d502013404cb72b871d0217770b.png"></p>
<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><h4 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h4><p>因为我们现在已经有了<strong>用户名.github.io</strong>这样一个网站，为了简单易记，我们将“用户名.github.io“解析”到所购买的域名，这样，网站就有了<strong>所有域名</strong>和<strong>username.github.io</strong>两个网址了</p>
<p>打开仓库，找到设置，进入pages设置，添加域名</p>
<p><img src="https://img-blog.csdnimg.cn/f6c18b9194714a92bd45f9470a611bb9.png"></p>
<p>你还可以使用免费的<strong>强制HTTPS</strong></p>
<blockquote>
<p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性<br>HTTPS 在HTTP 的基础下加入SSL，HTTPS 的安全基础是 SSL【SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密】<br>因此加密的详细内容就需要 SSL。 HTTPS 存在不同于 HTTP 的默认端口及一个加密&#x2F;身份验证层（在 HTTP与 TCP 之间）。这个系统提供了身份验证与加密通讯方法。它被广泛用于万维网上安全敏感的通讯，例如交易支付等方面</p>
</blockquote>
<p>打开这个选项</p>
<p><img src="https://img-blog.csdnimg.cn/615067c0e3b24bb3aa0ce864556f6eb4.png"></p>
<h4 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h4><p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8/c3BtPWEyYzFkLjgyNTE4OTIudG9wLW5hdi5kbG9nby41NjdhNWI3NnhNaXI2Uw==">阿里云官网<i class="fa fa-external-link-alt"></i></span>进入域名控制台</p>
<p><img src="https://img-blog.csdnimg.cn/0aa958e53b3e411ebc6f25b3ac4b3b74.png"></p>
<p>若没有，在此处搜索</p>
<p><img src="https://img-blog.csdnimg.cn/109db46dbaf34bb0bf981356039cd1fc.png"></p>
<p>找到需要与username.github.io绑定的域名，点击“解析”</p>
<p><img src="https://img-blog.csdnimg.cn/5135e84c1069461a806c5c28126f4e2a.png"></p>
<p>进入后，点击“添加记录”，需添加两次记录</p>
<p>第一次</p>
<p><img src="https://img-blog.csdnimg.cn/d202b956b5d1495f8205441325700c8c.png"></p>
<p>第二次</p>
<p><img src="https://img-blog.csdnimg.cn/4126b4b3299e4eb79e0214f77adaf573.png"></p>
<p>DNS解析需要时间，稍等片刻后，若在浏览框中输入你的域名，正常访问则解析成功</p>
<p>这里为什么要说是正式上线呢，毕竟网站到了服务器看得才，才正规一点儿是吧，像<strong>GitHub Pages</strong>，倒是免费，但是在国内，DNS解析后需要时间，总会有无法访问或者断连的情况，太不方便</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>先来看看，<strong>服务器</strong>是何方神圣？</p>
<blockquote>
<p>服务器是计算机的一种，它比普通计算机运行更快、负载更高、价格更贵。服务器在网络中为其它客户机（如PC机、智能手机、ATM等终端甚至是火车系统等大型设备）提供计算或者应用服务。服务器具有高速的CPU运算能力、长时间的可靠运行、强大的I&#x2F;O外部数据吞吐能力以及更好的扩展性<br>根据服务器所提供的服务，一般来说服务器都具备承担响应服务请求、承担服务、保障服务的能力。服务器作为电子设备，其内部的结构十分的复杂，但与普通的计算机内部结构相差不大，如：cpu、硬盘、内存，系统、系统总线等</p>
</blockquote>
<p>简单理解：一台不断电，有空间的主题在“天上（云端）”一直在为你放置（部署）上去的资源而服务，能处理各种请求（比如你在导航栏输入域名访问网站）</p>
<p>有两种类型的服务器<strong>国内</strong>和<strong>国外</strong>的，根据我国法律规定，中国大陆的网站需要备案，等待的时间可能会长一点。国外的到时不需要备案，但是稳定性和访问速度就不敢保证了，各位小伙伴自己衡量，杰森用的是<strong>阿里云的轻应用服务器</strong>部署的个人博客网站</p>
<h3 id="购买-1"><a href="#购买-1" class="headerlink" title="购买"></a>购买</h3><p>这是我的服务器配置，大家可以参考下</p>
<p><img src="https://img-blog.csdnimg.cn/c556344556d3449aabdc784454d3782e.png"></p>
<p>如果你是初学者，这个入门级的配置已经足够学生机，可免费领取，具体规则详见社区 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9wbGFuL2dyb3ctdXA/c3BtPTUxNzYuMTk3MjAyNTguSl84MDU4ODAzMjYwLjE4LjM2ZjgyYzRhTEpERzhF">&gt; 戳我直达 &lt;<i class="fa fa-external-link-alt"></i></span></p>
<p>开发者-&gt; 成长计划</p>
<p><img src="https://img-blog.csdnimg.cn/f0f7b43eec49453fab77544b10825110.png"></p>
<p>学生专享（体验后即可得到半月免费ECS服务器，社区内发表使用感受（发一篇博客）可免费续费两月），具体规则请查看官网</p>
<p><img src="https://img-blog.csdnimg.cn/bb6086eaa76340cb8662ca19b22c22c0.png"></p>
<p>账号中心-&gt; 基本信息位置完成学生认证即可</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9hY3Rpdml0eT9zcG09NTE3Ni4xOTcyMDI1OC5KXzgwNTg4MDMyNjAuMi41MWZmMmM0YVpldXFOTA==">最新活动 <i class="fa fa-external-link-alt"></i></span>位置购买优惠力度会更大</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="密码设定"><a href="#密码设定" class="headerlink" title="密码设定"></a>密码设定</h4><p>在图示位置出更改远程连接密码，保存好</p>
<p><img src="https://img-blog.csdnimg.cn/52be94e8cd38411a85dc935ed43408a5.png"></p>
<p>虽然可以用浏览器<strong>远程连接</strong>，但是并不建议，因为有一些键盘上的快捷键会被系统误认为是对浏览器的操作，而不是对话框</p>
<h4 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h4><p>为避免这样的问题出现，我们选择使用第三方工具<strong>Putty</strong>，具体操作步骤，阿里云的<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzU5MDgzLmh0bWw/c3BtPTUxNzYuMTAxNzMyODkuaGVscC5kZXh0ZXJuYWwuNTRhMzJlNzdYcG5SYTYjd2luZG93cw==">帮助文档<i class="fa fa-external-link-alt"></i></span>已经非常详细，这里不再重复</p>
<p>从这里开始看，根据提示完成操作</p>
<p><img src="https://img-blog.csdnimg.cn/5c50fd8a5db4409585807e0413ce9ac3.png"></p>
<p>启动<strong>Putty</strong>工具，链接服务器，登陆用户名为<strong>root</strong>，密码就是在服务器位置设置的密码（Linux操作系统中输入密码为了安全不显示，不必担心）出现以下界面时，说明配置正常，继续下一步即可</p>
<p><img src="https://img-blog.csdnimg.cn/5f0160fa45044dddbc0552b570b25497.png"></p>
<h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p>1.输入命令，安装<strong>git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<p>中途如果暂停，则根据提示输入 yes &#x2F; y &#x2F; Y，表示继续安装，知道最后出现complete表示安装成功</p>
<p><img src="https://img-blog.csdnimg.cn/f8e16d644d0a4904a1771a6495e45125.png"></p>
<p>2.创建git账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<p>3.添加git账户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1623aaf5c2164ddeb853a6ab804d3098.png"></p>
<p>4.执行最后一条命令后，点击键盘 <a class="btn" href="#">i</a>键进入编辑模式，找到图示位置代码</p>
<p><img src="https://img-blog.csdnimg.cn/7cc4471c3be14ee79be9404be2e6f7af.png"><br>在下面加入一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/e233a87b04434ab29e2022146c1bc1f9.png"></p>
<p>按 <a class="btn" href="#">Esc</a> 键并输入 &#x3D;&#x3D;:wq&#x3D;&#x3D;（含义：保存后退出）</p>
<p><img src="https://img-blog.csdnimg.cn/8f83ceeef59340ca85095d2db4169ca8.png"><br>5.回改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>6.设置git账户密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>

<p>输入命令回车后连续输入两次密码即可（不显示，正常），出现图示即成功</p>
<p><img src="https://img-blog.csdnimg.cn/f0cfdaee37d044bbb05f47ba6877b260.png"></p>
<p>7.切换至git账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure>

<p>创建 ~&#x2F;.ssh 和 ~&#x2F;.ssh&#x2F;authorized_keys 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>点击键盘 <a class="btn" href="#">i</a> 键进入编辑模式，粘贴本地电脑生成的<strong>SSH公钥</strong>，文件位置如图</p>
<p><img src="https://img-blog.csdnimg.cn/2102e7ed1cc74076b912126da1a480e0.png"></p>
<p>粘贴后，按 <a class="btn" href="#">Esc</a> 键并输入 &#x3D;&#x3D;:wq&#x3D;&#x3D;（含义：保存后退出）</p>
<p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 700 /home/git/.ssh</span><br></pre></td></tr></table></figure>

<p>8.本地 git bash here 中测试是否免密登陆成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -v git@服务器公网IP</span><br></pre></td></tr></table></figure>

<p>出现图示内容表示连接成功</p>
<p><img src="https://img-blog.csdnimg.cn/28fc21232ec945af92ef992e7b384113.png"></p>
<p>9.服务器中创建仓库并完成配置<br>切换到<strong>root</strong>账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure>

<p>创建repo仓库目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /www/repo</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="built_in">chown</span> -R git:git /www/repo</span><br><span class="line"><span class="built_in">chmod</span> -R 755 /www/repo</span><br></pre></td></tr></table></figure>

<p>建立网站根目录<strong>hexo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /www/hexo</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /www/hexo</span><br><span class="line"><span class="built_in">chmod</span> -R 755 /www/hexo</span><br></pre></td></tr></table></figure>

<p>新建空白的git仓库并初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/84cc23976bd54622910092704b6ab5c5.png"></p>
<p>10.创建 Git 钩子，用于自动部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>同上，进入编辑模式，粘贴下面代码并保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/www/hexo --git-dir=/www/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /www/repo/hexo.git/hooks/post-receive</span><br><span class="line"><span class="built_in">chmod</span> +x /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>仓库建立完毕</p>
<h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><blockquote>
<p>Nginx是一款轻量级的Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好<br>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务，其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure>

<p>中途输入 y，表示继续安装（和上面一样）等待安装完成，会显示登陆网址和初始密码</p>
<p><img src="https://img-blog.csdnimg.cn/3a5a73b6f96145de8922cdc263d44fce.png"></p>
<p>注意红框位置，如果两个网址都无法访问，请在服务器安全组 &#x2F; 防火墙中放行8888端口</p>
<p><img src="https://img-blog.csdnimg.cn/a524dc5b1160414d9896be2f3460759a.png"></p>
<p>输入初始账户名、密码登陆</p>
<p><img src="https://img-blog.csdnimg.cn/6d65cd9a9d0f4be8b2ec098d8023d955.png"></p>
<p>进入后，搜索<strong>Nginx</strong>点击安装（我这里已经装过了）</p>
<p><img src="https://img-blog.csdnimg.cn/16253457c6a64c19ae6efeba3fb90f6b.png"></p>
<p>网站–&gt; 添加站点，域名形式<strong>xxx.com 无需任何前缀</strong></p>
<p><img src="https://img-blog.csdnimg.cn/c2983bc486a441289d401356afada3e8.png"></p>
<p>设置–&gt; 配置文件，修改红框内容</p>
<p><img src="https://img-blog.csdnimg.cn/17cf31a29db54e7eb96f653d790bfca7.png"></p>
<p>设置–&gt; 网站目录，修改为 &#x3D;&#x3D;&#x2F;www&#x2F;hexo&#x3D;&#x3D; 并保存</p>
<p><img src="https://img-blog.csdnimg.cn/f31bb768ecc446c2ae819f28fe2c17cb.png"></p>
<p>服务器终端，重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service bt restart</span><br></pre></td></tr></table></figure>

<p>至此，服务器端配置完成</p>
<h4 id="Hexo配置修改"><a href="#Hexo配置修改" class="headerlink" title="Hexo配置修改"></a>Hexo配置修改</h4><p>进入本地博客根目录，修改 <strong>_config.yml</strong> 文件部署位置</p>
<p>GitHub Pages 设定</p>
<p><img src="https://img-blog.csdnimg.cn/b1b9f368e30e4d68b12a59daf70840ce.png"></p>
<p>服务器设置</p>
<p><img src="https://img-blog.csdnimg.cn/5a5d15e6528f436ab6e333016cf1bbca.png"></p>
<p>源码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@你的域名:/www/repo/hexo.git</span><br><span class="line">  branch: master <span class="comment"># 注意此处分支设定,需在仓库中选择默认的分支</span></span><br></pre></td></tr></table></figure>

<p>打开<strong>Putty</strong>工具，连接服务器赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /www/repo/</span><br><span class="line"><span class="built_in">chown</span> -R git:git /www/hexo/</span><br></pre></td></tr></table></figure>

<p>本地根目录下打开 git bash here执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean //清除缓存</span><br><span class="line">hexo d -g //快速部署</span><br></pre></td></tr></table></figure>

<p>出现图示内容表示部署成功，等到备案完成后就可以通过域名访问了</p>
<p><img src="https://img-blog.csdnimg.cn/c2eb2e1df4844367b6087158a38a9429.png"></p>
<h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p>杰森的网站也是最近才备案下来，所以如果你等不及，就另寻他路吧，在国内，咱可不敢造次啊啊啊<br>你会经历以下几个阶段</p>
<p><img src="https://img-blog.csdnimg.cn/963c621501214b2f90812cac44557cd2.png"></p>
<p>购买服务器后，绑定域名后系统会提示你没有备案，根据提示完成即可</p>
<p><img src="https://img-blog.csdnimg.cn/4af64685da5349c4b53b6b4402669d2b.png"></p>
<h3 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h3><blockquote>
<p>英文全称：Internet Content Provider，中文全称：网络内容提供商<br>ICP可以理解为向广大用户提供互联网信息业务和增值业务的电信运营商，是经国家主管部门批准的正式运营企业或部门</p>
</blockquote>
<h3 id="联网备案"><a href="#联网备案" class="headerlink" title="联网备案"></a>联网备案</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5iZWlhbi5nb3YuY24v">进入官网<i class="fa fa-external-link-alt"></i></span> 在阿里云完成<strong>ICP</strong>备案后，系统也会提示你操作</p>
<p>部署完成后，选择<strong>联网备案登陆</strong></p>
<p><img src="https://img-blog.csdnimg.cn/0590308ca7d644d7b48ceec2b2ea6951.png"></p>
<p>提交网站所有人信息和一些基本材料等待审核通过，最后在网页底部插入代码即可，效果如图</p>
<p><img src="https://img-blog.csdnimg.cn/e977ba93e0b246739ccb3ff83b602e06.png"></p>
<hr>
<p>到这里，你的个人网站就成功上线了，也部署到了服务器。内容会根据大家的反馈情况持续更新！！！</p>
<p>最后，放上杰森的小破站地址，欢迎到访 haha</p>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/head_portrait.png"></object>
<p>Jason's Blog</p><p>A blacksmith must be strong</p>
<a href="https://pdpeng.github.io"></a>
</div></div>

<p><img src="https://img-blog.csdnimg.cn/6ee456fd0b11484a9b4d55f7d073bca7.png"></p>
<hr>
<p>参考资料</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2RvY3Mvc2hhcmUvODNhYmIxMTQtNDk0Ny00YWFhLWIzOGUtMWFjOWFjZDRiZGFlI3RqcUtM">技术小白如何建站<i class="fa fa-external-link-alt"></i></span> </p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjIyMzk1">Picgo+Gitee搭建个人免费图床<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmFpcnlseWwvcC8xNTA1OTQzNy5odG1s">Git 错误：OpenSSL SSL_read: Connection was reset, errno 10054<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>网站建设</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>单周期 CPU 设计与实现</title>
    <url>/2021/08/05/single-cycle-cpu/</url>
    <content><![CDATA[<h2 id="单周期CPU设计与实现"><a href="#单周期CPU设计与实现" class="headerlink" title="单周期CPU设计与实现"></a>单周期CPU设计与实现</h2><p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515095544.png"></p>
<h3 id="实验内容：学校资料"><a href="#实验内容：学校资料" class="headerlink" title="实验内容：学校资料"></a>实验内容：<code>学校资料</code></h3><p>设计一个单周期CPU，该CPU至少能实现以下指令功能操作。指令与格式如下：</p>
<span id="more"></span>

<p>=&#x3D;&gt; 算术运算指令<br>1. add rd , rs, rt （说明：以助记符表示，是汇编指令；以代码表示，是机器指令）</p>
<table>
<thead>
<tr>
<th>000000</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">rd(5位)</th>
<th>reserved</th>
</tr>
</thead>
</table>
<p>功能：rd←rs + rt。reserved为预留部分，即未用，一般填“0”。<br>2. addi rt , rs ,immediate</p>
<table>
<thead>
<tr>
<th>000001</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：rt←rs + (sign-extend)immediate；immediate符号扩展再参加“加”运算。<br>3. sub rd , rs , rt</p>
<table>
<thead>
<tr>
<th>000000</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">rd(5位)</th>
<th>reserved</th>
</tr>
</thead>
</table>
<p>功能：rd←rs - rt<br>=&#x3D;&gt; 逻辑运算指令<br>4. ori rt , rs ,immediate</p>
<table>
<thead>
<tr>
<th>010000</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：rt←rs | (zero-extend)immediate；immediate做“0”扩展再参加“或”运算。<br>5. and rd , rs , rt</p>
<table>
<thead>
<tr>
<th>010001</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">rd(5位)</th>
<th>reserved</th>
</tr>
</thead>
</table>
<p>功能：rd←rs &amp; rt；逻辑与运算。<br>6. or rd , rs , rt</p>
<table>
<thead>
<tr>
<th>010010</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">rd(5位)</th>
<th>reserved</th>
</tr>
</thead>
</table>
<p>功能：rd←rs | rt；逻辑或运算。</p>
<p>=&#x3D;&gt;移位指令<br>7. sll rd, rt,sa</p>
<table>
<thead>
<tr>
<th>011000</th>
<th align="center">未用</th>
<th align="right">rt(5位)</th>
<th align="right">rd(5位)</th>
<th>sa</th>
<th>reserved</th>
</tr>
</thead>
</table>
<p>功能：rd&lt;－rt&lt;&lt;(zero-extend)sa，左移sa位 ，(zero-extend)sa</p>
<p>=&#x3D;&gt;比较指令<br>8. slti rt, rs,immediate 带符号</p>
<table>
<thead>
<tr>
<th>011011</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：if (rs &lt;(sign-extend)immediate) rt &#x3D;1 else rt&#x3D;0， 具体请看表2 ALU运算功能表，带符号</p>
<p>=&#x3D;&gt; 存储器读&#x2F;写指令<br>9. sw rt ,immediate(rs) 写存储器</p>
<table>
<thead>
<tr>
<th>100110</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：memory[rs+ (sign-extend)immediate]←rt；immediate符号扩展再相加。即将rt寄存器的内容保存到rs寄存器内容和立即数符号扩展后的数相加作为地址的内存单元中。<br>10. lw rt , immediate(rs) 读存储器</p>
<table>
<thead>
<tr>
<th>100111</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：rt ← memory[rs + (sign-extend)immediate]；immediate符号扩展再相加。<br>即读取rs寄存器内容和立即数符号扩展后的数相加作为地址的内存单元中的数，然后保存到rt寄存器中。</p>
<p>=&#x3D;&gt; 分支指令<br>11. beq rs,rt,immediate</p>
<table>
<thead>
<tr>
<th>110000</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：if(rs&#x3D;rt) pc←pc + 4 + (sign-extend)immediate &lt;&lt;2 else pc ←pc + 4<br>特别说明：immediate是从PC+4地址开始和转移到的指令之间指令条数。immediate符号扩展之后左移2位再相加。为什么要左移2位？由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，是右移了2位的，也就是以上说的“指令之间指令条数”。<br>12. bne rs,rt,immediate</p>
<table>
<thead>
<tr>
<th>110001</th>
<th align="center">rs(5位)</th>
<th align="right">rt(5位)</th>
<th align="right">immediate(16位)</th>
</tr>
</thead>
</table>
<p>功能：if(rs!&#x3D;rt) pc←pc + 4 + (sign-extend)immediate &lt;&lt;2 else pc ←pc + 4<br>特别说明：与beq不同点是，不等时转移，相等时顺序执行。</p>
<p>=&#x3D;&gt;跳转指令<br>13. j addr</p>
<table>
<thead>
<tr>
<th>111000</th>
<th align="center">addr[27…2]</th>
</tr>
</thead>
</table>
<p>功能：pc &lt;－{(pc+4)[31..28],addr[27..2],2{0}}，无条件跳转。<br>说明：由于MIPS32的指令代码长度占4个字节，所以指令地址二进制数最低2位均为0，将指令地址放进指令代码中时，可省掉！这样，除了最高6位操作码外，还有26位可用于存放地址，事实上，可存放28位地址了，剩下最高4位由pc+4最高4位拼接上。<br>=&#x3D;&gt; 停机指令<br>14. halt</p>
<table>
<thead>
<tr>
<th>111111</th>
<th align="center">00000000000000000000000000(26位)</th>
</tr>
</thead>
</table>
<p>功能：停机；不改变PC的值，PC保持不变。</p>
<h3 id="实验原理："><a href="#实验原理：" class="headerlink" title="实验原理："></a>实验原理：</h3><p>单周期CPU指的是一条指令的执行在一个时钟周期内完成，然后开始下一条指令的执行，即一条指令用一个时钟周期完成。电平从低到高变化的瞬间称为时钟上升沿，两个相邻时钟上升沿之间的时间间隔称为一个时钟周期。时钟周期一般也称振荡周期（如果晶振的输出没有经过分频就直接作为CPU的工作时钟，则时钟周期就等于振荡周期。若振荡周期经二分频后形成时钟脉冲信号作为CPU的工作时钟，这样，时钟周期就是振荡周期的两倍。）</p>
<h4 id="CPU在处理指令时，一般需要经过以下几个步骤："><a href="#CPU在处理指令时，一般需要经过以下几个步骤：" class="headerlink" title="CPU在处理指令时，一般需要经过以下几个步骤："></a>CPU在处理指令时，一般需要经过以下几个步骤：</h4><ul>
<li>取指令(IF)：根据程序计数器PC中的指令地址，从存储器中取出一条指令，同时，PC根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入PC，当然得到的“地址”需要做些变换才送入PC。</li>
<li>指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。</li>
<li>指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。</li>
<li>存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。</li>
<li>结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。</li>
</ul>
<p>单周期CPU，是在一个时钟周期内完成这五个阶段的处理。</p>
<p>MIPS指令的三种格式：  </p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515095728.png"></p>
<h4 id="其中，"><a href="#其中，" class="headerlink" title="其中，"></a>其中，</h4><ul>
<li>op：为操作码；</li>
<li>rs：只读。为第1个源操作数寄存器，寄存器地址（编号）是00000~11111，00~1F；</li>
<li>rt：可读可写。为第2个源操作数寄存器，或目的操作数寄存器，寄存器地址（同上）；</li>
<li>rd：只写。为目的操作数寄存器，寄存器地址（同上）；</li>
<li>sa：为位移量（shift amt），移位指令用于指定移多少位；</li>
<li>funct：为功能码，在寄存器类型指令中（R类型）用来指定指令的功能与操作码配合使用；</li>
<li>immediate：为16位立即数，用作无符号的逻辑操作数、有符号的算术操作数、数据加载（Load）&#x2F;数据保存（Store）指令的数据地址字节偏移量和分支指令中相对程序计数器（PC）的有符号偏移量；</li>
<li>address：为地址。</li>
</ul>
<h4 id="单周期CPU数据通路和控制线路图："><a href="#单周期CPU数据通路和控制线路图：" class="headerlink" title="单周期CPU数据通路和控制线路图："></a>单周期CPU数据通路和控制线路图：</h4><p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515095544.png"></p>
<table>
<thead>
<tr>
<th>控制信号名</th>
<th>状态“0”</th>
<th>状态“1”</th>
</tr>
</thead>
<tbody><tr>
<td>Reset</td>
<td>初始化PC为0</td>
<td>PC接收新地址</td>
</tr>
<tr>
<td>PCWre</td>
<td>PC不更改，相关指令：halt</td>
<td>PC更改，相关指令：除指令halt外</td>
</tr>
<tr>
<td>ALUSrcA</td>
<td>来自寄存器堆data1输出，相关指令：add、sub、addi、or、and、ori、beq、bne、slti、sw、lw</td>
<td>来自移位数sa，同时，进行(zero-extend)sa，即 {<!-- -->{27{0}},sa}，相关指令：sll</td>
</tr>
<tr>
<td>ALUSrcB</td>
<td>来自寄存器堆data2输出，相关指令：add、sub、or、and、sll、beq、bne</td>
<td>来自sign或zero扩展的立即数，相关指令：addi、ori、slti、sw、lw</td>
</tr>
<tr>
<td>DBDataSrc</td>
<td>来自ALU运算结果的输出，相关指令：add、addi、sub、ori、or、and、slti、sll</td>
<td>来自数据存储器（Data MEM）的输出，相关指令：lw</td>
</tr>
<tr>
<td>RegWre</td>
<td>无写寄存器组寄存器，相关指令：beq、bne、sw、halt、j</td>
<td>寄存器组写使能，相关指令：add、addi、sub、ori、or、and、slti、sll、lw</td>
</tr>
<tr>
<td>InsMemRW</td>
<td>写指令存储器</td>
<td>读指令存储器(Ins. Data)</td>
</tr>
<tr>
<td>mRD</td>
<td>输出高阻态</td>
<td>读数据存储器，相关指令：lw</td>
</tr>
<tr>
<td>mWR</td>
<td>无操作</td>
<td>写数据存储器，相关指令：sw</td>
</tr>
<tr>
<td>RegDst</td>
<td>写寄存器组寄存器的地址，来自rt字段，相关指令：addi、ori、lw、slti</td>
<td>写寄存器组寄存器的地址，来自rd字段，相关指令：add、sub、and、or、sll</td>
</tr>
<tr>
<td>ExtSel</td>
<td>(zero-extend)immediate（0扩展），相关指令：ori</td>
<td>(sign-extend)immediate（符号扩展），相关指令：addi、slti、sw、lw、beq、bne</td>
</tr>
<tr>
<td>PCSrc[1..0]</td>
<td>00：pc&lt;－pc+4，相关指令：add、addi、sub、or、ori、and、slti、sll、sw、lw、beq(zero&#x3D;0)、bne(zero&#x3D;1)；01：pc&lt;－pc+4+(sign-extend)immediate，相关指令：beq(zero&#x3D;1)、bne(zero&#x3D;0)；10：pc&lt;－{(pc+4)[31:28],addr[27:2],2{0}}，相关指令：j；11：未用</td>
<td>-</td>
</tr>
<tr>
<td>ALUOp[2..0]</td>
<td>ALU 8种运算功能选择(000-111)，看功能表</td>
<td></td>
</tr>
</tbody></table>
<h5 id="相关部件及引脚说明："><a href="#相关部件及引脚说明：" class="headerlink" title="相关部件及引脚说明："></a><code>相关部件及引脚说明：</code></h5><ul>
<li>Instruction Memory：指令存储器，</li>
<li>Iaddr，指令存储器地址输入端口</li>
<li>IDataIn，指令存储器数据输入端口（指令代码输入端口）</li>
<li>IDataOut，指令存储器数据输出端口（指令代码输出端口）</li>
<li>RW，指令存储器读写控制信号，为0写，为1读</li>
<li>Data Memory：数据存储器，</li>
<li>Daddr，数据存储器地址输入端口</li>
<li>DataIn，数据存储器数据输入端口</li>
<li>DataOut，数据存储器数据输出端口</li>
<li>&#x2F;RD，数据存储器读控制信号，为0读</li>
<li>&#x2F;WR，数据存储器写控制信号，为0写</li>
<li>Register File：寄存器组</li>
<li>Read Reg1，rs寄存器地址输入端口</li>
<li>Read Reg2，rt寄存器地址输入端口</li>
<li>Write Reg，将数据写入的寄存器端口，其地址来源rt或rd字段</li>
<li>Write Data，写入寄存器的数据输入端口</li>
<li>Read Data1，rs寄存器数据输出端口</li>
<li>Read Data2，rt寄存器数据输出端口</li>
<li>WE，写使能信号，为1时，在时钟边沿触发写入</li>
<li>ALU： 算术逻辑单元</li>
<li>result，ALU运算结果</li>
<li>zero，运算结果标志，结果为0，则zero&#x3D;1；否则zero&#x3D;0</li>
</ul>
<blockquote>
<p><strong>表2 ALU运算功能表</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>ALUOp[2:0]</strong></th>
<th><strong>功能</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>000</strong></td>
<td><strong>Y &#x3D; A + B</strong></td>
<td><strong>加</strong></td>
</tr>
<tr>
<td><strong>001</strong></td>
<td><strong>Y &#x3D; A – B</strong></td>
<td><strong>减</strong></td>
</tr>
<tr>
<td><strong>010</strong></td>
<td><strong>Y &#x3D; B &lt;&lt; A</strong></td>
<td><strong>B左移A位</strong></td>
</tr>
<tr>
<td><strong>011</strong></td>
<td><strong>Y &#x3D; A ∨ B</strong></td>
<td><strong>或</strong></td>
</tr>
<tr>
<td><strong>100</strong></td>
<td><strong>Y &#x3D; A ∧ B</strong></td>
<td><strong>与</strong></td>
</tr>
<tr>
<td><strong>101</strong></td>
<td><strong>Y &#x3D;（A &lt; B）? 1: 0</strong></td>
<td><strong>比较A与B 不带符号</strong></td>
</tr>
<tr>
<td><strong>110</strong></td>
<td></td>
<td><strong>比较A与B 带符号</strong></td>
</tr>
<tr>
<td><strong>111</strong></td>
<td><strong>Y &#x3D; A ⊕ B</strong></td>
<td><strong>异或</strong></td>
</tr>
</tbody></table>
<h3 id="实验过程与结果"><a href="#实验过程与结果" class="headerlink" title="实验过程与结果"></a>实验过程与结果</h3><blockquote>
<p><strong>设计思路以及流程：</strong></p>
</blockquote>
<h5 id="完成控制信号与相对应指令之间相互关系的表格"><a href="#完成控制信号与相对应指令之间相互关系的表格" class="headerlink" title="完成控制信号与相对应指令之间相互关系的表格"></a>完成控制信号与相对应指令之间相互关系的表格</h5><blockquote>
<p>表3是依据表1控制信号的作用以及表2 ALU运算功能表完成的，某些指令无需用到部分模块，则相对应模块的使能控制信号与其无关。例如，对于跳转指令而言，其无需对数据寄存器进行读写操作，则数据寄存器相关的控制信号mRD，mWR设为0，防止修改里面的数据。部分指令执行不需要所有的模块都参与，故有些模块的控制信号与其没有直接关系，为了防止出现一些不必要的错误，统一将指令相对应的无关的使能控制信号默认设置为低电平(0)，无需ALU运算的(例如跳转指令)默认将其操作变成(000)。**</p>
</blockquote>
<p><strong>表3 控制信号与相对应指令之间的相互关系</strong></p>
<table>
<thead>
<tr>
<th><strong>指 令</strong></th>
<th><strong>控制信号量</strong></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><strong>PCWre</strong></td>
<td><strong>ExtSel</strong></td>
<td><strong>InsMemRW</strong></td>
<td><strong>RegDst</strong></td>
<td><strong>RegWre</strong></td>
<td><strong>ALUSrcA</strong></td>
<td><strong>ALUSrcB</strong></td>
<td><strong>PCSrc(zero:0&#x2F;1)</strong></td>
<td><strong>ALUOp</strong></td>
<td><strong>mRD</strong></td>
<td><strong>mWR</strong></td>
<td><strong>DBDataSrc</strong></td>
</tr>
<tr>
<td><strong>addi</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>00</strong></td>
<td><strong>000</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>ori</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>00</strong></td>
<td><strong>011</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>add</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>00</strong></td>
<td><strong>000</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>sub</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>00</strong></td>
<td><strong>001</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>and</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>00</strong></td>
<td><strong>100</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>or</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>00</strong></td>
<td><strong>011</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>sll</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>00</strong></td>
<td><strong>010</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>bne</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>X</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>01&#x2F; 00</strong></td>
<td><strong>001</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>slti</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>00</strong></td>
<td><strong>101</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>beq</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>X</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>00 &#x2F; 01</strong></td>
<td><strong>001</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>sw</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>X</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>00</strong></td>
<td><strong>000</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>lw</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>00</strong></td>
<td><strong>000</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
</tr>
<tr>
<td><strong>j</strong></td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td><strong>1</strong></td>
<td><strong>X</strong></td>
<td><strong>0</strong></td>
<td><strong>X</strong></td>
<td><strong>X</strong></td>
<td><strong>10</strong></td>
<td><strong>000</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
<tr>
<td><strong>halt</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>X</strong></td>
<td><strong>0</strong></td>
<td><strong>X</strong></td>
<td><strong>X</strong></td>
<td><strong>00</strong></td>
<td><strong>000</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
</tr>
</tbody></table>
<p><code>完成控制信号与相对应指令之间的关系以后该表后，对于如何实现单周期依旧感到很模糊，不知道相对应的信号量具体的控制意义，因此尝试结合实验原理中的图2单周期CPU数据通路和控制线路图，思考三种类型的指令，R型、I型、J型指令的CPU处理过程。对于R型指令而言，主要是一些算术运算指令和逻辑运算，主要为取指令，解析指令，执行指令，将运算结果写回寄存器组，其不需要访问数据寄存器，下一条指令顺序下一条，即pc←pc+4，其中的一些运算则由控制单元得到指令的操作码以后，设置控制信号，控制各个模块执行不同操作或者数据选择器选择相对应的输入作为输出；对于I型指令，其包含指令种类比较多，存储器指令，需要对存储器进行读或写的操作，对于pc没有别的特别影响，而分支指令则下一个pc可能不是pc+4，需要依据其运算结果做相对应的跳转操作或者顺序执行操作；对于J型指令，其是跳转指令，跳转到指令中相对应的地址中，主要对pc进行操作。不同类型的指令，其进行的过程并非完成相同的，不同类型指令所使用的模块并不是一样的，所有的指令也不是都需要完整的五个处理阶段。结合CPU数据通路图以及指令相对应的控制信号后，对于每种指令的数据通路有了一个比较清晰的了解，对于每个控制信号与相对应的功能模块更加熟悉和了解，理清了如何设计单周期CPU，即将其模块化，并且在控制单元中依据指令的操作码，对各个模块的控制信号进行一定的设定，执行指令相对应的操作。</code></p>
<h5 id="CPU模块划分与实现"><a href="#CPU模块划分与实现" class="headerlink" title="CPU模块划分与实现"></a>CPU模块划分与实现</h5><p>依据图2 单周期CPU数据通路和控制线路图，将CPU划分为9个模块，没有完全依据单周期CPU数据通路图进行划分，主要依据数据通路图进行划分太冗余，因此将一些数据选择器合并进了部分功能模块中，实现简化。模块划分结果如图三所示。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515095701.png"></p>
<h4 id="pcAdd"><a href="#pcAdd" class="headerlink" title="pcAdd"></a>pcAdd</h4><ul>
<li><p>模块功能：根据控制信号PCSrc，计算获得下一个pc以及控制信号Reset重置。</p>
</li>
<li><p>实现思路：首先先决定何时引起触发，决定敏感变量，该模块选择将时钟的下降沿以及控制信号Reset的下降沿作为敏感变量，主要是为了能够确保下一条pc能够正确得到。</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">module pcAdd(</span><br><span class="line">        input Reset,</span><br><span class="line">        input CLK,               //时钟</span><br><span class="line">        input [1:0] PCSrc,             //数据选择器输入</span><br><span class="line">        input [31:0] immediate,  //偏移量</span><br><span class="line">        input [25:0] addr,</span><br><span class="line">        input [31:0] curPC,</span><br><span class="line">        output reg[31:0] nextPC  //新指令地址</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        nextPC &lt;= 0;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    reg [31:0] pc;</span><br><span class="line"></span><br><span class="line">    always@(negedge CLK or negedge Reset)</span><br><span class="line">    begin</span><br><span class="line">        <span class="keyword">if</span>(!Reset) begin</span><br><span class="line">            nextPC &lt;= 0;</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">else</span> begin</span><br><span class="line">            pc &lt;= curPC + 4;</span><br><span class="line">            <span class="keyword">case</span>(PCSrc)</span><br><span class="line">                2<span class="string">&#x27;b00: nextPC &lt;= curPC + 4;</span></span><br><span class="line"><span class="string">                2&#x27;</span>b01: nextPC &lt;= curPC + 4 + immediate * 4;</span><br><span class="line">                2<span class="string">&#x27;b10: nextPC &lt;= &#123;pc[31:28],addr,2&#x27;</span>b00&#125;;</span><br><span class="line">                2<span class="string">&#x27;b11: nextPC &lt;= nextPC;</span></span><br><span class="line"><span class="string">            endcase</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h4><ul>
<li><p>模块功能：根据控制信号PCWre，判断pc是否改变以及根据Reset信号判断是否重置</p>
</li>
<li><p>实现思路：将时钟信号的上升沿和控制信号Reset作为敏感变量，使得pc在上升沿的时候发生改变或被重置。</p>
</li>
<li><p>主要实现代码：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">module PC(</span><br><span class="line">       input CLK,               //时钟</span><br><span class="line">       input Reset,             //是否重置地址。0-初始化PC，否则接受新地址</span><br><span class="line">       input PCWre,             //是否接受新的地址。0-不更改；1-可以更改</span><br><span class="line">       input [1:0] PCSrc,             //数据选择器输入</span><br><span class="line">       input [31:0] nextPC,  //新指令地址</span><br><span class="line">       output reg[31:0] curPC //当前指令的地址</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        curPC &lt;= 0;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    always@(posedge CLK or negedge Reset)</span><br><span class="line">    begin</span><br><span class="line">        <span class="keyword">if</span>(!Reset) // Reset == 0, PC = 0</span><br><span class="line">            begin</span><br><span class="line">                curPC &lt;= 0;</span><br><span class="line">            end</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            begin</span><br><span class="line">                <span class="keyword">if</span>(PCWre) // PCWre == 1</span><br><span class="line">                    begin </span><br><span class="line">                        curPC &lt;= nextPC;</span><br><span class="line">                    end</span><br><span class="line">                <span class="keyword">else</span>    // PCWre == 0, halt</span><br><span class="line">                    begin</span><br><span class="line">                        curPC &lt;= curPC;</span><br><span class="line">                    end</span><br><span class="line">            end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="InsMEM"><a href="#InsMEM" class="headerlink" title="InsMEM"></a>InsMEM</h4><ul>
<li><p>模块功能：依据当前pc，读取指令寄存器中，相对应地址的指令</p>
</li>
<li><p>实现思路：将pc的输入作为敏感变量，当pc发生改变的时候，则进行指令的读取，根据相关的地址，输出指令寄存器中相对应的指令</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">//ROM</span><br><span class="line">//instruction memory 指令寄存器</span><br><span class="line">module InsMEM(</span><br><span class="line">        input [31:0] IAddr,</span><br><span class="line">        input InsMemRW,             //状态为<span class="string">&#x27;0&#x27;</span>，写指令寄存器，否则为读指令寄存器</span><br><span class="line">        output reg[31:0] IDataOut</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    reg [7:0] rom[128:0];  // 存储器定义必须用reg类型，存储器存储单元8位长度，共128个存储单元，可以存32条指令</span><br><span class="line"></span><br><span class="line">    // 加载数据到存储器rom。注意：必须使用绝对路径</span><br><span class="line">    initial </span><br><span class="line">    begin</span><br><span class="line">        <span class="variable">$readmemb</span>(<span class="string">&quot;地址\\rom.txt&quot;</span>, rom);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    //大端模式</span><br><span class="line">    always@(IAddr or InsMemRW)</span><br><span class="line">    begin</span><br><span class="line">        //取指令</span><br><span class="line">        <span class="keyword">if</span>(InsMemRW)</span><br><span class="line">            begin</span><br><span class="line">                IDataOut[7:0] = rom[IAddr + 3];</span><br><span class="line">                IDataOut[15:8] = rom[IAddr + 2];</span><br><span class="line">                IDataOut[23:16] = rom[IAddr + 1];</span><br><span class="line">                IDataOut[31:24] = rom[IAddr];</span><br><span class="line">            end </span><br><span class="line">            //<span class="variable">$display</span>(<span class="string">&quot;iaddr: %d insmemrw: %d inst; %d&quot;</span>,IAddr, InsMemRW, IDataOut);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="InstructionCut"><a href="#InstructionCut" class="headerlink" title="InstructionCut"></a>InstructionCut</h4><ul>
<li><p>模块功能：对指令进行分割，获得相对应的指令信息</p>
</li>
<li><p>实现思路：根据各种类型的指令结构，将指令分割，得到相对应的信息</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">//指令分割</span><br><span class="line">module InstructionCut(</span><br><span class="line">        input [31:0] instruction,</span><br><span class="line">        output reg[5:0] op,</span><br><span class="line">        output reg[4:0] rs,</span><br><span class="line">        output reg[4:0] rt,</span><br><span class="line">        output reg[4:0] rd,</span><br><span class="line">        output reg[4:0] sa,</span><br><span class="line">        output reg[15:0] immediate,</span><br><span class="line">        output reg[25:0] addr</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        op = 5<span class="string">&#x27;b00000;</span></span><br><span class="line"><span class="string">        rs = 5&#x27;</span>b00000;</span><br><span class="line">        rt = 5<span class="string">&#x27;b00000;</span></span><br><span class="line"><span class="string">        rd = 5&#x27;</span>b00000;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    always@(instruction) </span><br><span class="line">    begin</span><br><span class="line">        op = instruction[31:26];</span><br><span class="line">        rs = instruction[25:21];</span><br><span class="line">        rt = instruction[20:16];</span><br><span class="line">        rd = instruction[15:11];</span><br><span class="line">        sa = instruction[10:6];</span><br><span class="line">        immediate = instruction[15:0];</span><br><span class="line">        addr = instruction[25:0];</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="ControlUnit"><a href="#ControlUnit" class="headerlink" title="ControlUnit"></a>ControlUnit</h4><ul>
<li><p>模块功能：控制单元，依据指令的操作码(op)以及标记符(ZERO)，输出PCWre、ALUSrcB等控制信号，各控制信号的作用见实验原理的控制信号作用表（表3），从而达到控制各指令的目的.</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">//Control Unit</span><br><span class="line">module ControlUnit(</span><br><span class="line">        input zero,         //ALU运算结果是否为0，为0时候为1</span><br><span class="line">        input [5:0] op,     //指令的操作码</span><br><span class="line">        output reg PCWre,       //PC是否更改的信号量，为0时候不更改，否则可以更改</span><br><span class="line">        output reg ExtSel,      //立即数扩展的信号量，为0时候为0扩展，否则为符号扩展</span><br><span class="line">        output reg InsMemRW,    //指令寄存器的状态操作符，为0的时候写指令寄存器，否则为读指令寄存器</span><br><span class="line">        output reg RegDst,      //写寄存器组寄存器的地址，为0的时候地址来自rt，为1的时候地址来自rd</span><br><span class="line">        output reg RegWre,      //寄存器组写使能，为1的时候可写</span><br><span class="line">        output reg ALUSrcA,     //控制ALU数据A的选择端的输入，为0的时候，来自寄存器堆data1输出，为1的时候来自移位数sa</span><br><span class="line">        output reg ALUSrcB,     //控制ALU数据B的选择端的输入，为0的时候，来自寄存器堆data2输出，为1时候来自扩展过的立即数</span><br><span class="line">        output reg [1:0]PCSrc,  //获取下一个pc的地址的数据选择器的选择端输入</span><br><span class="line">        output reg [2:0]ALUOp,  //ALU 8种运算功能选择(000-111)</span><br><span class="line">        output reg mRD,         //数据存储器读控制信号，为0读</span><br><span class="line">        output reg mWR,         //数据存储器写控制信号，为0写</span><br><span class="line">        output reg DBDataSrc    //数据保存的选择端，为0来自ALU运算结果的输出，为1来自数据寄存器（Data MEM）的输出        </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        InsMemRW = 1;</span><br><span class="line">        PCWre = 1;</span><br><span class="line">        mRD = 0;</span><br><span class="line">        mWR = 0;</span><br><span class="line">        DBDataSrc = 0;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    always@(op or zero) </span><br><span class="line">    begin</span><br><span class="line">        PCWre = (op == 6<span class="string">&#x27;b111111) ? 0 : 1;   //halt</span></span><br><span class="line"><span class="string">        InsMemRW = (op == 6&#x27;</span>b111111) ? 0 : 1;    </span><br><span class="line">        mWR = (op == 6<span class="string">&#x27;b100110) ? 1 : 0;     //sw</span></span><br><span class="line"><span class="string">        mRD = (op == 6&#x27;</span>b100111) ? 1 : 0;     //lw</span><br><span class="line">        DBDataSrc = (op == 6<span class="string">&#x27;b100111) ? 1 : 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        case(op)</span></span><br><span class="line"><span class="string">            //addi</span></span><br><span class="line"><span class="string">            6&#x27;</span>b000001:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 1;</span><br><span class="line">                    RegDst = 0;</span><br><span class="line">                    RegWre = 1;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 1;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b00;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b000;</span><br><span class="line">                end</span><br><span class="line">            //ori</span><br><span class="line">            6<span class="string">&#x27;b010000:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 1;</span></span><br><span class="line"><span class="string">                    RegDst = 0;</span></span><br><span class="line"><span class="string">                    RegWre = 1;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 1;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b011;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //add</span></span><br><span class="line"><span class="string">            6&#x27;</span>b000000:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 0;</span><br><span class="line">                    RegDst = 1;</span><br><span class="line">                    RegWre = 1;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 0;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b00;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b000;</span><br><span class="line">                end</span><br><span class="line">            //sub</span><br><span class="line">            6<span class="string">&#x27;b000010:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 1;</span></span><br><span class="line"><span class="string">                    RegDst = 1;</span></span><br><span class="line"><span class="string">                    RegWre = 1;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 0;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b001;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //and</span></span><br><span class="line"><span class="string">            6&#x27;</span>b010001:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 0;</span><br><span class="line">                    RegDst = 1;</span><br><span class="line">                    RegWre = 1;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 0;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b00;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b100;</span><br><span class="line">                end</span><br><span class="line">            //or</span><br><span class="line">            6<span class="string">&#x27;b010010:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 0;</span></span><br><span class="line"><span class="string">                    RegDst = 1;</span></span><br><span class="line"><span class="string">                    RegWre = 1;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 0;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b011;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //sll</span></span><br><span class="line"><span class="string">            6&#x27;</span>b011000:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 0;</span><br><span class="line">                    RegDst = 1;</span><br><span class="line">                    RegWre = 1;</span><br><span class="line">                    ALUSrcA = 1;</span><br><span class="line">                    ALUSrcB = 0;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b00;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b010;</span><br><span class="line">                end</span><br><span class="line">            //bne</span><br><span class="line">            6<span class="string">&#x27;b110001:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 1;</span></span><br><span class="line"><span class="string">                    RegDst = 0;</span></span><br><span class="line"><span class="string">                    RegWre = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 0;</span></span><br><span class="line"><span class="string">                    PCSrc = zero ? 2&#x27;</span>b00 : 2<span class="string">&#x27;b01;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b001;</span><br><span class="line">                end</span><br><span class="line">            //slti</span><br><span class="line">            6<span class="string">&#x27;b011011:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 1;</span></span><br><span class="line"><span class="string">                    RegDst = 0;</span></span><br><span class="line"><span class="string">                    RegWre = 1;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 1;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b101;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //beq</span></span><br><span class="line"><span class="string">            6&#x27;</span>b110000:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 1;</span><br><span class="line">                    RegDst = 0;</span><br><span class="line">                    RegWre = 0;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 0;</span><br><span class="line">                    PCSrc = zero ? 2<span class="string">&#x27;b01 : 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b001;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //sw</span></span><br><span class="line"><span class="string">            6&#x27;</span>b100110:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 1;</span><br><span class="line">                    RegDst = 0;</span><br><span class="line">                    RegWre = 0;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 1;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b00;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b000;</span><br><span class="line">                end</span><br><span class="line">            //lw</span><br><span class="line">            6<span class="string">&#x27;b100111:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 1;</span></span><br><span class="line"><span class="string">                    RegDst = 0;</span></span><br><span class="line"><span class="string">                    RegWre = 1;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 1;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b00;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b000;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            //j</span></span><br><span class="line"><span class="string">            6&#x27;</span>b111000:</span><br><span class="line">                begin</span><br><span class="line">                    ExtSel = 0;</span><br><span class="line">                    RegDst = 0;</span><br><span class="line">                    RegWre = 0;</span><br><span class="line">                    ALUSrcA = 0;</span><br><span class="line">                    ALUSrcB = 0;</span><br><span class="line">                    PCSrc = 2<span class="string">&#x27;b10;</span></span><br><span class="line"><span class="string">                    ALUOp = 3&#x27;</span>b000;</span><br><span class="line">                end</span><br><span class="line">            //halt</span><br><span class="line">            6<span class="string">&#x27;b111111:</span></span><br><span class="line"><span class="string">                begin</span></span><br><span class="line"><span class="string">                    ExtSel = 0;</span></span><br><span class="line"><span class="string">                    RegDst = 0;</span></span><br><span class="line"><span class="string">                    RegWre = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcA = 0;</span></span><br><span class="line"><span class="string">                    ALUSrcB = 0;</span></span><br><span class="line"><span class="string">                    PCSrc = 2&#x27;</span>b11;</span><br><span class="line">                    ALUOp = 3<span class="string">&#x27;b000;</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">        endcase</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="RegisterFile"><a href="#RegisterFile" class="headerlink" title="RegisterFile"></a>RegisterFile</h4><ul>
<li><p>模块功能：寄存器组，通过控制单元输出的控制信号，进行相对应的读或写操作</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">//寄存器组</span><br><span class="line">module RegisterFile(</span><br><span class="line">        input CLK,                  //时钟</span><br><span class="line">        input [4:0] ReadReg1,    //rs寄存器地址输入端口</span><br><span class="line">        input [4:0] ReadReg2,    //rt寄存器地址输入端口</span><br><span class="line">        input [31:0] WriteData,     //写入寄存器的数据输入端口</span><br><span class="line">        input [4:0] WriteReg,       //将数据写入的寄存器端口，其地址来源rt或rd字段</span><br><span class="line">        input RegWre,               //WE，写使能信号，为1时，在时钟边沿触发写入</span><br><span class="line">        output reg[31:0] ReadData1,  //rs寄存器数据输出端口</span><br><span class="line">        output reg[31:0] ReadData2   //rt寄存器数据输出端口</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        ReadData1 &lt;= 0;</span><br><span class="line">        ReadData2 &lt;= 0;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    reg [31:0] regFile[0:31]; //  寄存器定义必须用reg类型</span><br><span class="line">    <span class="built_in">integer</span> i;</span><br><span class="line">    initial begin</span><br><span class="line">        <span class="keyword">for</span> (i = 0; i &lt; 32; i = i+ 1) regFile[i] &lt;= 0;  </span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    always@(ReadReg1 or ReadReg2) </span><br><span class="line">    begin</span><br><span class="line">        ReadData1 = regFile[ReadReg1];</span><br><span class="line">        ReadData2 = regFile[ReadReg2];</span><br><span class="line">        //<span class="variable">$display</span>(<span class="string">&quot;regfile %d %d\n&quot;</span>, ReadReg1, ReadReg2);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    always@(negedge CLK)</span><br><span class="line">    begin</span><br><span class="line">        //<span class="variable">$0</span>恒为0，所以写入寄存器的地址不能为0</span><br><span class="line">        <span class="keyword">if</span>(RegWre &amp;&amp; WriteReg)</span><br><span class="line">            begin</span><br><span class="line">                regFile[WriteReg] &lt;= WriteData;</span><br><span class="line">            end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h4><ul>
<li><p>模块功能：算术逻辑单元，对两个输入依据ALUOp进行相对应的运算</p>
</li>
<li><p>实现思路：依据实验原理中的ALU运算功能表(表2)完成操作码对应的操作</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">module ALU(</span><br><span class="line">        input ALUSrcA,</span><br><span class="line">        input ALUSrcB,</span><br><span class="line">        input [31:0] ReadData1,</span><br><span class="line">        input [31:0] ReadData2,</span><br><span class="line">        input [4:0] sa,</span><br><span class="line">        input [31:0] extend,</span><br><span class="line">        input [2:0] ALUOp,</span><br><span class="line">        output reg zero,</span><br><span class="line">        output reg[31:0] result</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    reg [31:0] A;</span><br><span class="line">    reg [31:0] B;</span><br><span class="line"></span><br><span class="line">    always@(ReadData1 or ReadData2 or ALUSrcA or ALUSrcB or ALUOp) </span><br><span class="line">    begin</span><br><span class="line">        //定义两个输入端口</span><br><span class="line">        A = (ALUSrcA == 0) ? ReadData1 : sa;</span><br><span class="line">        B = (ALUSrcB == 0) ? ReadData2 : extend;</span><br><span class="line">        <span class="keyword">case</span>(ALUOp)</span><br><span class="line">            3<span class="string">&#x27;b000: result = A + B;</span></span><br><span class="line"><span class="string">            3&#x27;</span>b001: result = A - B;</span><br><span class="line">            3<span class="string">&#x27;b010: result = B &lt;&lt; A;</span></span><br><span class="line"><span class="string">            3&#x27;</span>b011: result = A | B;</span><br><span class="line">            3<span class="string">&#x27;b100: result = A &amp; B;</span></span><br><span class="line"><span class="string">            3&#x27;</span>b101: result = (A &lt; B) ? 1 : 0;</span><br><span class="line">            3<span class="string">&#x27;b110: result = (((ReadData1 &lt; ReadData2) &amp;&amp; (ReadData1[31] == ReadData2[31] )) ||( ( ReadData1[31] ==1 &amp;&amp; ReadData2[31] == 0))) ? 1:0;</span></span><br><span class="line"><span class="string">            3&#x27;</span>b111: result = A ^ B;</span><br><span class="line">        endcase</span><br><span class="line">        zero = (result == 0) ? 1 : 0;</span><br><span class="line">    end </span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="DataMEM"><a href="#DataMEM" class="headerlink" title="DataMEM"></a>DataMEM</h4><ul>
<li><p>模块功能：数据存储器，通过控制信号，对数据寄存器进行读或者写操作，并且此处模块额外合并了输出DB的数据选择器，此模块同时输出写回寄存器组的数据DB。</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">//RAM</span><br><span class="line">//data memory 数据存储器</span><br><span class="line">module DataMEM(</span><br><span class="line">        /*</span><br><span class="line">            Daddr，数据存储器地址输入端口</span><br><span class="line">            DataIn，数据存储器数据输入端口</span><br><span class="line">            DataOut，数据存储器数据输出端口</span><br><span class="line">            mRD，数据存储器读控制信号，为0读</span><br><span class="line">            mWR，数据存储器写控制信号，为0写</span><br><span class="line">        */</span><br><span class="line">        input mRD,</span><br><span class="line">        input mWR,</span><br><span class="line">        input CLK,</span><br><span class="line">        input DBDataSrc,</span><br><span class="line">        input [31:0] DAddr,</span><br><span class="line">        input [31:0] DataIn,</span><br><span class="line">        output reg[31:0] DataOut,</span><br><span class="line">        output reg[31:0] DB</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin </span><br><span class="line">        DB &lt;= 16<span class="string">&#x27;b0;</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     reg [7:0] ram [0:31];     // 存储器定义必须用reg类型    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    always@(mRD or DAddr or DBDataSrc)</span></span><br><span class="line"><span class="string">    begin</span></span><br><span class="line"><span class="string">        //读</span></span><br><span class="line"><span class="string">        DataOut[7:0] = mRD ? ram[DAddr + 3] : 8&#x27;</span>bz; // z 为高阻态     </span><br><span class="line">        DataOut[15:8] = mRD ? ram[DAddr + 2] : 8<span class="string">&#x27;bz;     </span></span><br><span class="line"><span class="string">        DataOut[23:16] = mRD ? ram[DAddr + 1] : 8&#x27;</span>bz;     </span><br><span class="line">        DataOut[31:24] = mRD ? ram[DAddr] : 8<span class="string">&#x27;bz;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        DB = (DBDataSrc == 0) ? DAddr : DataOut;</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    always@(negedge CLK)</span></span><br><span class="line"><span class="string">    begin   </span></span><br><span class="line"><span class="string">        //写</span></span><br><span class="line"><span class="string">        if(mWR)</span></span><br><span class="line"><span class="string">            begin</span></span><br><span class="line"><span class="string">                ram[DAddr] = DataIn[31:24];    </span></span><br><span class="line"><span class="string">                ram[DAddr + 1] = DataIn[23:16];</span></span><br><span class="line"><span class="string">                ram[DAddr + 2] = DataIn[15:8];     </span></span><br><span class="line"><span class="string">                ram[DAddr + 3] = DataIn[7:0];    </span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        //$display(&quot;mwr: %d $12 %d %d %d %d&quot;, mWR, ram[12], ram[13], ram[14], ram[15]);</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="SignZeroExtend"><a href="#SignZeroExtend" class="headerlink" title="SignZeroExtend"></a>SignZeroExtend</h4><ul>
<li><p>模块功能：根据指令相关的控制信号ExtSel，对立即数进行扩展。</p>
</li>
<li><p>实现思路：根据控制信号ExtSel判断是0扩展还是符号扩展，然后进行相对应的扩展</p>
<ul>
<li>主要实现代码：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">module SignZeroExtend(</span><br><span class="line">        input wire [15:0] immediate,    //立即数</span><br><span class="line">        input ExtSel,                   //状态<span class="string">&#x27;0&#x27;</span>,0扩展，否则符号位扩展</span><br><span class="line">        output [31:0] extendImmediate</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    always@(extendImmediate)</span><br><span class="line">    begin</span><br><span class="line">        <span class="variable">$display</span>(<span class="string">&quot;%d&quot;</span>, extendImmediate[31]);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    assign extendImmediate[15:0] = immediate;</span><br><span class="line">    assign extendImmediate[31:16] = ExtSel ? (immediate[15] ? 16<span class="string">&#x27;hffff : 16&#x27;</span>h0000) : 16<span class="string">&#x27;h0000;</span></span><br><span class="line"><span class="string">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="顶层模块：SingleCycleCPU"><a href="#顶层模块：SingleCycleCPU" class="headerlink" title="顶层模块：SingleCycleCPU"></a>顶层模块：SingleCycleCPU</h4><ul>
<li>实现思路：在顶层模块中将各个已实现的底层模块进行实列，并且用verilog语言将各个模块用线连接起来</li>
<li>代码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line"></span><br><span class="line">module SingleCycleCPU(</span><br><span class="line">        input CLK,</span><br><span class="line">        input Reset,</span><br><span class="line">        output [31:0] curPC,</span><br><span class="line">        output [31:0] nextPC,</span><br><span class="line">        output [31:0] instruction,</span><br><span class="line">        output [5:0] op,</span><br><span class="line">        output [4:0] rs,</span><br><span class="line">        output [4:0] rt,</span><br><span class="line">        output [4:0] rd,</span><br><span class="line">        output [31:0] DB,</span><br><span class="line">        output [31:0] A,</span><br><span class="line">        output [31:0] B,</span><br><span class="line">        output [31:0] result,</span><br><span class="line">        output [1:0] PCSrc,</span><br><span class="line">        output zero,</span><br><span class="line">        output PCWre,       //PC是否更改的信号量，为0时候不更改，否则可以更改</span><br><span class="line">        output ExtSel,      //立即数扩展的信号量，为0时候为0扩展，否则为符号扩展</span><br><span class="line">        output InsMemRW,    //指令寄存器的状态操作符，为0的时候写指令寄存器，否则为读指令寄存器</span><br><span class="line">        output RegDst,      //写寄存器组寄存器的地址，为0的时候地址来自rt，为1的时候地址来自rd</span><br><span class="line">        output RegWre,      //寄存器组写使能，为1的时候可写</span><br><span class="line">        output ALUSrcA,     //控制ALU数据A的选择端的输入，为0的时候，来自寄存器堆data1输出，为1的时候来自移位数sa</span><br><span class="line">        output ALUSrcB,     //控制ALU数据B的选择端的输入，为0的时候，来自寄存器堆data2输出，为1时候来自扩展过的立即数</span><br><span class="line">        output [2:0]ALUOp,  //ALU 8种运算功能选择(000-111)</span><br><span class="line">        output mRD,         //数据存储器读控制信号，为0读</span><br><span class="line">        output mWR,         //数据存储器写控制信号，为0写</span><br><span class="line">        output DBDataSrc    //数据保存的选择端，为0来自ALU运算结果的输出，为1来自数据寄存器（Data MEM）的输出  </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    wire [31:0] extend;</span><br><span class="line">    wire [31:0] DataOut;</span><br><span class="line">    wire[4:0] sa;</span><br><span class="line">    wire[15:0] immediate;</span><br><span class="line">    wire[25:0] addr;</span><br><span class="line"></span><br><span class="line">    pcAdd pcAdd(.Reset(Reset),</span><br><span class="line">                .CLK(CLK),</span><br><span class="line">                .PCSrc(PCSrc),</span><br><span class="line">                .immediate(extend),</span><br><span class="line">                .addr(addr),</span><br><span class="line">                .curPC(curPC),</span><br><span class="line">                .nextPC(nextPC));</span><br><span class="line"></span><br><span class="line">    PC pc(.CLK(CLK),</span><br><span class="line">          .Reset(Reset),</span><br><span class="line">          .PCWre(PCWre),</span><br><span class="line">          .PCSrc(PCSrc),</span><br><span class="line">          .nextPC(nextPC),</span><br><span class="line">          .curPC(curPC));</span><br><span class="line"></span><br><span class="line">    InsMEM InsMEM(.IAddr(curPC), </span><br><span class="line">                .InsMemRW(InsMemRW), </span><br><span class="line">                .IDataOut(instruction));</span><br><span class="line"></span><br><span class="line">    InstructionCut InstructionCut(.instruction(instruction),</span><br><span class="line">                                  .op(op),</span><br><span class="line">                                  .rs(rs),</span><br><span class="line">                                  .rt(rt),</span><br><span class="line">                                  .rd(rd),</span><br><span class="line">                                  .sa(sa),</span><br><span class="line">                                  .immediate(immediate),</span><br><span class="line">                                  .addr(addr));</span><br><span class="line"></span><br><span class="line">    ControlUnit ControlUnit(.zero(zero),</span><br><span class="line">                            .op(op),</span><br><span class="line">                            .PCWre(PCWre),</span><br><span class="line">                            .ExtSel(ExtSel),</span><br><span class="line">                            .InsMemRW(InsMemRW),</span><br><span class="line">                            .RegDst(RegDst),</span><br><span class="line">                            .RegWre(RegWre),</span><br><span class="line">                            .ALUSrcA(ALUSrcA),</span><br><span class="line">                            .ALUSrcB(ALUSrcB),</span><br><span class="line">                            .PCSrc(PCSrc),</span><br><span class="line">                            .ALUOp(ALUOp),</span><br><span class="line">                            .mRD(mRD),</span><br><span class="line">                            .mWR(mWR),</span><br><span class="line">                            .DBDataSrc(DBDataSrc));</span><br><span class="line"></span><br><span class="line">    RegisterFile RegisterFile(.CLK(CLK),</span><br><span class="line">                              .ReadReg1(rs),</span><br><span class="line">                              .ReadReg2(rt),</span><br><span class="line">                              .WriteData(DB),</span><br><span class="line">                              .WriteReg(RegDst ? rd : rt),</span><br><span class="line">                              .RegWre(RegWre),</span><br><span class="line">                              .ReadData1(A),</span><br><span class="line">                              .ReadData2(B));</span><br><span class="line"></span><br><span class="line">    ALU alu(.ALUSrcA(ALUSrcA),</span><br><span class="line">            .ALUSrcB(ALUSrcB),</span><br><span class="line">            .ReadData1(A),</span><br><span class="line">            .ReadData2(B),</span><br><span class="line">            .sa(sa),</span><br><span class="line">            .extend(extend),</span><br><span class="line">            .ALUOp(ALUOp),</span><br><span class="line">            .zero(zero),</span><br><span class="line">            .result(result));</span><br><span class="line"></span><br><span class="line">    DataMEM DataMEM(.mRD(mRD),</span><br><span class="line">                    .mWR(mWR),</span><br><span class="line">                    .CLK(CLK),</span><br><span class="line">                    .DBDataSrc(DBDataSrc),</span><br><span class="line">                    .DAddr(result),</span><br><span class="line">                    .DataIn(B),</span><br><span class="line">                    .DataOut(DataOut),</span><br><span class="line">                    .DB(DB));</span><br><span class="line"></span><br><span class="line">    SignZeroExtend SignZeroExtend(.immediate(immediate),</span><br><span class="line">                                  .ExtSel(ExtSel),</span><br><span class="line">                                  .extendImmediate(extend));</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h3 id="CPU正确性的验证"><a href="#CPU正确性的验证" class="headerlink" title="CPU正确性的验证"></a>CPU正确性的验证</h3><h4 id="仿真程序："><a href="#仿真程序：" class="headerlink" title="仿真程序："></a>仿真程序：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line"></span><br><span class="line">module TestSingleCycleCpu();</span><br><span class="line">    // Inputs</span><br><span class="line">    reg CLK;</span><br><span class="line">    reg Reset;</span><br><span class="line"></span><br><span class="line">    // Outputs</span><br><span class="line">    wire [1:0] PCSrc;</span><br><span class="line">    wire [5:0] op;</span><br><span class="line">    wire [4:0] rs;</span><br><span class="line">    wire [4:0] rt;</span><br><span class="line">    wire [4:0] rd;</span><br><span class="line">    wire [31:0] DB;</span><br><span class="line">    wire [31:0] result;</span><br><span class="line">    wire [31:0] curPC;</span><br><span class="line">    wire [31:0] nextPC;</span><br><span class="line">    wire [31:0] instruction;</span><br><span class="line">    wire [31:0] A;</span><br><span class="line">    wire [31:0] B;</span><br><span class="line">    wire zero;</span><br><span class="line">    wire PCWre;       //PC是否更改的信号量，为0时候不更改，否则可以更改</span><br><span class="line">    wire ExtSel;      //立即数扩展的信号量，为0时候为0扩展，否则为符号扩展</span><br><span class="line">    wire InsMemRW;    //指令寄存器的状态操作符，为0的时候写指令寄存器，否则为读指令寄存器</span><br><span class="line">    wire RegDst;      //写寄存器组寄存器的地址，为0的时候地址来自rt，为1的时候地址来自rd</span><br><span class="line">    wire RegWre;      //寄存器组写使能，为1的时候可写</span><br><span class="line">    wire ALUSrcA;     //控制ALU数据A的选择端的输入，为0的时候，来自寄存器堆data1输出，为1的时候来自移位数sa</span><br><span class="line">    wire ALUSrcB;     //控制ALU数据B的选择端的输入，为0的时候，来自寄存器堆data2输出，为1时候来自扩展过的立即数</span><br><span class="line">    wire [2:0]ALUOp;  //ALU 8种运算功能选择(000-111)</span><br><span class="line">    wire mRD;         //数据存储器读控制信号，为0读</span><br><span class="line">    wire mWR;         //数据存储器写控制信号，为0写</span><br><span class="line">    wire DBDataSrc;    //数据保存的选择端，为0来自ALU运算结果的输出，为1来自数据寄存器（Data MEM）的输出  </span><br><span class="line">    // Instantiate the Unit Under Test (UUT)</span><br><span class="line">    SingleCycleCPU uut (</span><br><span class="line">        .CLK(CLK), </span><br><span class="line">        .Reset(Reset), </span><br><span class="line">        .curPC(curPC),</span><br><span class="line">        .nextPC(nextPC),</span><br><span class="line">        .instruction(instruction),</span><br><span class="line">        .op(op), </span><br><span class="line">        .rs(rs),</span><br><span class="line">        .rt(rt),</span><br><span class="line">        .rd(rd),</span><br><span class="line">        .DB(DB),</span><br><span class="line">        .A(A),</span><br><span class="line">        .B(B),</span><br><span class="line">        .result(result),</span><br><span class="line">        .PCSrc(PCSrc),</span><br><span class="line">        .zero(zero),</span><br><span class="line">        .PCWre(PCWre),</span><br><span class="line">        .ExtSel(ExtSel),</span><br><span class="line">        .InsMemRW(InsMemRW),</span><br><span class="line">        .RegDst(RegDst),</span><br><span class="line">        .RegWre(RegWre),</span><br><span class="line">        .ALUSrcA(ALUSrcA),</span><br><span class="line">        .ALUSrcB(ALUSrcB),</span><br><span class="line">        .ALUOp(ALUOp),</span><br><span class="line">        .mRD(mRD),</span><br><span class="line">        .mWR(mWR),</span><br><span class="line">        .DBDataSrc(DBDataSrc)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    initial begin</span><br><span class="line">        // Initialize Inputs</span><br><span class="line">        CLK = 1;</span><br><span class="line">        Reset = 0;</span><br><span class="line"></span><br><span class="line">        CLK = !CLK;  // 下降沿，使PC先清零</span><br><span class="line">        Reset = 1;  // 清除保持信号</span><br><span class="line">        forever <span class="comment">#5</span></span><br><span class="line">        begin // 产生时钟信号，周期为50s</span><br><span class="line">             CLK = !CLK;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h5 id="程序代码测试"><a href="#程序代码测试" class="headerlink" title="程序代码测试"></a>程序代码测试</h5><table>
<thead>
<tr>
<th><strong>地址</strong></th>
<th><strong>汇编程序</strong></th>
<th><strong>指令代码</strong></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td><strong>op（6）</strong></td>
<td><strong>rs(5)</strong></td>
<td><strong>rt(5)</strong></td>
<td><strong>rd(5)&#x2F;immediate (16)</strong></td>
</tr>
<tr>
<td><strong>0x00000000</strong></td>
<td>addi $1,$0,8</td>
<td><strong>000001</strong></td>
<td><strong>00000</strong></td>
<td><strong>00001</strong></td>
<td><strong>0000 0000 0000 1000</strong></td>
</tr>
<tr>
<td><strong>0x00000004</strong></td>
<td>ori $2,$0,2</td>
<td>010000</td>
<td><strong>00000</strong></td>
<td><strong>00010</strong></td>
<td><strong>0000 0000 0000 0010</strong></td>
</tr>
<tr>
<td><strong>0x00000008</strong></td>
<td>add $3,$2,$1</td>
<td>000000</td>
<td>00010</td>
<td>00001</td>
<td>0001 1000 0000 0000</td>
</tr>
<tr>
<td><strong>0x0000000C</strong></td>
<td>sub $5,$3,$2</td>
<td>000010</td>
<td>00011</td>
<td>00010</td>
<td>0010 1000 0000 0000</td>
</tr>
<tr>
<td><strong>0x00000010</strong></td>
<td>and $4,$5,$2</td>
<td>010001</td>
<td>00101</td>
<td>00010</td>
<td>0010 0000 0000 0000</td>
</tr>
<tr>
<td><strong>0x00000014</strong></td>
<td>or $8,$4,$2</td>
<td>010010</td>
<td>00100</td>
<td>00010</td>
<td>0100 0000 0000 0000</td>
</tr>
<tr>
<td><strong>0x00000018</strong></td>
<td>sll $8,$8,1</td>
<td>011000</td>
<td>00000</td>
<td>01000</td>
<td>0100 0000 0100 0000</td>
</tr>
<tr>
<td><strong>0x0000001C</strong></td>
<td>bne $8,$1,-2 (≠,转18)</td>
<td>110001</td>
<td>01000</td>
<td>00001</td>
<td>1111 1111 1111 1110</td>
</tr>
<tr>
<td><strong>0x00000020</strong></td>
<td>slti $6,$2,8</td>
<td>011011</td>
<td>00010</td>
<td>00110</td>
<td>0000 0000 0000 1000</td>
</tr>
<tr>
<td><strong>0x00000024</strong></td>
<td>slti $7,$6,0</td>
<td>011011</td>
<td>00110</td>
<td>00111</td>
<td>0000 0000 0000 0000</td>
</tr>
<tr>
<td><strong>0x00000028</strong></td>
<td>addi $7,$7,8</td>
<td>000001</td>
<td>00111</td>
<td>00111</td>
<td>0000 0000 0000 1000</td>
</tr>
<tr>
<td><strong>0x0000002C</strong></td>
<td>beq $7,$1,-2 (&#x3D;,转28)</td>
<td>110000</td>
<td>00111</td>
<td>00001</td>
<td>1111 1111 1111 1110</td>
</tr>
<tr>
<td><strong>0x00000030</strong></td>
<td>sw $2,4($1)</td>
<td>100110</td>
<td>00001</td>
<td>00010</td>
<td>0000 0000 0000 0100</td>
</tr>
<tr>
<td><strong>0x00000034</strong></td>
<td>lw $9,4($1)</td>
<td>100111</td>
<td>00001</td>
<td>01001</td>
<td>0000 0000 0000 0100</td>
</tr>
<tr>
<td><strong>0x00000038</strong></td>
<td><strong>j 0x00000040</strong></td>
<td>111000</td>
<td>00000</td>
<td>00000</td>
<td>0000 0000 0001 0000</td>
</tr>
<tr>
<td><strong>0x0000003C</strong></td>
<td>addi $10,$0,10</td>
<td><strong>000001</strong></td>
<td><strong>00000</strong></td>
<td><strong>01010</strong></td>
<td><strong>0000 0000 0000 1010</strong></td>
</tr>
<tr>
<td><strong>0x00000040</strong></td>
<td><strong>Halt</strong></td>
<td>111111</td>
<td>00000</td>
<td>00000</td>
<td>0000 0000 0000 0000</td>
</tr>
<tr>
<td><strong>0x00000044</strong></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>0x00000048</strong></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>0x0000004C</strong></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><code>使用上面程序段进行测试CPU正确性，将其中的指令写入一个romData.txt文件中。   在模块InsMEM中进行读入（使用的路径为绝对路径）</code><br>(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpdS1ZVC9TaW5nbGVDeWNsZUNQVQ==">源码和实验报告<i class="fa fa-external-link-alt"></i></span>)</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本次实验中遇到的问题比较多。首先是关于CPU的设计，其次就是verilog语言。一开始不知道如何实现，感觉无从下手。主要通过分析实验原理中的图2 单周期CPU数据通路和控制线路图，分析各种指令的处理过程，学会将CPU内各个部分模块化，各个模块分别实现一定的功能，然后通过相对应的控制信号连接起来，这样就实现cpu设计。完成模块的划分以后，按照先前对每个模块功能预设进行完成，但是每个模块的敏感信号的选择还是很重要的，有些模块程序要在时钟信号上升沿触发，而有些模块要在时钟信号的下降沿触发，有些则将电平信号作为敏感信号，每个模块里面的敏感信号的选择都十分的重要，一开始没有太过注意导致出现了很多的问题，后面重新仔细的想指令的处理过程，重新规定了各个模块always@里面的敏感信号。<br>其次就是verilog里面的wire和reg两种变量类型，感觉这是比较大的坑。一开始不了解两者的区别，导致后面一堆报错。现在大致的清楚了二者的区别，wire主要起信号间连接的作用，例如顶层模块中，需要将各个模块连接起来，这时候只能用wire连接，不能使用reg，wire不保存状态，它的值的随时可以改变，不受时钟信号的影响，而reg则是寄存器的抽象表达，可以用于存储数值，例如指令寄存器和寄存器组以及数据寄存器里面的存储器必须为reg类型，用于保留数据。其次wire类型只能通过assign进行赋值，而reg类型只能在always里面被赋值，而涉及到always又有阻塞赋值和非阻塞赋值这个大坑，一开始也不知道怎么弄，就混用了，后面也是出现乱七八糟的问题，后面仔细学习了一下，敏感信号为电平信号的时候，采用阻塞赋值(&#x3D;),而敏感信号为时序信号的时候，采用非阻塞赋值(&lt;&#x3D;)。<br>再者就是烧板的时候的消抖问题。一开始没有进行消抖，然后总是按一下运行了几条指令，后面上网学习了一下如何消抖，顺利的解决了该问题。<br>还有比较疑惑的问题就是使用vivado进行Implemention的时候，有时候进行Running place_design这一部分的时候就一直在此处运行，没有任何进度了，网上也没有合理的解释，然后新新建个项目，将里面的代码复制进去又可以正常的运行了，这个问题目前尚未解决。<br>本次单周期CPU设计实验，将计组理论课上所讲的指令处理过程自己重复并实现了单周期CPU的设计，加深了CPU处理指令过程理解，之前由于计组理论学的不是特别清楚，本次实验加深了印象，也更加了解每条指令的处理过程以及单周期CPU是如何工作的，同时本次实验也更加了解verilog语言，之前学的懵懵懂懂的，最重要的是学会模块化，将一项工作分成多个模块进行完成，先简化成小部分，然后再将其组合起来。</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（一）创建、查看、修改、删除数据库</title>
    <url>/2022/04/18/sql-base1/</url>
    <content><![CDATA[<blockquote>
<p>SQL（Structured Query Language），结构化查询语言</p>
</blockquote>
<h1 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h1><p><code>T-SQL</code> 和 <code>SQL</code> 的区别:</p>
<ul>
<li><code>T-SQL</code> 是 <code>SQL</code> 语言的一种版本，且只能在 <code>SQL SERVER</code> 上使用。是 <code>ANSI SQL</code> 的加强版语言、提供了标准的 <code>SQL</code> 命令。另外，<code>T-SQL</code> 还对 <code>SQL</code> 做了许多补允，提供了类似 <code>C</code>、<code>Basic</code> 和 <code>Pascal</code> 的基本功能，如变量说明、流控制语言、功能函数等</li>
<li><code>SQL</code> 由甲骨文发布，<code>T-SQL</code> 由微软发布</li>
<li><code>SQL</code> 是一种标准，<code>T-SQL</code> 是 <code>SQL</code> 在 <code>SQL SERVER</code> 上的实现</li>
</ul>
<p>主要功能：</p>
<ul>
<li>数据查询 Query</li>
<li>数据定义 Definition</li>
<li>数据操纵 Manipulation</li>
<li>数据控制 Control</li>
</ul>
<p>主要文件：</p>
<ul>
<li>主数据文件 <code>.mdf</code></li>
<li>次数据文件 <code>.ndf</code></li>
<li>事物日志文件 <code>.ldf</code></li>
</ul>
<span id="more"></span>

<h1 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h1><h2 id="使用-Management-Studio"><a href="#使用-Management-Studio" class="headerlink" title="使用 Management Studio"></a>使用 Management Studio</h2><p><img src="https://img-blog.csdnimg.cn/3a9905c4e86c42ef818a811594ac2cf2.png"></p>
<p><img src="https://img-blog.csdnimg.cn/5ac7141d731144d1b904fe39f495b9b5.png"></p>
<h2 id="SQL-语句创建"><a href="#SQL-语句创建" class="headerlink" title="SQL 语句创建"></a>SQL 语句创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_test</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">(</span><br><span class="line">NAME<span class="operator">=</span>test,</span><br><span class="line">FILENAME<span class="operator">=</span><span class="string">&#x27;D:\Data\test.mdf&#x27;</span>, <span class="comment">--路径+文件名(加扩展名)</span></span><br><span class="line">SIZE<span class="operator">=</span><span class="number">5</span>MB,</span><br><span class="line">MAXSIZE<span class="operator">=</span><span class="number">10</span>MB,</span><br><span class="line">FILEGROWTH<span class="operator">=</span><span class="number">5</span><span class="operator">%</span> <span class="comment">--最后一句指令后不加逗号</span></span><br><span class="line">)</span><br><span class="line">LOG <span class="keyword">ON</span></span><br><span class="line">(</span><br><span class="line">NAME<span class="operator">=</span>test_log,</span><br><span class="line">FILENAME<span class="operator">=</span><span class="string">&#x27;D:\Data\test_log.ldf&#x27;</span>,</span><br><span class="line">SIZE<span class="operator">=</span><span class="number">5</span>MB,</span><br><span class="line">MAXSIZE<span class="operator">=</span><span class="number">10</span>MB,</span><br><span class="line">FILEGROWTH<span class="operator">=</span><span class="number">2</span><span class="operator">%</span> <span class="comment">--具体容量或 UNLIMITED 不限制</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE db_test</span><br><span class="line"><span class="keyword">ADD</span> FILE</span><br><span class="line">(</span><br><span class="line">NAME<span class="operator">=</span>test_file, <span class="comment">--在数据库 db_test 中添加次要数据文件                   逻辑名</span></span><br><span class="line">FILENAME<span class="operator">=</span><span class="string">&#x27;D:\Data\test_file.ndf&#x27;</span>, <span class="comment">-- 文件名.ndf 注意文件格式</span></span><br><span class="line">SIZE<span class="operator">=</span><span class="number">100</span>,</span><br><span class="line">MAXSIZE<span class="operator">=</span><span class="number">200</span>,</span><br><span class="line">FILEGROWTH<span class="operator">=</span><span class="number">10</span> <span class="comment">-- 文件自动增量为10MB</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> Sp_helpdb db_test <span class="comment">--查看数据库</span></span><br></pre></td></tr></table></figure>

<h1 id="迁移数据库-分离与附加"><a href="#迁移数据库-分离与附加" class="headerlink" title="迁移数据库 分离与附加"></a>迁移数据库 分离与附加</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> Sp_detach_db db_test <span class="comment">--分离数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXECUTE</span> Sp_attach_db db_test,物理文件名(.mdf文件位置) <span class="comment">--附加数据库</span></span><br></pre></td></tr></table></figure>

<p><em>注：数据库的分离与附加一般发生在数据库在不同机器迁移的情况下使用，当使用 Management Studio 操作时，可能会因<strong>权限</strong>问题导致附加失败，下面演示如何修改*<em>控制权限</em></em></p>
<p>本地找到数据库主文件（.mdf）右键修改属性，勾选<strong>完全控制</strong></p>
<p><img src="https://img-blog.csdnimg.cn/1ab3546a1d364dfcad90b8765aaed89a.png"></p>
<p>打开 Management Studio 选中数据库节点，进入<strong>附加数据库</strong>窗口</p>
<p><img src="https://img-blog.csdnimg.cn/95b3669a8b074109bebe0c387e791250.png"></p>
<p>选择数据库文件位置，添加执行即可</p>
<p><img src="https://img-blog.csdnimg.cn/3c9060d2080b4163bea8e51e88a2640f.png"></p>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db_test</span><br></pre></td></tr></table></figure>

<p>*注：SQL 指令常用大写，减少后台指令转换执行时间，提升速度，影响较小，基本可忽略</p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>实验任务 1</strong><br>要求设计一个数据库，数据库名为 db_HX(要求利用 SQL Server Management<br>Studio 平台，T-SQL 语句两种方式创建数据库)；数据库名为 db_HX;数据库中包含一<br>个数据文件，逻辑文件名为 HX_DATA,物理文件名为 HX_DATA.MDF,文件的初始容量为<br>5MB，最大容量为 15MB，文件容量递增值为 2MB<br>事务日志文件的逻辑文件名为 HX_LOG,物理文件名为 HX_LOG.LDF,初始容量为<br>3MB，最大容量为 10MB，文件容量递增值为 1MB;</p>
<p><strong>实验任务 2</strong><br>利用 SQL Server Management Studio 平台，T-SQL 语句两种方式修改数据库，按<br>要求对数据库进行修改在数据库 db_HX 中添加一个数据文件，逻辑文件名为 HX_DATA1,<br>文件的初始容量为 3MB，最大容量为 15MB，文件容量递增值为 2MB;<br>将事务日志文件的最大容量改为 20MB，文件容量递增值为 2MB;</p>
<p><strong>实验任务 3</strong><br>利用 SQL Server Management Studio 平台，T-SQL 语句两种方式修改数据库，按<br>要求对数据库文件进行删除，将数据库 db_HX 中刚添加的 HX_DATA1 数据库文件删除。</p>
<p><strong>实验任务 4</strong><br>利用 SQL Server Management Studio 平台，T-SQL 语句两种方式，将数据库 db_HX<br>进行分离和附加操作。</p>
<p><strong>实验任务 5</strong><br>使用 T-SQL 语句删除数据库 db_HX</p>
<p><strong>任务拓展</strong><br>创建一个包含多个数据文件和日志文件的数据库 db_MNS，该数据库包含两个初始大小<br>为 15MB 的数据文件和两个 5MB 的日志文件。</p>
<h2 id="Query-sql"><a href="#Query-sql" class="headerlink" title="Query.sql"></a>Query.sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--任务1</span></span><br><span class="line"><span class="keyword">create</span> database db_hx</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>hx_data,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\hx_data.mdf&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">5</span>,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">15</span>,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">2</span></span><br><span class="line">)</span><br><span class="line">log <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>hx_log,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\hx_log.ldf&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">3</span>,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">10</span>,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--任务2</span></span><br><span class="line"><span class="keyword">alter</span> database db_hx</span><br><span class="line"><span class="keyword">add</span> file</span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>hx_data1,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\hx_data1.ndf&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">3</span>,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">15</span>,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">alter</span> database db_hx</span><br><span class="line">modify file</span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>hx_log,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\hx_log.ldf&#x27;</span>,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">20</span>,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--任务3</span></span><br><span class="line"><span class="keyword">alter</span> database db_hx</span><br><span class="line">remove file hx_data1</span><br><span class="line"></span><br><span class="line"><span class="comment">--任务4</span></span><br><span class="line"><span class="keyword">execute</span> sp_detach_db db_hx</span><br><span class="line"><span class="keyword">execute</span> sp_attach_db db_hx,<span class="string">&#x27;D:\Data\hx_data.mdf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--任务5</span></span><br><span class="line"><span class="keyword">drop</span> database db_hx</span><br><span class="line"></span><br><span class="line"><span class="comment">--拓展</span></span><br><span class="line"><span class="keyword">create</span> database db_mns</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">primary</span> <span class="comment">--创建多个数据文件(但仅有一个主数据文件)</span></span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>mns_data1,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\mns_data1.mdf&#x27;</span>, <span class="comment">--主数据文件</span></span><br><span class="line">size<span class="operator">=</span><span class="number">15</span></span><br><span class="line">),</span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>mns_data2,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\mns_data2.ndf&#x27;</span>, <span class="comment">--主文件组,次数据库文件</span></span><br><span class="line">size<span class="operator">=</span><span class="number">15</span></span><br><span class="line">)</span><br><span class="line">log <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>mns_log1,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\mns_log1.ldf&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">5</span></span><br><span class="line">),</span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>mns_log2,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\mns_log2.ldf&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Tips：</p>
<blockquote>
<p>选中代码，点击执行可以执行 <strong>部分指令</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/761a06b51a7e4ba88ed337fe15c205af.png"></p>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（二）数据表的创建、约束、修改、查看、删除</title>
    <url>/2022/04/16/sql-base2/</url>
    <content><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table>
<thead>
<tr>
<th>数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>CHARACTER(n)</td>
<td>字符&#x2F;字符串。固定长度 n。</td>
</tr>
<tr>
<td>VARCHAR(n) 或 CHARACTER VARYING(n)</td>
<td>字符&#x2F;字符串。可变长度。最大长度 n。</td>
</tr>
<tr>
<td>BINARY(n)</td>
<td>二进制串。固定长度 n。</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>存储 TRUE 或 FALSE 值</td>
</tr>
<tr>
<td>VARBINARY(n) 或  BINARY VARYING(n)</td>
<td>二进制串。可变长度。最大长度 n。</td>
</tr>
<tr>
<td>INTEGER(p)</td>
<td>整数值（没有小数点）。精度 p。</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>整数值（没有小数点）。精度 5。</td>
</tr>
<tr>
<td>INTEGER</td>
<td>整数值（没有小数点）。精度 10。</td>
</tr>
<tr>
<td>BIGINT</td>
<td>整数值（没有小数点）。精度 19。</td>
</tr>
<tr>
<td>DECIMAL(p,s)</td>
<td>精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td>
</tr>
<tr>
<td>NUMERIC(p,s)</td>
<td>精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td>
</tr>
<tr>
<td>FLOAT(p)</td>
<td>近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td>
</tr>
<tr>
<td>REAL</td>
<td>近似数值，尾数精度 7。</td>
</tr>
<tr>
<td>FLOAT</td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td>DOUBLE PRECISION</td>
<td>近似数值，尾数精度 16。</td>
</tr>
<tr>
<td>DATE</td>
<td>存储年、月、日的值。</td>
</tr>
<tr>
<td>TIME</td>
<td>存储小时、分、秒的值。</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>存储年、月、日、小时、分、秒的值。</td>
</tr>
<tr>
<td>INTERVAL</td>
<td>由一些整数字段组成，代表一段时间，取决于区间的类型。</td>
</tr>
<tr>
<td>ARRAY</td>
<td>元素的固定长度的有序集合</td>
</tr>
<tr>
<td>MULTISET</td>
<td>元素的可变长度的无序集合</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="数据表示方式"><a href="#数据表示方式" class="headerlink" title="数据表示方式"></a>数据表示方式</h1><p>长度 <code>N</code> 、精度 <code>P</code> 、小数位数 <code>S</code></p>
<p><code>numeric(P,[S])</code> 表示数据精度为 P，小数位数为 S</p>
<p>数据精度：能精确到小数点后的位数，小数点右侧位数</p>
<h1 id="数据表创建"><a href="#数据表创建" class="headerlink" title="数据表创建"></a>数据表创建</h1><h2 id="Management-Studio-建表"><a href="#Management-Studio-建表" class="headerlink" title="Management Studio 建表"></a>Management Studio 建表</h2><blockquote>
<p>建立表格其实就是定义每一列的过程</p>
</blockquote>
<p>数据库表节点，新建</p>
<p><img src="https://img-blog.csdnimg.cn/6a1b08c6e9dc4edfbecc275bc62b0d41.png"></p>
<p>定义列属性，完成建表操作</p>
<p><img src="https://img-blog.csdnimg.cn/4a7e2a38bb3f4f49b5043c7cec39ce15.png"></p>
<h2 id="SQL-指令建表"><a href="#SQL-指令建表" class="headerlink" title="SQL 指令建表"></a>SQL 指令建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL指令建立学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">SNo <span class="type">varchar</span>(<span class="number">6</span>), <span class="comment">-- 非定长字符型</span></span><br><span class="line">SN nvarchar(<span class="number">10</span>), <span class="comment">-- Unicode 字符型(所能容纳字符数)</span></span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">Age <span class="type">int</span>, <span class="comment">-- 定长 4,精度10,小数位数0(本字段可存放10位无小数点整数,4字节大小)  无需设置精度和小数位数</span></span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6cdff6f1e41a4ab49c2cf9b53e6d1bf4.png"></p>
<h1 id="数据表约束"><a href="#数据表约束" class="headerlink" title="数据表约束"></a>数据表约束</h1><p>数据完整性</p>
<blockquote>
<p>保证数据库中数据的正确性、有效性、相容性，完整性机制主要有：</p>
<ul>
<li>约束 Constraint</li>
<li>默认 Default</li>
<li>规则 Rule</li>
<li>触发器 Trigger</li>
<li>存储过程 Stotred Procedure</li>
</ul>
</blockquote>
<h2 id="Constrain"><a href="#Constrain" class="headerlink" title="Constrain"></a>Constrain</h2><h3 id="NULL-x2F-NOT-NULL"><a href="#NULL-x2F-NOT-NULL" class="headerlink" title="NULL &#x2F; NOT NULL"></a>NULL &#x2F; NOT NULL</h3><blockquote>
<p>&#x3D;&#x3D;NULL 值表示“不知道、不确定、没有数据”&#x3D;&#x3D;，仅当某字段值 <code>必须输入</code> 才有效时可设置 <code>NOT NULL</code> （eg：主键），仅用于定义 <code>列约束</code></p>
</blockquote>
<p>定义约束名称后（若不定义，系统将自动创建），若数据录入错误，系统将提示报错信息，无 <code>NOT NULL</code> 约束下，系统缺省值为 <code>NULL</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- NOT NULL 约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> s_cons <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">-- s_cons 定义约束名称</span></span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><blockquote>
<p>唯一约束，定义某一列或多列组合取值 <code>必须唯一</code>，被 UNIQUE 定义的列称为 <code>唯一键</code>，最多只能有一个 NULL 值，列约束、表约束均可</p>
</blockquote>
<h4 id="列约束"><a href="#列约束" class="headerlink" title="列约束"></a>列约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- UNIQUE 列约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> s_uniq <span class="keyword">UNIQUE</span>, <span class="comment">-- s_uniq 定义约束名称(可省略)</span></span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- UNIQUE 表约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s2</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>),</span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">constraint</span> s_unique <span class="keyword">UNIQUE</span>(Sn,Sex) <span class="comment">-- 表约束 语法格式 s_unique 定义约束名称(可省略) Sn+Sex 为唯一键</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h3><blockquote>
<p>主键约束，其值不能重复，不能为 NULL，既可表约束又可列约束</p>
</blockquote>
<p>PRIMARY KEY  UNIQUE 区别：</p>
<ul>
<li>基本表中可定义多个 UNIQUE 约束，但仅可有一个 PRIMARY KEY</li>
<li>UNIQUE 约束的唯一键值可为 NULL ，PRIMARY KEY 约束的一列或多列组合，任意列都不能出现 NULL 值</li>
<li>同一列或同一组列，不能同时定义 PRIMARY KEY 和 UNIQUE</li>
</ul>
<h4 id="列约束-1"><a href="#列约束-1" class="headerlink" title="列约束"></a>列约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- PRIMARY KEY 列约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s3</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> s_prim <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="表约束-1"><a href="#表约束-1" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- PRIMARY KEY 表约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s4</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">constraint</span> s4_prim <span class="keyword">PRIMARY</span> KEY(Sno,Sn)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h3><blockquote>
<p>外键约束，约束某一列或几列作为外部键，包含外键的表称为从表（或参照表），主键所在表称为主表（或被参照表）。既可表约束又可列约束<br>为保证参照完整性，系统保证外键的取值为：</p>
<ol>
<li>空值 </li>
<li>主键取值</li>
</ol>
</blockquote>
<p>换言之，外键存在至少需要两张表，在第一张表中作为主键的属性在第二张表（从表，参照表）中做普通属性，则此键称为第一张表（主表，被参照表）的外键</p>
<h4 id="列约束-2"><a href="#列约束-2" class="headerlink" title="列约束"></a>列约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- FOREIGN KEY 列约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s5</span><br><span class="line">(</span><br><span class="line">Sno <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">constraint</span> s5_foreign <span class="keyword">FOREIGN</span> KEY <span class="keyword">REFERENCES</span> s3(Sno), </span><br><span class="line">Sn <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="表约束-2"><a href="#表约束-2" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- FOREIGN KEY 表约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义数据表 T</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> T</span><br><span class="line">(</span><br><span class="line">TNo <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> T_Prim <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">TN nvarchar(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">Sex <span class="type">nchar</span>(<span class="number">1</span>),</span><br><span class="line">Age <span class="type">int</span>,</span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义数据表 C</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> C</span><br><span class="line">(</span><br><span class="line">CNo <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">constraint</span> C_Prim <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">CN nvarchar(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">CT <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立 TC 表,定义 TNo、CNo 为 TC 外键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> TC</span><br><span class="line">(</span><br><span class="line">TNo <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">constraint</span> T_Fore <span class="keyword">FOREIGN</span> KEY <span class="keyword">REFERENCES</span> T(TNo),</span><br><span class="line">CNo <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">constraint</span> C_Fore <span class="keyword">FOREIGN</span> KEY <span class="keyword">REFERENCES</span> C(CNo),</span><br><span class="line">Score <span class="type">NUMERIC</span>(<span class="number">4</span>,<span class="number">1</span>), <span class="comment">-- 精度为8,小数位数为1</span></span><br><span class="line">Dept nvarchar(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h3><blockquote>
<p>检查约束，限定某字段只能录入允许范围内的值，既可表约束又可列约束</p>
</blockquote>
<p>注意：</p>
<ul>
<li>一个基本表中可定义多个 CHECK</li>
<li>一个字段仅能定义一个 CHECK</li>
<li>多个字段定义的 CHECK 必须为表约束</li>
</ul>
<h4 id="列约束-3"><a href="#列约束-3" class="headerlink" title="列约束"></a>列约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CHECK 列约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> limit</span><br><span class="line">(</span><br><span class="line">sno <span class="type">varchar</span>(<span class="number">6</span>),</span><br><span class="line">cno <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">score <span class="type">numeric</span>(<span class="number">4</span>,<span class="number">1</span>) <span class="keyword">constraint</span> score_check <span class="keyword">CHECK</span>(score <span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">AND</span> score <span class="operator">&lt;=</span><span class="number">100</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="表约束-3"><a href="#表约束-3" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CHECK 列约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> persons</span><br><span class="line">(</span><br><span class="line">P_Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Country <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (P_Id<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> Country<span class="operator">=</span><span class="string">&#x27;China&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="数据表修改"><a href="#数据表修改" class="headerlink" title="数据表修改"></a>数据表修改</h1><h2 id="Management-Studio-修改表"><a href="#Management-Studio-修改表" class="headerlink" title="Management Studio 修改表"></a>Management Studio 修改表</h2><p><img src="https://img-blog.csdnimg.cn/af2636a6d0c143d8b1b0c8b4f12eb033.png"></p>
<p><img src="https://img-blog.csdnimg.cn/45693c7e5d8a450cb63ba2d51c14d075.png"></p>
<h2 id="SQL-指令修改表"><a href="#SQL-指令修改表" class="headerlink" title="SQL 指令修改表"></a>SQL 指令修改表</h2><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><blockquote>
<p>ADD 方式为新加列自动填充 NULL 值，不可指定 NOT NULL</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ADD</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> S</span><br><span class="line"><span class="keyword">ADD</span> <span class="comment">--增加两项</span></span><br><span class="line">Class_No <span class="type">varchar</span>(<span class="number">6</span>),</span><br><span class="line">Address nvarchar(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TC</span><br><span class="line"><span class="keyword">ADD</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> Score_chk <span class="keyword">CHECK</span>(Score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h3><p>注意：</p>
<ul>
<li>列名不可变</li>
<li>含 NULL 值得列不可指定为 NOT NULL</li>
<li>存在于列中的数据不可改变数据类型、减少列宽</li>
<li>仅能修改 NOT NULL 、NULL 约束，其他约束需要通过“删除后重新添加“的方式完成修改</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ALTER</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> S</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span></span><br><span class="line">SN nvarchar(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><blockquote>
<p>仅用于删除完整性约束定义</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DROP</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> s3</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> s_prim</span><br></pre></td></tr></table></figure>

<h1 id="数据表查看"><a href="#数据表查看" class="headerlink" title="数据表查看"></a>数据表查看</h1><p>右键 表 ，属性</p>
<p><img src="https://img-blog.csdnimg.cn/0d2e3dd88d284a20ab573ef2004db74d.png"></p>
<p>查看表信息</p>
<p><img src="https://img-blog.csdnimg.cn/b1b0611e5d834bfa91850f21690c142a.png"></p>
<h1 id="数据表删除"><a href="#数据表删除" class="headerlink" title="数据表删除"></a>数据表删除</h1><h2 id="Management-Studio-删除表"><a href="#Management-Studio-删除表" class="headerlink" title="Management Studio 删除表"></a>Management Studio 删除表</h2><blockquote>
<p>表存在依赖对象时，不可删除</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/3b9cf20021b54bf6b2aa8352a9d157ca.png"></p>
<h2 id="SQL-指令删除表"><a href="#SQL-指令删除表" class="headerlink" title="SQL 指令删除表"></a>SQL 指令删除表</h2><blockquote>
<p>仅可删除匹配用户建立的表，用户权限要对应</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除基本表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> s</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（三）数据表的创建与管理实战演练</title>
    <url>/2022/04/18/sql-base3/</url>
    <content><![CDATA[<blockquote>
<p>结合基础知识，实际操作，巩固提升，加深记忆</p>
</blockquote>
<h1 id="实验报告"><a href="#实验报告" class="headerlink" title="实验报告"></a>实验报告</h1><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol>
<li>阅读数据表 1-表 4，考虑各字段添加约束是否合理</li>
<li>编写 T-SQL 语句，创建表以及约束</li>
<li>查看创建表的信息</li>
<li>通过向表中插入数据验证数据完整性，并回答相应问题</li>
</ol>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/52159216867a4322a96f157f26d7d048.png"></p>
<h3 id="实验任务-1"><a href="#实验任务-1" class="headerlink" title="实验任务 1"></a>实验任务 1</h3><p>利用 T-SQL 完成书籍信息表（tb_BookInfo）的设计与创建</p>
<h3 id="实验任务-2"><a href="#实验任务-2" class="headerlink" title="实验任务 2"></a>实验任务 2</h3><p>按要求完成数据表完整性的设计，要求利用 T-SQL 在书籍信息表（tb_BookInfo）中添加以下约束：</p>
<ol>
<li>在书籍编号字段上添加主键约束</li>
<li>在登记日期字段上添加当前日期</li>
<li>在是否借出字段上默认值为 0</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/1c308cef24204151935e32ef7819338d.png"></p>
<p><img src="https://img-blog.csdnimg.cn/315d18d56cff4aac85c09575b5c7036f.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2eebb8ba77cd4b32a84a683572f681de.png"></p>
<h3 id="实验任务-3"><a href="#实验任务-3" class="headerlink" title="实验任务 3"></a>实验任务 3</h3><p>利用 T-SQL 完成数据表 2、数据表 3 、数据表 4 的设计与创建</p>
<h3 id="实验任务-4"><a href="#实验任务-4" class="headerlink" title="实验任务 4"></a>实验任务 4</h3><p>利用 T-SQL 语句，在借书信息表（tb_LentInfo）表中加入一列 colBZ（备注）,数据类型 varchar，长度 100</p>
<h3 id="实验任务-5"><a href="#实验任务-5" class="headerlink" title="实验任务 5"></a>实验任务 5</h3><p>利用 T-SQL 语句删除 colBZ（备注）列</p>
<h3 id="实验任务-6"><a href="#实验任务-6" class="headerlink" title="实验任务 6"></a>实验任务 6</h3><p>利用 T-SQL 语句删除借书信息表（tb_LentInfo）中应还书日期字段上的检查约束</p>
<h3 id="Query-sql"><a href="#Query-sql" class="headerlink" title="Query.sql"></a>Query.sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库建立</span></span><br><span class="line"><span class="keyword">create</span> database db_book</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">(</span><br><span class="line">name<span class="operator">=</span>db_book,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\db_book.mdf&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_book.dbo.tb_BookInfo</span><br><span class="line">(</span><br><span class="line">SJBH <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">SJMC <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">LBBH <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">CBS <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">ZZ <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">DJRQ datetime, <span class="comment">--日期时间型</span></span><br><span class="line">SFJC bit</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务2</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> db_book.dbo.tb_BookInfo</span><br><span class="line"><span class="keyword">ADD</span></span><br><span class="line"><span class="keyword">primary</span> key(SJBH),</span><br><span class="line"><span class="keyword">default</span> getdate() <span class="keyword">for</span> DJRQ, <span class="comment">-- 返回当前日期</span></span><br><span class="line"><span class="keyword">constraint</span> SFJC_default <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">for</span> SFJC</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据表2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_book.dbo.tb_ReaderInfo(</span><br><span class="line">DZBH <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">primary</span> key,</span><br><span class="line">DZMC <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">BZSJ Datetime <span class="keyword">default</span> getdate(),</span><br><span class="line">LXDH <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据表3</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_book.dbo.tb_BookType(</span><br><span class="line">LBBH <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">LBMC <span class="type">char</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据表4</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_book.dbo.tb_LentInfo(</span><br><span class="line">DZBH <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">foreign</span> key (DZBH) <span class="keyword">references</span> db_book.dbo.tb_ReaderInfo(DZBH),</span><br><span class="line">SJBH <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">foreign</span> key (SJBH) <span class="keyword">references</span> db_book.dbo.tb_BookInfo(SJBH),</span><br><span class="line">JSRQ Datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">YHSRQ Datetime  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">HSRQ Datetime <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">check</span> (YHSRQ<span class="operator">&gt;</span>JSRQ) </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务4</span></span><br><span class="line">use db_book <span class="comment">-- 指明使用哪个数据库</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_LentInfo</span><br><span class="line"><span class="keyword">ADD</span> </span><br><span class="line">colBZ <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务5</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_LentInfo</span><br><span class="line"><span class="keyword">DROP</span></span><br><span class="line"><span class="keyword">column</span> colBZ</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务6</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_LentInfo</span><br><span class="line"><span class="keyword">DROP</span></span><br><span class="line"><span class="keyword">constraint</span> CK__tb_LentInfo__2E1BDC42 <span class="comment">-- 查看系统默认约束名称</span></span><br></pre></td></tr></table></figure>

<p>其中，由于 tb_LentInfo 借书信息表中日期字段的检查（CHECK）约束，我们并未指定约束名称，所以在删除约束时可以通过下述方法查看系统默认约束名称</p>
<p><strong>1.打开对象资源管理器</strong></p>
<p><img src="https://img-blog.csdnimg.cn/77225702123a43b88c62b14e5513141f.png"></p>
<p><strong>2.依次找到对应列约束</strong></p>
<p><img src="https://img-blog.csdnimg.cn/d0be2fe9ffbd4beb900e963c6b866397.png"></p>
<p><strong>3.查看约束名称</strong></p>
<p><img src="https://img-blog.csdnimg.cn/34dd9e85d4504488a056cfd480255de8.png"></p>
<h2 id="拓展提升"><a href="#拓展提升" class="headerlink" title="拓展提升"></a>拓展提升</h2><p>根据以下提供的数据库、表结构、表中记录等信息完成相应的 Transact-SQL 语句。产品销售数据库，数据库名为 db_CPXS。数据库 db_CPXS 包含下列 3 个表：</p>
<ul>
<li>产品表：表名为 tb_CP，描述产品信息；</li>
<li>销售商表：表名为 tb_XSS，描述销售商信息；</li>
<li>产品销售表：表名为 tb_XSCP，描述产品的销售信息；</li>
</ul>
<p>各表的结构分别如表 1-表 3 所示，表中约束自行设计：</p>
<p><img src="https://img-blog.csdnimg.cn/aff69613d35345a8a1467f29fed4577a.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20a1a52ad13a4511ace2671f86996c5f.png"></p>
<p>请设计数据表 1-表 3 的约束，并写出创建数据表的 T-SQL 语句</p>
<h3 id="Query-sql-1"><a href="#Query-sql-1" class="headerlink" title="Query.sql"></a>Query.sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 拓展提升</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据库创建</span></span><br><span class="line"><span class="keyword">create</span> database db_CPXS</span><br><span class="line"><span class="keyword">on</span>(</span><br><span class="line">name<span class="operator">=</span>db_CPXS,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\Data\db_CPXS.mdf&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 产品表</span></span><br><span class="line">use db_CPXS</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_CP(</span><br><span class="line">CPBH <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">primary</span> key, <span class="comment">-- 主键不允许为空,无需重复定义</span></span><br><span class="line">CPMC <span class="type">char</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">JG <span class="type">float</span>(<span class="number">8</span>) <span class="keyword">null</span> <span class="keyword">check</span> (JG<span class="operator">&gt;</span><span class="number">0</span>),</span><br><span class="line">KCL <span class="type">int</span> <span class="keyword">null</span> <span class="keyword">check</span>(KCL<span class="operator">&gt;=</span><span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 销售商表</span></span><br><span class="line">use db_CPXS</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_XSS(</span><br><span class="line">XSBH <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">primary</span> key,</span><br><span class="line">XSMC <span class="type">char</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">DQ <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">FZR <span class="type">char</span>(<span class="number">8</span>),</span><br><span class="line">DH <span class="type">char</span>(<span class="number">12</span>),</span><br><span class="line">BZ text</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 产品销售表</span></span><br><span class="line">use db_CPXS</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_XSCP(</span><br><span class="line">CPBH <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">foreign</span> key(CPBH) <span class="keyword">references</span> tb_CP(CPBH),</span><br><span class="line">XSBH <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">foreign</span> key(XSBH) <span class="keyword">references</span> tb_XSS(XSBH),</span><br><span class="line">XSSJ datetime <span class="keyword">default</span> getdate(),</span><br><span class="line">SL <span class="type">int</span> <span class="keyword">check</span>(SL<span class="operator">&gt;=</span><span class="number">0</span>),</span><br><span class="line">JE <span class="type">float</span> <span class="keyword">check</span>(JE<span class="operator">&gt;</span><span class="number">0</span>),</span><br><span class="line"><span class="keyword">primary</span> key(CPBH,XSBH)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（四）单关系数据查询</title>
    <url>/2022/04/18/sql-base4/</url>
    <content><![CDATA[<h1 id="单关系（表）数据查询结构"><a href="#单关系（表）数据查询结构" class="headerlink" title="单关系（表）数据查询结构"></a>单关系（表）数据查询结构</h1><p>查询结果仍为表，<code>WHERE</code>、<code>SELECT</code> 分别相当于关系代数中的 <code>选取</code>、<code>投影</code> 操作</p>
<p>SQL 指令功能强大，无需规定投影、选取、连接执行顺序</p>
<h1 id="无条件查询"><a href="#无条件查询" class="headerlink" title="无条件查询"></a>无条件查询</h1><blockquote>
<p>仅包含 <code>SELECT……FROM</code> 查询，等价于对关系做 <code>投影</code> 操作</p>
</blockquote>
<span id="more"></span>
<h2 id="1-查询指定信息"><a href="#1-查询指定信息" class="headerlink" title="1.查询指定信息"></a>1.查询指定信息</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE db_student <span class="comment">-- 指定数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sn,birthday <span class="comment">-- 查询信息指定</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student <span class="comment">-- 指定表</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/f1294486acf54a93a6995e0b5b2bbff3.png"></p>
<p>计算成绩表中学生年龄，并用学号、姓名、年龄做表头</p>
<p>方法：当前日期减去生日日期求得年龄，用别名修改生成表表头信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_student20</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">as</span> 学号,sn <span class="keyword">as</span> 姓名,</span><br><span class="line"><span class="keyword">year</span>(getdate())<span class="operator">-</span><span class="keyword">year</span>(birthday) <span class="keyword">as</span> 年龄 <span class="comment">-- 属性起别名</span></span><br><span class="line"><span class="keyword">from</span> tb_student</span><br></pre></td></tr></table></figure>

<h2 id="2-查询全部信息"><a href="#2-查询全部信息" class="headerlink" title="2.查询全部信息"></a>2.查询全部信息</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/427c9b8b0a624930bc979a8e8be748c3.png"></p>
<p>可以看到显示了表中所有学生的所有属性信息</p>
<h2 id="3-查询表单身份信息"><a href="#3-查询表单身份信息" class="headerlink" title="3.查询表单身份信息"></a>3.查询表单身份信息</h2><blockquote>
<p>不使用 WHERE 子句的无条件查询称<strong>投影查询</strong>，SQL中只有使用 <code>DISTINCT</code> 关键字才会消去重复列，关系代数投影运算自动消去 </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> polity</span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/80f548d75cc84d3fa0bc751c211fccf9.png"></p>
<p>可以查看到数据表中所有身份信息，并已删除重复列</p>
<p>查询信息表中，我校开设的所有专业信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> major </span><br><span class="line"><span class="keyword">from</span> tb_student	</span><br></pre></td></tr></table></figure>

<p>如果不加 <code>distinct</code> ，查询结果将会显示所有符合结果（含重复列），不易阅读</p>
<h2 id="4-查询所有学生的学号-x2F-姓名-x2F-身份"><a href="#4-查询所有学生的学号-x2F-姓名-x2F-身份" class="headerlink" title="4.查询所有学生的学号&#x2F;姓名&#x2F;身份"></a>4.查询所有学生的学号&#x2F;姓名&#x2F;身份</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno , sn , polity <span class="comment">-- 逗号分隔不同属性值</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/603ec7cbc9224681ada94c4ea90093b1.png"></p>
<h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><h2 id="1-比较大小（全匹配）"><a href="#1-比较大小（全匹配）" class="headerlink" title="1.比较大小（全匹配）"></a>1.比较大小（全匹配）</h2><p>常用比较运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;、&gt;、&lt; 、&lt;&#x3D; 、&gt;&#x3D; 、!&#x3D; 、<code>&lt;&gt;</code></td>
<td>比较大小</td>
</tr>
<tr>
<td>AND、OR、NOT</td>
<td>复合条件</td>
</tr>
<tr>
<td>BETWEEN AND</td>
<td>确定范围</td>
</tr>
<tr>
<td>IN</td>
<td>确定集合</td>
</tr>
<tr>
<td>LIKE</td>
<td>字符匹配</td>
</tr>
<tr>
<td>IS NULL</td>
<td>空值</td>
</tr>
</tbody></table>
<p>*注：<code>&lt;&gt;</code> 表示（否定，不，反义）</p>
<p>查询所有学生中是党员的学生学号和姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sn</span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> polity<span class="operator">=</span><span class="string">&#x27;党员&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查询成绩表中，学生成绩不及格的学生学号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br></pre></td></tr></table></figure>

<h2 id="2-多重条件查询（全匹配）"><a href="#2-多重条件查询（全匹配）" class="headerlink" title="2.多重条件查询（全匹配）"></a>2.多重条件查询（全匹配）</h2><blockquote>
<p>优先级由高到低：<code>NOT</code>、<code>AND</code>、<code>OR</code> 常用在复合逻辑表达式中</p>
</blockquote>
<p>查询学生信息表中，软件学院男生是党员的学生信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,dept,polity</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> (sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> dept<span class="operator">=</span><span class="string">&#x27;软件学院&#x27;</span>) <span class="keyword">AND</span> (polity<span class="operator">=</span><span class="string">&#x27;党员&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="3-确定范围（全匹配）"><a href="#3-确定范围（全匹配）" class="headerlink" title="3.确定范围（全匹配）"></a>3.确定范围（全匹配）</h2><p>查询成绩表中，成绩段<code>在</code> 70~90 之间的学生学号和学分信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,xf</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> score<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">AND</span> score<span class="operator">&lt;=</span><span class="number">90</span>  <span class="comment">--SQL Server 中等价于 where score BETWEEN 70 AND 90</span></span><br></pre></td></tr></table></figure>

<p>*注：某些 DBMS 中 BETWEEN AND 不包含边界值等号</p>
<p>查询成绩表中，成绩段<code>不在</code> 70~90 之间的学生学号和学分信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,xf</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> score <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">90</span> <span class="comment">-- NOT 否定</span></span><br></pre></td></tr></table></figure>

<h2 id="4-确定集合（全匹配）"><a href="#4-确定集合（全匹配）" class="headerlink" title="4.确定集合（全匹配）"></a>4.确定集合（全匹配）</h2><p>查询成绩表中，<code>选修</code> c03、c17 课号学生的学分和学号信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cno,sno,xf</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">IN</span>(<span class="string">&#x27;c03&#x27;</span>,<span class="string">&#x27;c17&#x27;</span>) <span class="comment">-- 等价 where cno=&#x27;03&#x27; OR cno=&#x27;17&#x27;</span></span><br></pre></td></tr></table></figure>
<p>查询成绩表中，<code>未选修</code> c03、c17 课号学生的学分和学号信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cno,sno,xf</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="string">&#x27;c03&#x27;</span>,<span class="string">&#x27;c17&#x27;</span>) <span class="comment">-- 等价 where cno &lt;&gt; &#x27;03&#x27; AND cno &lt;&gt; &#x27;17&#x27;</span></span><br></pre></td></tr></table></figure>
<p>*注：重点注意 <code>&lt;&gt;</code> 符号</p>
<h2 id="5-模糊查询（部分匹配）"><a href="#5-模糊查询（部分匹配）" class="headerlink" title="5.模糊查询（部分匹配）"></a>5.模糊查询（部分匹配）</h2><p>当我们在不能清楚的知道所查询数据的精确值时，可以使用模糊查询的方式检索数据，利用如下通配符以实现模糊搜索</p>
<p>字符中可加<strong>通配符</strong></p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>功能</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>%</code></td>
<td>代表0或多个字符</td>
<td>‘%ab’ 后可接任意字符串</td>
</tr>
<tr>
<td><code>_</code></td>
<td>代表一个字符</td>
<td>‘a_b’ 间有一个字符</td>
</tr>
<tr>
<td><code>[ ]</code></td>
<td>表示在某范围的字符</td>
<td>[0~10] 范围字符，仅匹配一个字符</td>
</tr>
<tr>
<td><code> [^ ]</code></td>
<td>表示不在某范围的字符</td>
<td>不在 [0~10] 范围内字符</td>
</tr>
</tbody></table>
<p>查询所有姓王的学生姓名和学院信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sn，dept</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sn <span class="keyword">LIKE</span> <span class="string">&#x27;王%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查询所有学生信息中，姓名第二个字是明的学生姓名和学院信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sn,dept</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sn <span class="keyword">LIKE</span> <span class="string">&#x27;_明%&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-空值查询"><a href="#6-空值查询" class="headerlink" title="6.空值查询"></a>6.空值查询</h2><p>&#x3D;&#x3D;NULL 值表示“不知道、不确定、没有数据”&#x3D;&#x3D;，和 0 值要注意区分</p>
<p>查询没有考试成绩（未参加考试，不是考试成绩为 0 分）的学生学号及课程号信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> score <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="comment">-- 比较运算符 IS NULL</span></span><br></pre></td></tr></table></figure>

<h1 id="统计汇总查询"><a href="#统计汇总查询" class="headerlink" title="统计汇总查询"></a>统计汇总查询</h1><p>常用库函数（聚合函数）：</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>AVG</td>
<td>按列求平均值</td>
</tr>
<tr>
<td>SUM</td>
<td>按列求和</td>
</tr>
<tr>
<td>MAX</td>
<td>求列最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>求列最小值</td>
</tr>
<tr>
<td>COUNT</td>
<td>按列求个数</td>
</tr>
</tbody></table>
<ul>
<li><code>count(*)</code>  对表中数目进行计数，无论是否为空</li>
<li><code>count(colum)</code> 对特定列中具有的值计数，忽略 <code>NULL</code></li>
</ul>
<p>查询学号为 XXX 的学生总成绩和平均成绩</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> totalscore,<span class="built_in">AVG</span>(score) <span class="keyword">AS</span> avgscore</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> (sno<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>*注：如果 AS 后不写别名，查询后的表没有表头（无列名）</p>
<p>查询软件学院学生总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> dept<span class="operator">=</span><span class="string">&#x27;软件学院&#x27;</span></span><br></pre></td></tr></table></figure>
<p>*注：<code>COUNT(*)</code> 统计元组个数，不消除重复行，不可用 <code>DISTINCT</code> 关键字</p>
<h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><blockquote>
<p><code>select</code> 中既有基本字段又有聚合函数时需要 <code>group by</code>，否则将会出现语法错误<br>空值作为单独分组返回值</p>
</blockquote>
<p>查询选修两门课以上课程的学生学号和选课总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> sc_num</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line"><span class="keyword">having</span> (<span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>) <span class="comment">-- 必须是选修课程数大于等于二的</span></span><br></pre></td></tr></table></figure>

<p>查询成绩表中成绩不及格的学生信息，并给出每门课程需要重修的人数（人数大于 5 ）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cno <span class="keyword">as</span> 课程号,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> 补考人数</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno <span class="comment">--分组之后继续筛信息 加 having </span></span><br><span class="line"><span class="keyword">having</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">5</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cno <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<p>*注：各子句顺序 <code>WHERE</code> 、<code>GROUP BY</code>、<code>HAVING</code></p>
<h1 id="排序查询结果"><a href="#排序查询结果" class="headerlink" title="排序查询结果"></a>排序查询结果</h1><blockquote>
<p><code>ORDER BY</code> 查询排序结果，位置必须在其他子句后，指定缺省默认为 <code>升序 ASC</code> [DESC 降序 &#x2F; ASC 升序]</p>
</blockquote>
<ul>
<li>降序 descending order</li>
<li>升序 ascending order</li>
</ul>
<p>&#x3D;&#x3D;<code>NULL</code> 在排序时认为是最小值&#x3D;&#x3D;</p>
<p>查询成绩表中，选修 c10 课程的学生学号，并按成绩降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,score</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> (cno<span class="operator">=</span><span class="string">&#x27;c10&#x27;</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/67f7ecd2c22448eb842e59bc358ac385.png"></p>
<p>成绩表中，查询选修 c10，c03，c09 或 c20 课程的学号和成绩，结果按学号升序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno,score</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">IN</span>(<span class="string">&#x27;c10&#x27;</span>,<span class="string">&#x27;c03&#x27;</span>,<span class="string">&#x27;c09&#x27;</span>,<span class="string">&#x27;c20&#x27;</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sno <span class="comment">-- 指定缺省默认为升序 ASC</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（五）数据查询实战演练一</title>
    <url>/2022/04/18/sql-base5/</url>
    <content><![CDATA[<blockquote>
<p>根据数据库 <code>db_Book</code> 中的 <code>tb_BookInfo</code> 表、<code>tb_ReaderInfo</code> 表、<code>tb_BookType</code> 表、<code>tb_LentInfo</code> 表，完成下列查询操作</p>
</blockquote>
<span id="more"></span>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><p><img src="https://img-blog.csdnimg.cn/15057129b7a54f81ab93c7c1cd196585.png"></p>
<p><img src="https://img-blog.csdnimg.cn/656df9752e8144b9a6679013ecbd6e86.png"></p>
<p><img src="https://img-blog.csdnimg.cn/5b43fbea7bb04f7f89d6154b9fb0b418.png"></p>
<p><img src="https://img-blog.csdnimg.cn/a20fdb5e634440229db22a7c243cd598.png"></p>
<h1 id="任务题解"><a href="#任务题解" class="headerlink" title="任务题解"></a>任务题解</h1><h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表）中的所有书籍的书籍编号、书籍名称、是否借出字段的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> sjbh,sjmc,sfjc </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo</span><br></pre></td></tr></table></figure>

<h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><blockquote>
<p>查询 tb_ReaderInfo（读者信息表）中所有读者的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_ReaderInfo</span><br></pre></td></tr></table></figure>

<h2 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h2><blockquote>
<p>使用别名定义的三种方法(括号内为别名)查询每个读者的 DZBH (编号)、DZXM(姓名)和 LXDH (联系电话)。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> dzbh <span class="keyword">as</span> 编号,dzxm 姓名,联系电话<span class="operator">=</span>lxdh <span class="comment">-- 别名定义三种方法 as 别名 =</span></span><br><span class="line"><span class="keyword">from</span> tb_ReaderInfo</span><br></pre></td></tr></table></figure>

<h2 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表）中前 5 条记录的书籍编号、书籍名称。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> top <span class="number">5</span> sjbh,sjmc <span class="comment">-- 前五条 top 5</span></span><br><span class="line"><span class="keyword">from</span> tb_bookinfo</span><br></pre></td></tr></table></figure>

<h2 id="任务五"><a href="#任务五" class="headerlink" title="任务五"></a>任务五</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表）表中已借出的书籍信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">where</span> sfjc<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="comment">-- 1 已借出 0 未借出</span></span><br></pre></td></tr></table></figure>

<h2 id="任务六"><a href="#任务六" class="headerlink" title="任务六"></a>任务六</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表）中 2017 年 4 月份登记的图书名称和登记日期。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> sjmc,djrq  <span class="comment">-- 且 关系 ,使用 and 连接</span></span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">YEAR</span>(djrq)<span class="operator">=</span><span class="number">2017</span> <span class="keyword">and</span> <span class="keyword">MONTH</span>(djrq)<span class="operator">=</span><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="任务七"><a href="#任务七" class="headerlink" title="任务七"></a>任务七</h2><blockquote>
<p>查询 b_BookInfo（书籍信息表）中人民邮电出版社书籍的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">where</span> cbs<span class="operator">=</span><span class="string">&#x27;人民邮电出版社&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务八"><a href="#任务八" class="headerlink" title="任务八"></a>任务八</h2><blockquote>
<p>查询 b_BookInfo（书籍信息表）中 2017 年 4 月 1 日前登记的书籍信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">where</span> djrq <span class="operator">&lt;</span> <span class="string">&#x27;2017-4-1&#x27;</span> <span class="comment">-- 对应日期&quot;前&quot;,即&quot;小于 &lt;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务九"><a href="#任务九" class="headerlink" title="任务九"></a>任务九</h2><blockquote>
<p>查询名为《数据库原理与应用》的书籍的基本信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">where</span> sjmc<span class="operator">=</span><span class="string">&#x27;数据库原理与应用&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十"><a href="#任务十" class="headerlink" title="任务十"></a>任务十</h2><blockquote>
<p>查询 tb_BookType（书籍类别表）中书籍类别为文学类的书籍信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_BookType </span><br><span class="line"><span class="keyword">where</span> LBMC<span class="operator">=</span><span class="string">&#x27;文学&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十一"><a href="#任务十一" class="headerlink" title="任务十一"></a>任务十一</h2><blockquote>
<p>查询在 2017-3-1 到 2017 年 4-1 之间借出的书籍编号、读者编号。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> sjbh,dzbh <span class="comment">-- 查询书籍编号,读者编号 </span></span><br><span class="line"><span class="keyword">from</span> tb_LentInfo </span><br><span class="line"><span class="keyword">where</span> JSRQ <span class="keyword">between</span> <span class="string">&#x27;2017-3-1&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2017-4-1&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十二"><a href="#任务十二" class="headerlink" title="任务十二"></a>任务十二</h2><blockquote>
<p>查询人民邮电大学出版社、上海交通大学出版社的书籍信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">where</span> cbs<span class="operator">=</span><span class="string">&#x27;人民邮电大学出版社&#x27;</span> <span class="keyword">or</span> cbs<span class="operator">=</span><span class="string">&#x27;上海交通大学出版社&#x27;</span> </span><br><span class="line"><span class="comment">-- 虽然是查询两个出版社信息,但是两者间的关系是 or (没有同时是两个出版社的cbs,会报错,不要用 and)</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十三"><a href="#任务十三" class="headerlink" title="任务十三"></a>任务十三</h2><blockquote>
<p>查询不是清华大学出版社、大连理工大学出版社出版的书籍信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">where</span> cbs <span class="operator">&lt;&gt;</span> <span class="string">&#x27;清华大学出版社&#x27;</span> <span class="keyword">or</span> cbs <span class="operator">&lt;&gt;</span> <span class="string">&#x27;大连理工大学出版社&#x27;</span> <span class="comment">-- &lt;&gt; 表示（否定，不，反义）</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十四"><a href="#任务十四" class="headerlink" title="任务十四"></a>任务十四</h2><blockquote>
<p>查询出版社是清华大学出版社并已借出的图书信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">where</span> cbs<span class="operator">=</span><span class="string">&#x27;清华大学出版社&#x27;</span> <span class="keyword">and</span> sfjc<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十五"><a href="#任务十五" class="headerlink" title="任务十五"></a>任务十五</h2><blockquote>
<p>查询 tb_ReaderInfo（读者信息表）表中姓“田”的读者。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_Book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_ReaderInfo </span><br><span class="line"><span class="keyword">where</span> DZXM <span class="keyword">like</span> <span class="string">&#x27;田%&#x27;</span> </span><br><span class="line"><span class="comment">-- 模糊查询,只知道姓氏,不清楚名字有几个字,所以用符号 % (任意个字符) ,而不是 _ (仅一个字符)</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十六"><a href="#任务十六" class="headerlink" title="任务十六"></a>任务十六</h2><blockquote>
<p>在 tb_ReaderInfo（读者信息表）中找到所有姓名中姓李并且带飞字的读者。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_ReaderInfo </span><br><span class="line"><span class="keyword">where</span> DZXM <span class="keyword">like</span> <span class="string">&#x27;李%飞%&#x27;</span></span><br><span class="line"><span class="comment">-- 模糊查询,姓李,带飞字. 飞 字前后字符个数未知,使用 % </span></span><br></pre></td></tr></table></figure>

<h2 id="任务十七"><a href="#任务十七" class="headerlink" title="任务十七"></a>任务十七</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表）, 按书籍名称升序显示书籍编号，书籍名称，是否借出字段。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> SJBH,SJMC,SFJC </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> SJMC <span class="keyword">asc</span> </span><br></pre></td></tr></table></figure>

<h2 id="任务十八"><a href="#任务十八" class="headerlink" title="任务十八"></a>任务十八</h2><blockquote>
<p>查询书籍信息表，按书籍名称降序排序，书名相同按登记日期先后顺序排列。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> SJMC <span class="keyword">desc</span>,DJRQ <span class="keyword">asc</span></span><br><span class="line"><span class="comment">-- 书名相同按登记日期先后顺序排列(也就是添加第二个条件,先后顺序,也几 asc 升序排列)</span></span><br></pre></td></tr></table></figure>

<h2 id="任务十九"><a href="#任务十九" class="headerlink" title="任务十九"></a>任务十九</h2><blockquote>
<p>返回 tb_BookInfo（书籍信息表）中的出版社信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> cbs </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo</span><br></pre></td></tr></table></figure>

<h2 id="任务二十"><a href="#任务二十" class="headerlink" title="任务二十"></a>任务二十</h2><blockquote>
<p>按读者姓名降序显示 tb_ReaderInfo（读者信息表）中的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_ReaderInfo </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> DZXM <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<h2 id="任务二十一"><a href="#任务二十一" class="headerlink" title="任务二十一"></a>任务二十一</h2><blockquote>
<p>查询 tb_BookInfo（书籍信息表），按书籍类别统计各类书籍的数量。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> LBBH 类别编号,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 书籍总数 </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> LBBH <span class="comment">-- 按照类别编号分组</span></span><br></pre></td></tr></table></figure>

<h2 id="任务二十二"><a href="#任务二十二" class="headerlink" title="任务二十二"></a>任务二十二</h2><blockquote>
<p>统计 tb_BookInfo（书籍信息表）中的书籍数量。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(sjbh) <span class="keyword">as</span> 书籍数量 </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="comment">-- 使用count(sjbh) [不包含 null] 如果使用 count(*) 会包含 NULL 数值,包含无效信息</span></span><br></pre></td></tr></table></figure>

<h2 id="任务二十三"><a href="#任务二十三" class="headerlink" title="任务二十三"></a>任务二十三</h2><blockquote>
<p>按书籍名称统计各种书籍的数量，并按书籍名称升序排序。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> sjmc,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 数量 </span><br><span class="line"><span class="keyword">from</span> tb_BookInfo </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sjmc </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sjmc <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<h2 id="任务二十四"><a href="#任务二十四" class="headerlink" title="任务二十四"></a>任务二十四</h2><blockquote>
<p>按出版社统计各个出版社的书籍数量，并显示数量超过 100 本的出版社名称。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> cbs,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 书籍数量 </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cbs</span><br><span class="line"></span><br><span class="line"><span class="keyword">having</span> (<span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="string">&#x27;100&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="任务二十五"><a href="#任务二十五" class="headerlink" title="任务二十五"></a>任务二十五</h2><blockquote>
<p>统计人民邮电出版社书籍的数量。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> cbs 出版社,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 书籍总数 </span><br><span class="line"><span class="keyword">from</span> tb_bookinfo </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cbs </span><br><span class="line"><span class="keyword">having</span> cbs<span class="operator">=</span><span class="string">&#x27;人民邮电出版社&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务二十六"><a href="#任务二十六" class="headerlink" title="任务二十六"></a>任务二十六</h2><blockquote>
<p>统计 2017 年 4 月份借出书籍的数量，并按数量降序排列。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_book</span><br><span class="line"><span class="keyword">select</span> sjbh 书籍编号,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 借出数量 </span><br><span class="line"><span class="keyword">from</span> tb_lentinfo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sjbh </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<p>重视基础练习，每日进步亿点点</p>
<p><img src="https://img-blog.csdnimg.cn/359860f84348471a97516310721ff34d.png"></p>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（六）多关系连接查询</title>
    <url>/2022/04/22/sql-base6/</url>
    <content><![CDATA[<h1 id="多关系表连接查询"><a href="#多关系表连接查询" class="headerlink" title="多关系表连接查询"></a>多关系表连接查询</h1><blockquote>
<p>连接查询：一个查询需要对多张表操作，查询结果称<strong>表之间的连接</strong>；连接关系通过字段值体现，称为<strong>连接字段</strong></p>
</blockquote>
<p>当我们查询的数据、字段值分布在不同的表中时，这种情况下需要使用<strong>多关系表的连接查询</strong></p>
<p>连接类型：内连接（INNER JOIN）、外连接（OUTER JOIN）、交叉连接（）、自然连接（）</p>
<p><strong>连接谓词</strong>：连接两个表的条件</p>
<span id="more"></span>
<h2 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h2><blockquote>
<p>关键字（INNER JOIN），功能：仅返回连接条件为真的行，有 <code>from</code> 和 <code>where</code> 字句两种方式</p>
</blockquote>
<p>这里要注意，两张表连接时，同名属性需要使用<strong>前缀</strong>区分（列名唯一不需要）</p>
<p>实现内连接的三种方式举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- method1</span></span><br><span class="line"><span class="keyword">select</span> t.tno,tn,cno</span><br><span class="line"><span class="keyword">from</span> t,tc</span><br><span class="line"><span class="keyword">where</span> (t.tno<span class="operator">=</span>tc.tno) <span class="keyword">and</span> (tn<span class="operator">=</span><span class="string">&#x27;XX&#x27;</span>) <span class="comment">-- 连接条件、查询条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2</span></span><br><span class="line"><span class="keyword">select</span> t.tno,tn,cno <span class="comment">-- 前缀指名tno为t表属性</span></span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">inner</span> <span class="keyword">join</span> tc <span class="comment">-- inner join 内连接关键字</span></span><br><span class="line"><span class="keyword">on</span> t.tno<span class="operator">=</span>tc.tno <span class="comment">-- 连接条件</span></span><br><span class="line"><span class="keyword">where</span> (tn<span class="operator">=</span><span class="string">&#x27;XX&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- method3</span></span><br><span class="line"><span class="keyword">select</span> r1.tno,r2.tn,r1.cno <span class="comment">-- 授课关系 教师号、教室关系 姓名、授课关系 课程号</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> tno,cno <span class="keyword">from</span> tc) <span class="keyword">as</span> r1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> tno,tn <span class="keyword">from</span> t <span class="keyword">where</span> tn<span class="operator">=</span><span class="string">&#x27;XX&#x27;</span>) <span class="keyword">as</span> r2</span><br><span class="line"><span class="keyword">on</span> r1.tno<span class="operator">=</span>r2.tno</span><br></pre></td></tr></table></figure>

<p>以上方法中，method1 比较简单且常用 ，建议重点掌握</p>
<h3 id="两张表连接"><a href="#两张表连接" class="headerlink" title="两张表连接"></a>两张表连接</h3><p>查询每位学生及选修课程信息</p>
<p><strong>1.from 子句实现</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_student <span class="keyword">inner</span> <span class="keyword">join</span> tb_score <span class="comment">-- from 表1名称 连接类型(内连接 inner join) 表2名称</span></span><br><span class="line"><span class="keyword">on</span> tb_student.sno<span class="operator">=</span>tb_score.sno <span class="comment">-- 同名属性需要加表名称(否则会出错,系统无法识别)</span></span><br></pre></td></tr></table></figure>

<p>以上代码可简化为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_student sc <span class="keyword">inner</span> <span class="keyword">join</span> tb_score s <span class="comment">-- 给表起别名，简化代码量</span></span><br><span class="line"><span class="keyword">on</span> sc.sno<span class="operator">=</span>s.sno</span><br></pre></td></tr></table></figure>

<p>执行结果中发现存在相同列(学号)，说明为等值连接，未删去重复列</p>
<p><img src="https://img-blog.csdnimg.cn/dd0865c75e69409e8024659b12b2d427.png"></p>
<p><strong>2.where 子句实现</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_student s,tb_score sc</span><br><span class="line"><span class="keyword">where</span> s.sno<span class="operator">=</span>sc.sno</span><br></pre></td></tr></table></figure>

<p>查询每名同学成绩,包含学号,课程编号,成绩,课程名称信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sc.cno,cn,score</span><br><span class="line"><span class="keyword">from</span> tb_score sc, tb_course c</span><br><span class="line"><span class="keyword">where</span> sc.cno<span class="operator">=</span>c.cno</span><br></pre></td></tr></table></figure>

<h3 id="多张表连接"><a href="#多张表连接" class="headerlink" title="多张表连接"></a>多张表连接</h3><p><strong>1.from 子句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sno,sn,cn,score</span><br><span class="line"><span class="keyword">from</span> tb_student s <span class="keyword">join</span> tb_score sc</span><br><span class="line"><span class="keyword">on</span> (s.sno<span class="operator">=</span>sc.sno) <span class="keyword">join</span> tb_course c</span><br><span class="line"><span class="keyword">on</span> (sc.cno<span class="operator">=</span>c.cno)</span><br></pre></td></tr></table></figure>

<p><strong>2.where 子句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sno,sn,cn,score</span><br><span class="line"><span class="keyword">from</span> tb_student s,tb_score sc,tb_course c</span><br><span class="line"><span class="keyword">where</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">and</span> sc.sno<span class="operator">=</span>c.cno</span><br></pre></td></tr></table></figure>

<h2 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h2><p>外连接中，符合连接条件的数据返回到结果集，不符合连接条件的列会被系统用 <code>NULL</code> 填充，再返回结果集</p>
<p>*注：<code>bit</code> 类型无 <code>NULL</code> 值，会填充 0 后返回结果集中</p>
<p>使用主表所在的方向位置判断连接类型，例如：主表在左，即为左外连接</p>
<p>复习下关系运算中，连接的相关知识</p>
<p><img src="https://img-blog.csdnimg.cn/71a9ee64bd9c48d981a4fcf8a1cebc74.png"></p>
<p>那么上图两张表分别进行外、左外、右外连接后的结果为</p>
<p><img src="https://img-blog.csdnimg.cn/5cd32bde6b54410cacb50f84c7033851.png"></p>
<p>举例：查询所有学生选课情况,包括未选课学生信息</p>
<h3 id="左外连接-left-join"><a href="#左外连接-left-join" class="headerlink" title="左外连接 left join"></a>左外连接 left join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student s <span class="keyword">left</span> <span class="keyword">join</span> tb_score sc</span><br><span class="line"><span class="keyword">on</span> (s.sno<span class="operator">=</span>sc.sno)</span><br></pre></td></tr></table></figure>

<h3 id="右外连接-right-join"><a href="#右外连接-right-join" class="headerlink" title="右外连接 right join"></a>右外连接 right join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_score sc <span class="keyword">right</span> <span class="keyword">join</span> tb_student s</span><br><span class="line"><span class="keyword">on</span> (sc.sno<span class="operator">=</span>s.sno)</span><br></pre></td></tr></table></figure>

<h3 id="完全外连接-full-join"><a href="#完全外连接-full-join" class="headerlink" title="完全外连接 full join"></a>完全外连接 full join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- full join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student s <span class="keyword">full</span> <span class="keyword">join</span> tb_score sc</span><br><span class="line"><span class="keyword">on</span> (s.sno<span class="operator">=</span>sc.sno)</span><br></pre></td></tr></table></figure>

<h2 id="交叉连接查询"><a href="#交叉连接查询" class="headerlink" title="交叉连接查询"></a>交叉连接查询</h2><blockquote>
<p>又称 “笛卡尔乘积” 连接，实际应用中很少使用</p>
</blockquote>
<p>考虑到计算机性能，执行效率也不大相同 </p>
<p>这里主要知道关键字为 CROSS JOIN，结果集行数为两张表行数乘积，列数为两表列数总和，然后参考下下方示例即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 对学生表和成绩表进行 交叉查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_student <span class="keyword">cross</span> <span class="keyword">join</span> tb_score</span><br></pre></td></tr></table></figure>

<h2 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h2><blockquote>
<p>如果我们要查询的结果集中，所包含的信息均在同一张信息表中，这样的查询方式称为<strong>自连接查询</strong></p>
</blockquote>
<p>示例：查询工资表中，所有比 XXX 工资高的同事姓名、工资和 XXX 的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- method1 </span></span><br><span class="line"><span class="keyword">select</span> x.tn,x.sal <span class="keyword">as</span> sal_a,y.sal <span class="keyword">as</span> sal_b</span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">as</span> x,t <span class="keyword">as</span> y <span class="comment">-- self connect</span></span><br><span class="line"><span class="keyword">where</span> x.sal <span class="operator">&gt;</span> y.sal <span class="keyword">and</span> y.tn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2 inner join1</span></span><br><span class="line"><span class="keyword">select</span> x.tn.x.sal,y.sal</span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">as</span> x,t <span class="keyword">as</span> y</span><br><span class="line"><span class="keyword">where</span> (x.sal<span class="operator">&gt;</span>y.sal) <span class="keyword">and</span> y.tn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="comment">-- where ... and</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method3 inner join2</span></span><br><span class="line"><span class="keyword">select</span> x.tn,x.sal,y.sal</span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">as</span> x <span class="keyword">inner</span> <span class="keyword">join</span> t <span class="keyword">as</span> y</span><br><span class="line"><span class="keyword">on</span> x.sal <span class="operator">&gt;</span> y.sal <span class="keyword">and</span> y.tn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="comment">-- inner join ... on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method4 inner join3</span></span><br><span class="line"><span class="keyword">select</span> r1.tn,r1.sal,r2.sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> tn,sal <span class="keyword">from</span> t) <span class="keyword">as</span> r1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> tn,sal <span class="keyword">from</span> t <span class="keyword">where</span> tn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>) <span class="keyword">as</span> r2</span><br><span class="line"><span class="keyword">on</span> r1.sal <span class="operator">&gt;</span> r2.sal <span class="comment">-- inner join ... on</span></span><br></pre></td></tr></table></figure>

<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>又称嵌套查询，形式是在 WHERE 中再次包含 SELECT - FROM - WHERE 的查询</p>
<p>程序<strong>从内向外</strong>执行 SQL 语句，外部查询称为<strong>父查询</strong>，父查询需要接收子查询（嵌套查询）的结果</p>
<h2 id="普通子查询"><a href="#普通子查询" class="headerlink" title="普通子查询"></a>普通子查询</h2><p>普通子查询仅<strong>执行一次</strong></p>
<h3 id="返回一个值"><a href="#返回一个值" class="headerlink" title="返回一个值"></a>返回一个值</h3><p>该例子解释<strong>父级查询需要子查询结果</strong>的概念</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tno,tn</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> prof<span class="operator">=</span>(<span class="keyword">select</span> prof</span><br><span class="line">			<span class="keyword">from</span> t</span><br><span class="line">			<span class="keyword">where</span> tn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>示例中，<code>prof</code> 的值由子查询查出结果后返回给父查询做结果，上述语句等价为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tno,tn</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> prof<span class="operator">=</span>‘子查询 prof 值’</span><br></pre></td></tr></table></figure>

<h3 id="返回一组值"><a href="#返回一组值" class="headerlink" title="返回一组值"></a>返回一组值</h3><p>比较运算符仅适用于查询所需返回值为单个值得情况，当返回结果为集合时不再使用，可使用如下方式</p>
<h4 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h4><p>ANY：任何一个</p>
<p>示例：查询讲授课程号为 c5 的教师姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tn <span class="comment">-- 姓名</span></span><br><span class="line"><span class="keyword">from</span> t </span><br><span class="line"><span class="keyword">where</span> (tno <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">select</span> tno <span class="comment">-- 教师号</span></span><br><span class="line">				  <span class="keyword">from</span> tc</span><br><span class="line">				  <span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c5&#x27;</span>)) <span class="comment">-- 课程号</span></span><br></pre></td></tr></table></figure>

<p>首先执行子查询，找到讲授 c5 课程的教师号，父级查询根据教师号再查询教师姓名</p>
<p>意思是，<code>tno</code> 是子查询结果集中的任（ANY）一个</p>
<h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>和 ANY 一样的例子，我们也可以使用 IN 实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tn <span class="comment">-- 姓名</span></span><br><span class="line"><span class="keyword">from</span> t </span><br><span class="line"><span class="keyword">where</span> (tno <span class="keyword">IN</span> (<span class="keyword">select</span> tno <span class="comment">-- 教师号</span></span><br><span class="line">				  <span class="keyword">from</span> tc</span><br><span class="line">				  <span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c5&#x27;</span>)) <span class="comment">-- 课程号</span></span><br></pre></td></tr></table></figure>

<p>这里的意思是，<code>tno</code> 在（IN）子查询结果集中</p>
<h4 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h4><p>ALL：全部</p>
<p>示例：查询其他系中比计算机系所有教师工资都高的教师姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用 ALL</span></span><br><span class="line"><span class="keyword">select</span> tn,sal <span class="comment">-- 姓名、工资</span></span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> (sal <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">select</span> sal</span><br><span class="line">			      <span class="keyword">from</span> t</span><br><span class="line">			      <span class="keyword">where</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span>))</span><br><span class="line">	  <span class="keyword">and</span> (dept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;计算机&#x27;</span>) <span class="comment">-- 父级条件限制 “其他系” 也即为：不属于 ”计算机系”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用聚合函数 MAX()</span></span><br><span class="line"><span class="keyword">select</span> tn,sal </span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> (sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">MAX</span>(sal)</span><br><span class="line">			  <span class="keyword">from</span> t</span><br><span class="line">			  <span class="keyword">where</span> dept<span class="operator">=</span><span class="string">&#x27;计算机&#x27;</span>))</span><br><span class="line">	  <span class="keyword">and</span> (dept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;计算机&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><p>由上面的内容我们知道，子查询程序执行顺序是<strong>由内到外</strong>，也就是说父级需要子级的消息返回</p>
<p>但是，我们同样会遇到子查询需要父查询相关信息的情况，这样的情况我们称之为<strong>相关子查询</strong></p>
<p>示例：查询不讲授课程号为 c5 的课程的教师姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- method1 &lt;&gt; ALL</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> tn <span class="comment">-- 姓名去重</span></span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> (<span class="string">&#x27;c5&#x27;</span> <span class="operator">&lt;&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">select</span> cno <span class="comment">-- 课程号 </span></span><br><span class="line">					<span class="keyword">from</span> tc</span><br><span class="line">					<span class="keyword">where</span> tno<span class="operator">=</span>t.tno)) <span class="comment">-- tno 教师号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2 NOT IN</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> tn</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> (<span class="string">&#x27;c5&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">select</span> cno </span><br><span class="line">					<span class="keyword">from</span> tc</span><br><span class="line">					<span class="keyword">where</span> tno<span class="operator">=</span>t.tno)) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- method3 NOT EXISTS</span></span><br><span class="line"><span class="keyword">select</span> tn</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">				  <span class="keyword">from</span> tc</span><br><span class="line">				  <span class="keyword">where</span> tno<span class="operator">=</span>t.tno <span class="keyword">and</span> cno<span class="operator">=</span><span class="string">&#x27;c5&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>该例中，子查询判断课程号 cno 时，需要数据表 t 中教师号 tno 信息，为相关子查询</p>
<h1 id="集合运算查询"><a href="#集合运算查询" class="headerlink" title="集合运算查询"></a>集合运算查询</h1><p>在各个子查询对应数据条目和数据类型一致的条件下，可以使用 <code>UNION</code> 关键字将不同的查询得到的数据组合起来</p>
<p>且 <code>UNION</code> 会自动删除重复数据行</p>
<p>使用方法比较简单，给出一个例题供参考</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,<span class="built_in">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> tb_a</span><br><span class="line"><span class="keyword">where</span>(sno<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">select</span> sno,<span class="built_in">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> tb_b</span><br><span class="line"><span class="keyword">where</span>(sno<span class="operator">=</span><span class="string">&#x27;002&#x27;</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br></pre></td></tr></table></figure>

<p>上面的 <code>SQL</code> 语句实现：将从 <code>tb_a</code> 中查询出学号为 001 同学的学号和总成绩信息和从 <code>tb_b</code> 中查询出学号为 002 同学的学号和总成绩信息<strong>合并为一个结果集</strong></p>
<h1 id="存储查询结果"><a href="#存储查询结果" class="headerlink" title="存储查询结果"></a>存储查询结果</h1><blockquote>
<p>此处“<strong>存储</strong>”的含义是指将 A 表中查询的数据结果集存储到其他表，B 表中</p>
</blockquote>
<p>我们使用 SQL 语句查询到的结果，仅临时导出让用户（我们）看到，并未真正影响（存储）到对应数据库中，那如何实现查询结果的存储呢？</p>
<p>语法格式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">INTO</span> ...</span><br></pre></td></tr></table></figure>

<p>具体实现如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">selelct sno,<span class="built_in">sum</span>(score) <span class="comment">-- 学号,总成绩</span></span><br><span class="line"><span class="keyword">into</span> tb_b </span><br><span class="line"><span class="keyword">from</span> tb_a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno <span class="comment">-- 按照学号分组</span></span><br></pre></td></tr></table></figure>

<p>上面的 <code>SQL</code> 语句实现从 <code>tb_a</code> 中查询出学号和总成绩信息并存放到 <code>tb_b</code> 表中</p>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（七）数据查询实战演练二</title>
    <url>/2022/04/16/sql-base7/</url>
    <content><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><blockquote>
<p>根据数据库 <code>db_student</code> 中的 <code>tb_student</code> 表、<code>tb_score</code>、<code>tb_course</code>，完成下列查询语句</p>
</blockquote>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><p>表结构如下：</p>
<ul>
<li>tb_student(sno,sn,dept,sex,birthday,polity)</li>
<li>tb_score(sno,cno,score)</li>
<li>tb_cource(cno,cn,ct)<span id="more"></span>
<h1 id="任务题解"><a href="#任务题解" class="headerlink" title="任务题解"></a>任务题解</h1><h1 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h1></li>
</ul>
<blockquote>
<p>查询学生的性别信息, 并去掉重复记录。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_student20</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sex <span class="comment">-- distinct 去重</span></span><br><span class="line"><span class="keyword">from</span> tb_student</span><br></pre></td></tr></table></figure>

<h1 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h1><blockquote>
<p>查询 tb_student 表中共有几个系别</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use db_student20</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="keyword">distinct</span> dept) <span class="keyword">as</span> 系别总数</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br></pre></td></tr></table></figure>

<h1 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h1><blockquote>
<p>计算 tb_student 表中各个系的人数。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept <span class="keyword">as</span> 系别名称,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> 总人数</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept</span><br></pre></td></tr></table></figure>

<h1 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h1><blockquote>
<p>查询你所在班级的人数。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 总人数</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">like</span> <span class="string">&#x27;XXXXXXX%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(sno) 总人数</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">LEFT</span>(sno,<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;XXXXXXXX&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务五"><a href="#任务五" class="headerlink" title="任务五"></a>任务五</h1><blockquote>
<p>显示每名同学的成绩，要求显示学号、姓名、课号和成绩</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stu.sno <span class="keyword">as</span> 学号,sn <span class="keyword">as</span> 姓名,cno 课程号,score 成绩</span><br><span class="line"><span class="keyword">from</span> tb_student stu,tb_score sco <span class="comment">-- 同一学生成绩信息,避免冲突,相同字段重命名表 引用</span></span><br><span class="line"><span class="keyword">where</span> stu.sno<span class="operator">=</span>sco.sno</span><br></pre></td></tr></table></figure>

<h1 id="任务六"><a href="#任务六" class="headerlink" title="任务六"></a>任务六</h1><blockquote>
<p>显示 90 分以上每名同学的成绩，要求显示学号、姓名、课号和成绩</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stu.sno <span class="keyword">as</span> 学号,sn <span class="keyword">as</span> 姓名,cno 课程号,score 成绩</span><br><span class="line"><span class="keyword">from</span> tb_student stu,tb_score sco</span><br><span class="line"><span class="keyword">where</span> stu.sno<span class="operator">=</span>sco.sno <span class="keyword">and</span> score <span class="operator">&gt;</span> <span class="number">90</span>  <span class="comment">-- 添加成绩约束条件</span></span><br></pre></td></tr></table></figure>

<h1 id="任务七"><a href="#任务七" class="headerlink" title="任务七"></a>任务七</h1><blockquote>
<p>每科成绩最高最低分，要求显示科目名称。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cn 课程名,<span class="built_in">MAX</span>(score) <span class="keyword">as</span> 最高分,<span class="built_in">MIN</span>(score) <span class="keyword">as</span> 最低分</span><br><span class="line"><span class="keyword">from</span> tb_course co,tb_score sc</span><br><span class="line"><span class="keyword">where</span> co.cno<span class="operator">=</span>sc.cno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cn</span><br></pre></td></tr></table></figure>

<h1 id="任务八"><a href="#任务八" class="headerlink" title="任务八"></a>任务八</h1><blockquote>
<p>每科有多少人需要补考，要求显示科目名称。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cn 课程名,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> 补考人数</span><br><span class="line"><span class="keyword">from</span> tb_course c,tb_score sc</span><br><span class="line"><span class="keyword">where</span> c.cno<span class="operator">=</span>sc.cno <span class="keyword">and</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="comment">-- cno 课程编号</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cn</span><br></pre></td></tr></table></figure>

<h1 id="任务九"><a href="#任务九" class="headerlink" title="任务九"></a>任务九</h1><blockquote>
<p>每班计算机基础科成绩最高、最低分。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">LEFT</span>(sno,<span class="number">8</span>) <span class="keyword">as</span> 班级,cn 课程名,<span class="built_in">MAX</span>(score) 最高分,<span class="built_in">MIN</span>(score) 最低分</span><br><span class="line"><span class="keyword">from</span> tb_course c,tb_score sc</span><br><span class="line"><span class="keyword">where</span> c.cno<span class="operator">=</span>sc.cno </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">LEFT</span>(sno,<span class="number">8</span>),cn</span><br><span class="line"><span class="keyword">having</span> cn<span class="operator">=</span><span class="string">&#x27;MATLAB与系统仿真&#x27;</span> <span class="comment">-- 选中基础课名称</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十"><a href="#任务十" class="headerlink" title="任务十"></a>任务十</h1><blockquote>
<p>查询所有学生的选课情况，包括没选课的学生（使用左连接、右连接 2 种方法实现）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--left join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_student s <span class="keyword">left</span> <span class="keyword">join</span> tb_score sc</span><br><span class="line"><span class="keyword">on</span>(s.sno<span class="operator">=</span>sc.sno)</span><br><span class="line"></span><br><span class="line"><span class="comment">--right join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> tb_score sc <span class="keyword">right</span> <span class="keyword">join</span> tb_student s</span><br><span class="line"><span class="keyword">on</span>(sc.sno<span class="operator">=</span>s.sno)</span><br></pre></td></tr></table></figure>

<h1 id="任务十一"><a href="#任务十一" class="headerlink" title="任务十一"></a>任务十一</h1><blockquote>
<p>列出 tb_student 表中和“XXX”系别相同的学生的学号和姓名</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--子查询</span></span><br><span class="line"><span class="keyword">select</span> sno 学号,sn 姓名</span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> dept <span class="operator">=</span><span class="keyword">any</span>(<span class="keyword">select</span> dept <span class="keyword">from</span> tb_student <span class="keyword">where</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>)<span class="comment">--&#x27;XXX 系别&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--自身连接</span></span><br><span class="line"><span class="keyword">select</span> s1.sno,s1.sn </span><br><span class="line"><span class="keyword">from</span> tb_student s1,tb_student s2</span><br><span class="line"><span class="keyword">where</span> s1.dept<span class="operator">=</span>s2.dept <span class="keyword">and</span> s2.sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十二"><a href="#任务十二" class="headerlink" title="任务十二"></a>任务十二</h1><blockquote>
<p>查询选修 c03 课程的学生姓名</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--子查询</span></span><br><span class="line"><span class="keyword">select</span> sn <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> tb_score <span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--连接</span></span><br><span class="line"><span class="keyword">select</span> sn </span><br><span class="line"><span class="keyword">from</span> tb_student s,tb_score sc</span><br><span class="line"><span class="keyword">where</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">and</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十三"><a href="#任务十三" class="headerlink" title="任务十三"></a>任务十三</h1><blockquote>
<p>查询不选 c04 课程的学生的学号和姓名</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sn </span><br><span class="line"><span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> tb_score <span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c04&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务十四"><a href="#任务十四" class="headerlink" title="任务十四"></a>任务十四</h1><blockquote>
<p>查询每科最高分的学生的学号和科目</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno 学号,cn 课程名,score 成绩</span><br><span class="line"><span class="keyword">from</span> tb_score sc,tb_course c,</span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> cno, <span class="built_in">MAX</span>(score) <span class="keyword">as</span> 最高分</span><br><span class="line"><span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno</span><br><span class="line">) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> sc.cno<span class="operator">=</span>c.cno <span class="keyword">and</span> c.cno<span class="operator">=</span>b.cno <span class="keyword">and</span> score<span class="operator">=</span>b.最高分</span><br></pre></td></tr></table></figure>

<h1 id="任务十五"><a href="#任务十五" class="headerlink" title="任务十五"></a>任务十五</h1><blockquote>
<p>显示需要进行补考的科目编号和名称</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">select</span> cno,cn <span class="keyword">from</span> tb_course</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">distinct</span> cno <span class="keyword">from</span> tb_score <span class="keyword">where</span> score<span class="operator">&lt;</span><span class="number">60</span>)</span><br><span class="line"><span class="comment">-- 连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> c.cno,cn </span><br><span class="line"><span class="keyword">from</span> tb_course c,tb_score sc</span><br><span class="line"><span class="keyword">where</span> c.cno<span class="operator">=</span>sc.cno <span class="keyword">and</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十六"><a href="#任务十六" class="headerlink" title="任务十六"></a>任务十六</h1><blockquote>
<p>不及格人数多于 1 人的科目及人数。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cn,<span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="keyword">as</span> 不及格人数</span><br><span class="line"><span class="keyword">from</span> tb_course c,tb_score sc</span><br><span class="line"><span class="keyword">where</span> c.cno<span class="operator">=</span>sc.cno <span class="keyword">and</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cn</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十七"><a href="#任务十七" class="headerlink" title="任务十七"></a>任务十七</h1><blockquote>
<p>显示 c01 科成绩不及格的学号，对应学生表中所有列的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> tb_score <span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span><span class="keyword">and</span> score<span class="operator">&lt;</span><span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务十八"><a href="#任务十八" class="headerlink" title="任务十八"></a>任务十八</h1><blockquote>
<p>列出成绩表中各个科目成绩的最高分、最低分和平均分, 并显示成绩表中平均分大于 75 分的科目名称，并按平均分降序排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cn,<span class="built_in">MAX</span>(score) 最高分,<span class="built_in">MIN</span>(score) 最低分,<span class="built_in">AVG</span>(score) 平均分</span><br><span class="line"><span class="keyword">from</span> tb_course c,tb_score sc</span><br><span class="line"><span class="keyword">where</span> c.cno<span class="operator">=</span>sc.cno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cn</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">AVG</span>(score)<span class="operator">&gt;</span><span class="number">75</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 平均分 <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十九"><a href="#任务十九" class="headerlink" title="任务十九"></a>任务十九</h1><blockquote>
<p>查询选修了“数据库原理与应用”的学生的学号和姓名。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">select</span> sno,sn <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno<span class="operator">=</span>(<span class="keyword">select</span> cno <span class="keyword">from</span> tb_course <span class="keyword">where</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理与应用&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sno,sn <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> tb_score sc,tb_course c</span><br><span class="line"><span class="keyword">where</span> sc.cno<span class="operator">=</span>c.cno <span class="keyword">and</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理与应用&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连接</span></span><br><span class="line"><span class="keyword">select</span> sn,sn <span class="keyword">from</span> tb_student s,tb_score sc,tb_course c</span><br><span class="line"><span class="keyword">where</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">and</span> sc.cno<span class="operator">=</span>c.cno</span><br><span class="line"><span class="keyword">and</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理与应用&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务二十"><a href="#任务二十" class="headerlink" title="任务二十"></a>任务二十</h1><blockquote>
<p>査询课程号为“C02”、成绩高于“王磊”的学生的学号和成绩。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,score <span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span><span class="keyword">and</span> score<span class="operator">&gt;</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> score </span><br><span class="line"><span class="keyword">from</span> tb_score sc,tb_student s</span><br><span class="line"><span class="keyword">where</span> sc.sno<span class="operator">=</span>s.sno <span class="keyword">and</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span></span><br><span class="line"><span class="keyword">and</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多层子查询</span></span><br><span class="line"><span class="keyword">select</span> sno,score <span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span><span class="keyword">and</span> score<span class="operator">&gt;</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> score <span class="keyword">from</span> tb_score</span><br><span class="line"><span class="keyword">where</span> cno<span class="operator">=</span><span class="string">&#x27;c03&#x27;</span><span class="keyword">and</span> </span><br><span class="line">sno<span class="operator">=</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> )</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="任务二十一"><a href="#任务二十一" class="headerlink" title="任务二十一"></a>任务二十一</h1><blockquote>
<p>查询和“王磊”的“数据库原理及应用”课程分数相同的学生的学号。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> tb_score sc,tb_course c</span><br><span class="line"><span class="keyword">where</span> sc.cno<span class="operator">=</span>c.cno <span class="keyword">and</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理及应用&#x27;</span></span><br><span class="line"><span class="keyword">and</span> score<span class="operator">=</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> score <span class="keyword">from</span> tb_score </span><br><span class="line"><span class="keyword">where</span> sno<span class="operator">=</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">)<span class="keyword">and</span> cno<span class="operator">=</span>(<span class="keyword">select</span> cno <span class="keyword">from</span> tb_course <span class="keyword">where</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理及应用&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> tb_score </span><br><span class="line"><span class="keyword">where</span> score<span class="operator">=</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> score <span class="keyword">from</span> tb_score </span><br><span class="line"><span class="keyword">where</span> sno<span class="operator">=</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> tb_student</span><br><span class="line"><span class="keyword">where</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> cno<span class="operator">=</span>(<span class="keyword">select</span> cno <span class="keyword">from</span> tb_course <span class="keyword">where</span> cn<span class="operator">=</span><span class="string">&#x27;数据库原理及应用&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（八）数据更新操作实战演练</title>
    <url>/2022/04/21/sql-base8/</url>
    <content><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><blockquote>
<p>根据数据库 <code>db_student</code> 中的 <code>tb_student</code> 表、<code>tb_score</code>、<code>tb_course</code>，完成下列更新语句</p>
</blockquote>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><ul>
<li>tb_student(sno,sn,dept,sex,birthday,polity)</li>
<li>tb_score(sno,cno,score)</li>
<li>tb_cource(cno,cn,ct,th)<span id="more"></span>
<h1 id="任务题解"><a href="#任务题解" class="headerlink" title="任务题解"></a>任务题解</h1><h1 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h1></li>
</ul>
<blockquote>
<p>向学生表中插入一条记录，学号为 00000000，姓名为 XXX，性别为 X 的记录。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(sno,sn,sex)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;00000000&#x27;</span>,<span class="string">&#x27;XXX&#x27;</span>,<span class="string">&#x27;X&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h1><blockquote>
<p>向学生有中插入一条记录,各字段值依次为:00000000,name,sex,department，XXXX-XX-XX,polity。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(sno,sn,sex,dept,birthday,polity)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;00000000&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;department&#x27;</span>,<span class="string">&#x27;XXXX-XX-XX&#x27;</span>,<span class="string">&#x27;polity&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h1><blockquote>
<p>在课程表中添加一门新课程，其信息为：（’C8’,’计算机新技术’,’XXX’）。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_course</span><br><span class="line"><span class="keyword">ADD</span> na <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_course(cno,cn,na) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;c8&#x27;</span>,<span class="string">&#x27;计算机新技术&#x27;</span>,<span class="string">&#x27;XXX&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h1><blockquote>
<p>在选修关系表 SC 中添加所有学生对’C8’课程的选修关系记录，成绩暂定为 60，请用一条命令完成本批量添加任务。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_score(sno,cno,score) </span><br><span class="line"><span class="keyword">SELECT</span> sno,<span class="string">&#x27;c8&#x27;</span>,<span class="number">60</span> <span class="comment">-- cno/score 定值</span></span><br><span class="line"><span class="keyword">from</span> tb_student</span><br></pre></td></tr></table></figure>

<h1 id="任务五"><a href="#任务五" class="headerlink" title="任务五"></a>任务五</h1><blockquote>
<p>将女生的所有数据形成一张新表,表名为 student_girl。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">INTO</span> student_girl </span><br><span class="line"><span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务六"><a href="#任务六" class="headerlink" title="任务六"></a>任务六</h1><blockquote>
<p>将学生表中姓名为 XX 同学，性别改为女，出生日期为 1998-1-1。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_student</span><br><span class="line"><span class="keyword">SET</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>,birthday<span class="operator">=</span><span class="string">&#x27;1998-1-1&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> sn<span class="operator">=</span><span class="string">&#x27;XX&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务七"><a href="#任务七" class="headerlink" title="任务七"></a>任务七</h1><blockquote>
<p>将 tb_score 表中的 c04 的课程折合为 60%并加上 40 分。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_score</span><br><span class="line"><span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">*</span><span class="number">0.6</span><span class="operator">+</span><span class="number">40</span></span><br><span class="line"><span class="keyword">WHERE</span> cno<span class="operator">=</span><span class="string">&#x27;c04&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务八"><a href="#任务八" class="headerlink" title="任务八"></a>任务八</h1><blockquote>
<p>将选修数据结构课程的学生成绩增加 15 分。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_score</span><br><span class="line"><span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">15</span></span><br><span class="line"><span class="keyword">WHERE</span> cno<span class="operator">=</span>(<span class="keyword">SELECT</span> cno </span><br><span class="line">		   <span class="keyword">FROM</span> tb_course </span><br><span class="line">		   <span class="keyword">WHERE</span> cn<span class="operator">=</span><span class="string">&#x27;数据结构&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务九"><a href="#任务九" class="headerlink" title="任务九"></a>任务九</h1><blockquote>
<p>把选“计算机新技术”课程的男学生的成绩暂全部初始化重新设置为 0。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_score</span><br><span class="line"><span class="keyword">SET</span> score<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sno</span><br><span class="line">			  <span class="keyword">FROM</span> tb_student</span><br><span class="line">			  <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> cno<span class="operator">=</span>(<span class="keyword">SELECT</span> cno <span class="comment">-- 两个并列关系子查询</span></span><br><span class="line">		 <span class="keyword">FROM</span> tb_course</span><br><span class="line">		 <span class="keyword">WHERE</span> cn<span class="operator">=</span><span class="string">&#x27;计算机新技术&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务十"><a href="#任务十" class="headerlink" title="任务十"></a>任务十</h1><blockquote>
<p> 删除学生表中所有姓张的同学。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span>(sn,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;张&#x27;</span> <span class="comment">-- 或 WHERE sn LIKE &#x27;张%&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十一"><a href="#任务十一" class="headerlink" title="任务十一"></a>任务十一</h1><blockquote>
<p>删除 student 表中不及格同学的所有信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno</span><br><span class="line">		   <span class="keyword">FROM</span> tb_score</span><br><span class="line">		   <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务十二"><a href="#任务十二" class="headerlink" title="任务十二"></a>任务十二</h1><blockquote>
<p>XXX 同学的学生信息及其选课情况等全部删除。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除顺序颠倒会导致成绩表中无法找到XXX学生学号</span></span><br><span class="line"><span class="comment">-- 1.删除成绩表XXX成绩信息</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span>(<span class="keyword">SELECT</span> sno</span><br><span class="line">           <span class="keyword">FROM</span> tb_student</span><br><span class="line">		   <span class="keyword">WHERE</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>)</span><br><span class="line"><span class="comment">-- 2.删除XXX学生信息					 </span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> sn<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十三"><a href="#任务十三" class="headerlink" title="任务十三"></a>任务十三</h1><blockquote>
<p>删除学生表中所有学生信息（两种方法）。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- method1</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tb_student</span><br></pre></td></tr></table></figure>

<hr>
<p>在修改表信息书写 <code>SQL</code> 语句时，遵循 <code>SET</code>、<code>UPDATE</code>、<code>WHERE</code> 的书写顺序</p>
<p>即首先设置值，然后选定作用范围，最后增加限制条件。这样思路会更加清晰</p>
]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 基础（九）视图与索引实战演练</title>
    <url>/2022/04/29/sql-base9/</url>
    <content><![CDATA[<h1 id="实验任务-1"><a href="#实验任务-1" class="headerlink" title="实验任务 1"></a>实验任务 1</h1><blockquote>
<p>在 <code>studen</code> 数据库中，以 <code>tb_student</code>、<code>tb_course</code> 和 <code>tb_score</code> 表为基础完成下列视图的设计与创建</p>
</blockquote>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><ul>
<li>tb_student(sno,sn,dept,sex,birthday,polity)</li>
<li>tb_score(sno,cno,score)</li>
<li>tb_cource(cno,cn,ct,th)<span id="more"></span>
<h1 id="任务题解"><a href="#任务题解" class="headerlink" title="任务题解"></a>任务题解</h1><h1 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h1></li>
</ul>
<blockquote>
<p>创建学生的基本情况视图 V_STU。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_STU</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_STU</span><br></pre></td></tr></table></figure>

<h1 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h1><blockquote>
<p>创建视图 V_Sco，显示学生成绩信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_Sco</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,score</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_Sco</span><br></pre></td></tr></table></figure>

<h1 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h1><blockquote>
<p>创建视图 V_SCORE, 要求只显示学生的学号、姓名、系别、课号、课程名称及成绩。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_SCORE</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno,sn,dept,sc.cno,cn,score</span><br><span class="line"><span class="keyword">FROM</span> tb_student s,tb_score sc,tb_course co</span><br><span class="line"><span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">AND</span> sc.cno<span class="operator">=</span>co.cno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_SCORE</span><br></pre></td></tr></table></figure>

<h1 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h1><blockquote>
<p>各系学生人数、平均年龄创建视图 V_NUM_AVG。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_NUM_AVG</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> dept,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 学生人数, <span class="comment">-- 同时包含聚合函数和基本字段,需要分组 GROUP BY</span></span><br><span class="line"><span class="built_in">AVG</span>(<span class="keyword">year</span>(GETDATE())<span class="operator">-</span><span class="keyword">year</span>(birthday)) <span class="keyword">AS</span> 平均年龄</span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_NUM_AVG</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="任务五"><a href="#任务五" class="headerlink" title="任务五"></a>任务五</h1><blockquote>
<p>创建一个反映学生出生年份的视图 V_YEAR。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_YEAR</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sn,<span class="keyword">YEAR</span>(birthday) <span class="keyword">AS</span> 出生年份 <span class="comment">-- 计算公式</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_YEAR</span><br></pre></td></tr></table></figure>

<h1 id="任务六"><a href="#任务六" class="headerlink" title="任务六"></a>任务六</h1><blockquote>
<p>将各位学生选修课程的门数及平均成绩创建视图 V_AVG_S_G。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_AVG_S_G</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 选修课程数,<span class="built_in">AVG</span>(score) 平均分 </span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_AVG_S_G</span><br></pre></td></tr></table></figure>

<h1 id="任务七"><a href="#任务七" class="headerlink" title="任务七"></a>任务七</h1><blockquote>
<p>将各门课程的选修人数及平均成绩创建视图 V_AVG_C_G。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_AVG_C_G</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cno,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 课程选修人数,<span class="built_in">AVG</span>(score) 平均成绩</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_AVG_C_G</span><br></pre></td></tr></table></figure>

<h1 id="任务八"><a href="#任务八" class="headerlink" title="任务八"></a>任务八</h1><blockquote>
<p>创建视图 V_YEAR_RJ，显示软件工程系出生日期在 2001 年之后出生的学生信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_YEAR_RJ</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> major<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">AND</span> <span class="keyword">YEAR</span>(birthday)<span class="operator">&gt;</span><span class="number">2001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_YEAR_RJ</span><br></pre></td></tr></table></figure>

<h1 id="任务九"><a href="#任务九" class="headerlink" title="任务九"></a>任务九</h1><blockquote>
<p>基于视图 V_STU,创建视图 V_SEX,查看男党员的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_SEX</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_STU</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">AND</span> polity<span class="operator">=</span><span class="string">&#x27;党员&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_SEX</span><br></pre></td></tr></table></figure>

<h1 id="任务十"><a href="#任务十" class="headerlink" title="任务十"></a>任务十</h1><blockquote>
<p> 修改视图 V_YEAR，显示软件工程系出生日期在 2000 年之前出生的学生信息，并删除视图 V_YEAR。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> V_YEAR</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">WHERE</span> dept<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">AND</span> <span class="keyword">YEAR</span>(birthday) <span class="operator">&lt;</span> <span class="number">2002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V_YEAR</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> V_YEAR</span><br></pre></td></tr></table></figure>

<h1 id="任务十一"><a href="#任务十一" class="headerlink" title="任务十一"></a>任务十一</h1><blockquote>
<p>向视图 V_Sco 中添加学号为‘xxx’，课程号为‘10002’,成绩为87 的信息。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> V_Sco(sno,cno,score)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;10002&#x27;</span>,<span class="number">87</span>)</span><br></pre></td></tr></table></figure>

<h1 id="任务十二"><a href="#任务十二" class="headerlink" title="任务十二"></a>任务十二</h1><blockquote>
<p>修改视图 V_Sco，将学号为‘XXX’的学生，选修的课程号为10002 的成绩更改为 90。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">VIEW</span> V_Sco <span class="comment">-- 修改值,实质为更新视图,关键字 UPDATE</span></span><br><span class="line"><span class="keyword">SET</span> score<span class="operator">=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="keyword">AND</span> cno<span class="operator">=</span><span class="string">&#x27;10002&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十三"><a href="#任务十三" class="headerlink" title="任务十三"></a>任务十三</h1><blockquote>
<p>在视图 V_Sco 中，将学号为‘XXX’的学生，选修的课程号为10002 的记录删除。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> V_Sco</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span> <span class="keyword">AND</span> cno<span class="operator">=</span><span class="string">&#x27;10002&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="任务十四"><a href="#任务十四" class="headerlink" title="任务十四"></a>任务十四</h1><blockquote>
<p>查询以上所建视图结果 </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1) 查询平均成绩为 90 分以上的学生的学号、姓名和成绩。</span></span><br><span class="line"><span class="comment">-- method1</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sn,score</span><br><span class="line"><span class="keyword">FROM</span> v_score</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">in</span>(<span class="keyword">SELECT</span> sno </span><br><span class="line">			 <span class="keyword">FROM</span> V_AVG_S_G</span><br><span class="line">			 <span class="keyword">WHERE</span> 平均分<span class="operator">&gt;</span><span class="number">85</span>)</span><br><span class="line">						 </span><br><span class="line"><span class="comment">-- method2</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sno,s.sn,score</span><br><span class="line"><span class="keyword">FROM</span> v_score s,v_avg_s_g s2</span><br><span class="line"><span class="keyword">WHERE</span> s.sno<span class="operator">=</span>s2.sno <span class="keyword">AND</span> s2.平均分<span class="operator">&gt;</span><span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2) 查询各课程成绩均大于平均成绩的学生的学号、姓名、课程和成绩。</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sn,cno,score</span><br><span class="line"><span class="keyword">FROM</span> v_score</span><br><span class="line"><span class="keyword">WHERE</span> score<span class="operator">&gt;</span><span class="keyword">ANY</span>(<span class="keyword">SELECT</span> 平均分 <span class="keyword">FROM</span> v_avg_c_g)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3) 按系别统计各系平均成绩在 80 分以上的人数，结果按降序排列。</span></span><br><span class="line"><span class="comment">-- method1</span></span><br><span class="line"><span class="keyword">SELECT</span> dept 系别,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 总人数</span><br><span class="line"><span class="keyword">FROM</span> v_stu</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span>(<span class="keyword">SELECT</span> sno </span><br><span class="line">			 <span class="keyword">FROM</span> v_avg_s_g</span><br><span class="line">			 <span class="keyword">WHERE</span> 平均分 <span class="operator">&gt;</span> <span class="number">80</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 人数 <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2</span></span><br><span class="line"><span class="keyword">SELECT</span> dept,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 人数</span><br><span class="line"><span class="keyword">from</span> v_stu s,v_avg_s_g s2</span><br><span class="line"><span class="keyword">WHERE</span> s.sno<span class="operator">=</span>s2.sno <span class="keyword">AND</span> s2.平均分 <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 人数 <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h1 id="实验任务-2"><a href="#实验任务-2" class="headerlink" title="实验任务 2"></a>实验任务 2</h1><blockquote>
<p>在 <code>student</code> 数据库中，以 <code>tb_student</code>、<code>tb_course</code> 和 <code>tb_score</code> 表为基础完成下列索引的设计与创建。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1) 对学生信息表 tb_student 中的学号 sno 创建聚集索引，并按降序排列。</span></span><br><span class="line"><span class="keyword">CREATE</span> CLUSTERED INDEX IX_SNO <span class="keyword">ON</span> tb_student(sno <span class="keyword">DESC</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2) 对学生成绩信息表 tb_score 先按上课编号 cno 升序排列，再按学生成绩 score 降序排列。</span></span><br><span class="line"><span class="keyword">SELECT</span> cno,score</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cno <span class="keyword">ASC</span> ,score <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3) 对课程信息表 tb_course 中的课程编号创建唯一索引，并按升序排列。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX IX_CNO <span class="keyword">ON</span> tb_course(cno <span class="keyword">ASC</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4) 在 tb_student 表中的 sn 列创建唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> CLUSTERED INDEX IX_SN <span class="keyword">ON</span> tb_student(sn)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>1.查看与删除索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line">Sp_helpindex name <span class="comment">-- name:数据库表名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引的方式</span></span><br><span class="line"><span class="comment">-- method1</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span><span class="keyword">table</span> <span class="keyword">or</span> <span class="keyword">view</span> name<span class="operator">&gt;</span>.<span class="operator">&lt;</span>index name<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- method2</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>index name<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">table</span> <span class="keyword">or</span> <span class="keyword">view</span> name<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.索引类型</strong></p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>普通索引</td>
<td><code>INDEX</code></td>
</tr>
<tr>
<td>唯一索引</td>
<td><code>UNIQUE INDEX</code></td>
</tr>
<tr>
<td>聚集索引</td>
<td><code>CLUSTERED INDEX</code></td>
</tr>
<tr>
<td>非聚集索引</td>
<td><code>NONCLUSTERED INDEX</code></td>
</tr>
<tr>
<td>全文索引</td>
<td><code>FULLTEXT</code></td>
</tr>
</tbody></table>
<p><strong>3.索引分析</strong></p>
<p>索引相当于一本书的目录，优缺点分析如下：</p>
<p>虽然索引很大程度上提高了查询速度，但同时也会降低更新表的速度，如：对表进行 <code>insert</code>、<code>update</code> 和 <code>delete</code>。这是因为更新表时，不仅要保存数据，还要保存一下索引文件</p>
<p>索引只是提高效率的一个因素，如果有大数据量的表，则需要花时间研究建立最优秀的索引，或优化查询语句</p>
<p>建立索引会占用磁盘空间的索引文件。如果在一个大表上创建了多种组合索引，索引文件的增速会很快</p>
<p><strong>4.查看视图创建源码</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Sp_helptext name <span class="comment">-- name:视图名</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库原理</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>静态成员函数访问非静态数据成员</title>
    <url>/2021/05/11/static-member-function-explain/</url>
    <content><![CDATA[<h1 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h1><p><strong>定义格式：</strong></p>
<blockquote>
<p>static 类型名 静态数据成员名 ;</p>
</blockquote>
<p>详解：由于静态数据成员属于本类的所有对象共享，不属于特定类对象，因此在未产生类对象时作用域就可见，即：在未产生类的实例时，就可以对它进行操作</p>
<p><strong>初始化：</strong></p>
<blockquote>
<p>类型 类名 :: 静态数据成员 &#x3D; 初始化值 ;</p>
</blockquote>
<p>详解：静态数据成员必须在类外初始化，不可在类体内，因为：构造函数中，如果可以，则每次建立对象，都会对静态数据成员的值进行修改，这违背静态数据成员的使用目的；类内也不可以初始化，不要忘记，类只是一种数据类型，数据类型中怎么能赋初值呢？</p>
<span id="more"></span>

<h1 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h1><p><strong>定义格式：</strong></p>
<blockquote>
<p>static 返回类型 静态成员函数名 (参数表) ;</p>
</blockquote>
<p><strong>调用方式：</strong></p>
<blockquote>
<p>类名 :: 静态成员函数名 (实参表) ;<br>对象名 . 静态成员函数名 (实参表) ;</p>
</blockquote>
<p><strong>注意：</strong></p>
<div class="note danger"><p>类外定义静态成员函数时，定义格式和普通成员函数定义格式相同，<mark class="label ">不再使用static修饰</mark>；<br>使用对象名和成员运算符(.)调用成员函数时，并非该函数属于某一对象，只是类与对象间的桥梁，为了能处理静态数据成员；</p>
</div>

<p>静态成员函数不能<mark class="label ">默认引用</mark>本类非静态数据成员的原因：</p>
<div class="note info"><p>当调用一个对象的非静态成员函数时，系统会将该对象的起始地址赋予成员函数的this指针。然而，静态成员函数不属于对象，无this指针。所以静态成员函数不能访问类的默认非静态成员（非静态成员函数和非静态数据成员）</p>
</div>

<p>举例说明一种静态成员函数访问非静态数据成员的方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> a) &#123;                      <span class="comment">//构造函数</span></span><br><span class="line">		x = a;</span><br><span class="line">		y += x; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">f1</span><span class="params">(Point m)</span></span>;           <span class="comment">//静态成员函数的原型声明</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> y;                      <span class="comment">//静态数据成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Point::f1</span><span class="params">(Point m)</span> </span>&#123;              <span class="comment">//静态成员函数的类外定义      参数表中创建对象</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;x=&quot;</span> &lt;&lt; m.x &lt;&lt; endl;       <span class="comment">//静态成员函数通过对象访问非静态数据成员</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;y=&quot;</span> &lt;&lt; y &lt;&lt; endl;         <span class="comment">//静态成员函数处理静态数据成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Point::y = <span class="number">0</span>;                      <span class="comment">//静态数据成员初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Point <span class="title">P1</span><span class="params">(<span class="number">5</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	Point::<span class="built_in">f1</span>(P1);                     <span class="comment">//静态成员函数调用时一般使用 类名::</span></span><br><span class="line">	Point::<span class="built_in">f1</span>(p2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>程序运行结果:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line">y=<span class="number">15</span></span><br><span class="line">x=<span class="number">10</span></span><br><span class="line">y=<span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>对运行结果的分析，最后一次对静态数据成员y更新后，y&#x3D;15所以两次输出y的值都是15</p>
<mark class="label ">只要对静态数据成员的值更新一次，就可以保证所有对象都会存取更新后的值</mark>

<p>由本例可知：静态成员函数不能引用本类非静态成员并非绝对，只是不可以进行默认的访问，因为编译器不知道应该去寻找哪一个对象。若必须要访问，则有两种方式，且一般使用第二种居多</p>
<blockquote>
<p>对象名 . 非静态成员 ;<br>类名 :: 非静态成员 ;  </p>
</blockquote>
<p>故：<mark class="label ">实例化对象</mark>即可完成对非静态数据成员的访问</p>
]]></content>
      <categories>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 修订版本关键字</title>
    <url>/2022/03/28/svn-reversion-keyword/</url>
    <content><![CDATA[<blockquote>
<p>来自阿里的一道测试题目，刚好了解下 SVN 中修订版本关键字，评论留言你的答案</p>
</blockquote>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>【单选题】关于SVN中修订版本关键字，描述错误的是?</p>
<p><strong>A. HEAD工作拷贝中的最新的版本</strong></p>
<p><strong>B. BASE工作拷贝中一个条目的修订版本号,如果这个版本在本地修改了，则“BASE版本’就是这个条目在本地未修改的版本</strong></p>
<p><strong>C. COMMITTED项目最近修改的修订版本，与BASE相同或更早</strong></p>
<p><strong>D. PREV一个项目最后修改版本之前的那个版本,技术上可以认为是COMMITTED-1</strong></p>
<h1 id="Revision-Keywords"><a href="#Revision-Keywords" class="headerlink" title="Revision Keywords"></a>Revision Keywords</h1><p>The Subversion client understands a number of revision keywords. These keywords can be used instead of integer arguments to the <code>--revision (-r)</code> option, and are resolved into specific revision numbers by Subversion:</p>
<p>Subversion客户端可以理解一些修订版本关键字，这些关键字可以用来代替 <code>--revision (r) </code>的数字参数，这会被Subversion解释到特定修订版本号：</p>
<span id="more"></span>

<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>The latest (or “youngest”) revision in the repository .</p>
<p><code>版本库</code>中最新的(或者是“最年轻的”)版本</p>
<h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p>The revision number of an item in a working copy . If the item has been locally modified, this refers to the way the item appears without those local modifications.</p>
<p><code>工作拷贝</code>中一个条目的修订版本号，如果这个版本在本地修改了，则“BASE版本”就是这个条目在本地未修改的版本</p>
<h2 id="COMMITTED"><a href="#COMMITTED" class="headerlink" title="COMMITTED"></a>COMMITTED</h2><p>The most recent revision prior to, or equal to, BASE, in which an item changed.</p>
<p>项目最近修改的修订版本，与 BASE 相同或更早</p>
<h2 id="PREV"><a href="#PREV" class="headerlink" title="PREV"></a>PREV</h2><p>The revision immediately before the last revision in which an item changed. Technically, this boils down to COMMITTED-1.</p>
<p>一个项目最后修改版本 <strong>之前</strong> 的版本，技术上可以认为是  COMMITTED -1</p>
<p>As can be derived from their descriptions, the PREV , BASE , and COMMITTED revision keywords are used only when referring to a working copy path—they don’t apply to repository URLs.  HEAD, on the other hand, can be used in conjunction with both of these path types.</p>
<p>因而可以从描述中得到，关键字<code>PREV</code>，<code>BASE</code>和<code>COMMITTED</code>只在引用工作拷贝路径时使用，而不能用于版本库URL， 而关键字 <code>HEAD</code> 则可以用于两种路径类型</p>
<hr>
<p>参考资料</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdm5ib29rLnJlZC1iZWFuLmNvbS9lbi8xLjcvc3ZuLWJvb2sucGRm">Version Control with Subversion For Subversion 1.7<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【图解】三次握手，四次挥手 —— 用心看这一篇就够了</title>
    <url>/2022/04/08/tcp-ip-protocol/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>TCP 三次握手，四次挥手知识点精析。备考、面试前看两眼，加深记忆，祝你一臂之力。顺利通过考试、拿到 offer。</strong><br>💖💖如果本文帮助到你的话，还请各位小伙伴👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<center><img src="https://img-blog.csdnimg.cn/ec1b86b9ee7b4b939c433744378c4c51.png"></center>

<hr>
<h1 id="📚概述"><a href="#📚概述" class="headerlink" title="📚概述"></a>📚概述</h1><p>“什么是三次握手，四次挥手？”，该问题作为<strong>计算机网络</strong>学科中常见问题之一，无论是面试还是考研，我们都有必要细细参透其中的奥妙</p>
<p>在学习之前，我们首先需要了解一些基本的概念</p>
<h1 id="📚基础理论"><a href="#📚基础理论" class="headerlink" title="📚基础理论"></a>📚基础理论</h1><h2 id="📐传输控制协议"><a href="#📐传输控制协议" class="headerlink" title="📐传输控制协议"></a>📐传输控制协议</h2><blockquote>
<p>传输控制协议（<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，在 OSI 模型中完成传输层指定功能。<br>TCP 使用<strong>校验和函数</strong>检验数据是否出现错误，在数据发送和接收时均需要计算<strong>校验和</strong>。</p>
</blockquote>
<span id="more"></span>

<h3 id="✒️TCP-特点"><a href="#✒️TCP-特点" class="headerlink" title="✒️TCP 特点"></a>✒️TCP 特点</h3><p><strong>1.TCP 是面向连接的传输层协议</strong></p>
<blockquote>
<p>应用程序在使用 TCP 协议前，必须首先完成 TCP 连接的建立。在数据传输结束后，必须释放先前已建立的 TCP 连接</p>
</blockquote>
<p><strong>2.每一条 TCP 连接只能有两个端点</strong></p>
<blockquote>
<p>TCP 连接只能是点对点，一对一的</p>
</blockquote>
<p><strong>3.TCP 提供可靠交付服务</strong></p>
<blockquote>
<p>通过 TCP 连接传送的数据，无差错、不丢失、不重复，且按序到达</p>
</blockquote>
<p><strong>4.TCP 提供全双工通信</strong></p>
<blockquote>
<p>TCP 允许通信双方的应用进程在<strong>任何时候</strong>都可以发送数据，TCP连接的两端都设有<strong>发送、接收缓存</strong>，用于临时存放双向通信的数据，上层应用进程在时机恰当时会读取缓存中的数据</p>
</blockquote>
<p><strong>5.TCP 面向字节流</strong></p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/f4ea53de5a6e404bb27e80234e4b5292.png" />
        </center>
        <center>
        <strong>图 1 TCP 面向字节流示意图</strong>
        </center></td> 
    <tr>
</table>

<blockquote>
<p><strong>流</strong>是指：流入到进程或从进程流出的<strong>字节序列</strong><br>TCP 把应用程序回传的数据看做一连串的<strong>无结构</strong>的字节流，不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系<br>接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一致，且接收方的应用程序必须具有识别接收字节流，并将其还原为有意义的应用层数据的能力</p>
</blockquote>
<h3 id="✒️TCP-报文首部"><a href="#✒️TCP-报文首部" class="headerlink" title="✒️TCP 报文首部"></a>✒️TCP 报文首部</h3><p>这里需要了解 TCP 报文首部的格式，相关<strong>控制位</strong>非常重要</p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/f4ea53de5a6e404bb27e80234e4b5292.png" />
        </center>
        <center>
        <strong>图 2 TCP 报文首部的格式示意图</strong>
        </center></td> 
    <tr>
</table>

<blockquote>
<p>由于 TCP 报文段首部的前 20 个字节是固定的，其后 4n 个字节是根据需要增加的选项，所以 TCP首部的最小长度是 20 字节</p>
</blockquote>
<p><strong>1.源端口和目的端口</strong></p>
<blockquote>
<p>各占 2 字节，分别写入源端口号、目的端口号</p>
</blockquote>
<p><strong>2.序号字段</strong></p>
<blockquote>
<p>占 4 字节，范围为 <code>[0，2 ^ 32-1]</code>，序号使用 <code>mod2^32</code> 运算，在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置，首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号</p>
</blockquote>
<p><strong>3.确认号字段</strong></p>
<blockquote>
<p>占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。若确认号等于 N，则表明：到序号 N-1 为止数据均己正确接收</p>
</blockquote>
<p><strong>4.数据偏移字段</strong></p>
<blockquote>
<p>占 4 位，指出 TCP 报文段的数据起始处和 TCP 报文段的起始处的距离。此字段实际上指出了 TCP 报文段的首部长度</p>
</blockquote>
<p><strong>5.保留字段</strong></p>
<blockquote>
<p>占 6 位，保留为今后使用，目前应置为0</p>
</blockquote>
<p><strong>6.紧急 URG</strong></p>
<blockquote>
<p>URG&#x3D;1时，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应尽快传送，即提高数据传送的优先级</p>
</blockquote>
<p><strong>7.确认 ACK</strong></p>
<blockquote>
<p>仅当 ACK&#x3D;1 时确认号字段才有效，TCP 规定，在连接建立后所有传送的报文段必须将 ACK 置为 1</p>
</blockquote>
<p><strong>8.推送 PSH</strong></p>
<blockquote>
<p>接收 TCP 收到 PSH&#x3D;1 的报文段后，将尽快交付接收的应用进程，不再等到缓存都填满后再继续向上交付</p>
</blockquote>
<p><strong>9.复位 RST</strong></p>
<blockquote>
<p>当 RST&#x3D;1 时，表明 TCP 连接中出现严重差错，必须释放连接，然后再重新建立传输连接。也可以用于拒绝一个非法的报文段或拒绝打开一个连接</p>
</blockquote>
<p><strong>10.同步 SYN</strong></p>
<blockquote>
<p>连接建立时用来同步序号，SYN&#x3D;1就表示这是一个连接请求或连接接受报文</p>
</blockquote>
<p><strong>11.终止 FIN</strong></p>
<blockquote>
<p>用于释放一个连接，当 FIN&#x3D;1 时，表明此报文段的发送方的数据己发送完毕，并要求释放传输连接</p>
</blockquote>
<p><strong>12.窗口字段</strong></p>
<blockquote>
<p>占 2 字节，窗口值范围为 <code>[0，2^16-1]</code> 之间的整数。窗口是指发送本报文段的一方的接收窗口，窗口值作为接收方让发送方设置其发送窗口的依据</p>
</blockquote>
<p><strong>13.检验和字段</strong></p>
<blockquote>
<p>占 2 字，检验和字段检验的范围包括首部和数据两部分</p>
</blockquote>
<p><strong>14.紧急指针</strong></p>
<blockquote>
<p>占 2 字节，仅当 URG&#x3D;1 时才有意义，含义是：本报文段中的紧急数据的字数，紧急指针指出了紧急数据的末尾在报文段中的位置<br>当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。注意：即使窗口为零时也可发送紧急数据</p>
</blockquote>
<p><strong>15.选项字段</strong></p>
<blockquote>
<p>长度可变，最长可达 40 字节。未使用“选项”时，TCP 首部长度为 20 字节</p>
</blockquote>
<h1 id="📚TCP-连接的建立与释放"><a href="#📚TCP-连接的建立与释放" class="headerlink" title="📚TCP 连接的建立与释放"></a>📚TCP 连接的建立与释放</h1><h2 id="📐三次握手"><a href="#📐三次握手" class="headerlink" title="📐三次握手"></a>📐三次握手</h2><p><code>TCP</code> 建立连接的过程称为<strong>握手</strong>，握手需要在客户端和服务器之间交换三个 <code>TCP</code> 报文段</p>
<p>我们举一个简单的例子帮助大家理解这个问题：试想下面这个场景</p>
<blockquote>
<p>你出门在外没带钥匙，而房屋钥匙又仅有一把，在不考虑钥匙丢失在哪里的情况下，今晚你还会回家吗？</p>
</blockquote>
<p>虽然此例子并不那么恰当，但是可以类比到三次握手的原因上。如果客户端和服务端有一方出现了问题，那么它们之间的通讯、资源传输必定会出问题</p>
<p>因此，<code>TCP</code> 三次握手的作用就是使客户端和服务端双方都明确自己的责任，<strong>保证双方都具有资源接收和发送的能力</strong></p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/79c6cf6c941d4893b1456332e8fbb4bb.png" />
        </center>
        <center>
        <strong>图 3 TCP 三次握手示意图</strong>
        </center></td> 
    <tr>
</table>


<p>字符释意：</p>
<ul>
<li><code>ACK</code>：确认报文段</li>
<li><code>ack</code>：确认号</li>
<li><code>SYN</code>：发送连接请求 &#x2F; 接收报文段&#96;</li>
<li><code>seq</code>：发送数据的第一个字节的序号</li>
</ul>
<p>客户端与服务端资源收发的<strong>三次握手</strong>过程如下：</p>
<p>*注：图例中的 <code>Ss</code>、<code>Sa</code> 分别表示 <code>Server send</code>、<code>Server accept</code>（服务端发送能力、服务端接收能力）；<code>Cs</code>、<code>Ca</code> 分别表示 <code>Client send</code>、<code>Client accept</code>（客户端发送能力、客户端接收能力）</p>
<p><strong>1.第一次握手</strong></p>
<blockquote>
<p>第一次握手由客户端发送资源包给到服务端，若该过程正常，则得出结论：<strong>服务端接收、客户端发送服务正常</strong></p>
</blockquote>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/f7080ba46eda468f8161c9530afd6716.png" />
        </center>
        <center>
        <strong>图 4 TCP 建立连接第一次握手示意图</strong>
        </center></td> 
    <tr>
</table>

<p><strong>2.第二次握手</strong></p>
<blockquote>
<p>第二次握手由服务端发送资源包给到客户端，若该过程正常，则得出结论：<strong>服务端发送、客户端接收服务正常</strong></p>
</blockquote>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/f60f1ebbe4e741e0b1c69e133a7111a7.png" />
        </center>
        <center>
        <strong>图 5 TCP 建立连接第二次握手示意图</strong>
        </center></td> 
    <tr>
</table>

<p><strong>3.第三次握手</strong></p>
<p>这里大家可能就会有疑问了？为什么还需要进行第三次握手呢？前两次不是已经得出结论客户端、服务端接收、发送资源包能力正常了吗？</p>
<p>其实并不是，第一、二次握手只是在单独的过程中得出服务正常的结论，但是在第二次握手结束后，&#x3D;&#x3D;服务端的接收能力和客户端的发送能力未知&#x3D;&#x3D;，这时候便有了 <code>TCP</code> 的第三次握手过程</p>
<blockquote>
<p>第三次握手由客户端发送资源包给到服务端，若该过程正常，则得出结论：<strong>服务端接收、客户端发送服务正常</strong></p>
</blockquote>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/e261576429244398a6493858750005ca.png" />
        </center>
        <center>
        <strong>图 6 TCP 建立连接第三次握手示意图</strong>
        </center></td> 
    <tr>
</table>


<p>通过这三次的握手过程我们可以分析得到：第二次是对第一次握手的补充，第三次是对第二次握手的补充，最终正好形成闭环，客户端和服务端都确认了自己的接收、发送能力正常，之后方可进行通信</p>
<p>并且，要完成两者状态的监测，这之间<strong>至少</strong>需要三次过程，两次并不足以判断自身的服务状态。每一个步骤都相互关联，下一次握手的“响应”由上一次“请求“触发，每次握手得出的结论都是对上一次结果的补充，从而得出最终结果</p>
<p>三次握手过程中，客户端和服务端交换 <strong>I</strong>nitial <strong>S</strong>equence <strong>N</strong>umber (<code>ISN</code>)，为了使对方清除下一步接收到的数据信息应以何<strong>序列号</strong>进行数据整合</p>
<p>并且，ISN 在此过程中是动态生成的。假如 ISN 固定不变，入侵者非常容易就能得出后续数据的确认号，这将会危机到数据信息的安全</p>
<h2 id="📐四次挥手"><a href="#📐四次挥手" class="headerlink" title="📐四次挥手"></a>📐四次挥手</h2><p>当成功建立一个 <code>TCP</code> 连接， 服务端在 <code>LISTEN</code> 状态下，收到建立连接请求的 <code>SYN</code> 报文后，将 <code>ACK</code>和 <code>SYN</code> 存放到同一个报文中一起发送给客户端</p>
<p>而关闭连接时，服务端收到客户端的 <code>FIN</code> 报文时，仅表示对方不再发送数据，但仍然能够接收数据。此时，服务端不一定将全部数据都发送给了客户端</p>
<p>因此服务端关闭有两种方式：</p>
<ol>
<li>立即关闭</li>
<li>继续发送一些数据给客户端后，再发送 <code>FIN</code> 报文给客户端（表示同意关闭连接），是否立刻关闭发送数据通道，需交由上层应用决定</li>
</ol>
<p>所以，客户端的 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，这里就会导致次数增加一</p>
<p>数据传输完毕后，双方均可释放连接。起初，客户端和服务端均处于 <code>ESTABLISHED</code> 状态，然后是客户端主动关闭，服务器被动关闭</p>
<p>整个过程请参考下图：</p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/7d3aa066c42843d9b03f0be303cd172c.png" />
        </center>
        <center>
        <strong>图 7 TCP 释放连接四次挥手示意图</strong>
        </center></td> 
    <tr>
</table>


<p>字符释意：</p>
<ul>
<li><code>FIN</code> ：连接终止位</li>
<li><code>seq</code>：发送的第一个字节的序号</li>
<li><code>ACK</code>：确认报文段</li>
<li><code>ack</code>：确认号</li>
</ul>
<p><strong>四次挥手过程：</strong></p>
<ul>
<li><p>客户端发送<strong>第一次</strong>挥手，之后由 <code>ESTABLISHED</code> 状态转为 <code>FIN_WAIT1</code> 状态</p>
</li>
<li><p>服务器收到客户端的第一次挥手之后，发送<strong>第二次挥手</strong>给服务器，服务器进入 <code>CLOSE_WAIT</code> 状态，等待服务器自身的 <code>SOCKET</code> 关闭等处理</p>
</li>
<li><p>客户端收到服务器的第二次挥手，进入 <code>FIN_WAIT2</code> 状态，等待服务器关闭</p>
</li>
<li><p>服务器发送<strong>第三次挥手</strong>，然后进入 <code>LAST_ACK</code> 状态</p>
</li>
<li><p>客户端收到第三次挥手，发送<strong>第四次挥手</strong>，客户端进入 <code>TIME_WAIT</code> 状态；</p>
</li>
<li><p>服务器收到第四次挥手，进入 <code>CLOSED</code> 状态，客户端等待 2MSL 后，进入 <code>CLOSED</code> 状态</p>
</li>
</ul>
<p>TCP 状态转换过程见下图：</p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/0db61377a65441618b9225814f94b12d.png" />
        </center>
        <center>
        <strong>图 8 TCP 状态转换过程示意图</strong>
        </center></td> 
    <tr>
</table>


<h1 id="📚总结"><a href="#📚总结" class="headerlink" title="📚总结"></a>📚总结</h1><p><code>TCP</code> 建立连接的三次握手是指发送了三个报文段，而 <code>TCP</code> 断开连接进行四次挥手是指发送了四个报文段，在此过程中，<code>SYN</code> 和 <code>FIN</code> 均利用重传进行可靠传输</p>
<p>连接的释放本质上两次就可以完成，但若想要完全释放，则需要四次挥手，请看下图</p>
<table border="0">
    <tr>
        <td><center>
        <img src="https://img-blog.csdnimg.cn/cddae2cec3a44844b0d4e62f74255baa.png" />
        </center>
        <center>
        <strong>图 9 TCP 连接释放举例</strong>
        </center></td> 
    <tr>
</table>


<p>打电话即将结束时，路人甲说完信息“OK，我没事了”后，路人乙回复到“嗯，知道啦”。这是就是完成了 TCP 四次挥手的前两次过程；路人乙马上要挂断电话时，路人甲又忽然想起来某件事，说了很多。这时路人乙又回复到“好的好的”。至此，TCP 四次挥手的后两次过程完毕</p>
<hr>
<center><strong><font size=5>💯冲啊！祝各位小伙伴都能拿到大厂 Offer ，成功上岸💯</font></strong></center>

<p><img src="https://img-blog.csdnimg.cn/d42a61657d7f4f75ae93c232f40bf46b.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML + CSS】模仿腾讯云页面——初步实现</title>
    <url>/2022/04/03/tencent-page01/</url>
    <content><![CDATA[<blockquote>
<p>前端入门实战练习之<strong>腾讯云页面实现</strong></p>
</blockquote>
<h1 id="样例图"><a href="#样例图" class="headerlink" title="样例图"></a>样例图</h1><p>实现后的样子如图所示，ps：量的尺寸最开始肯定是没有的，都是写一步，测一步，最后就成这样啦</p>
<p><img src="https://img-blog.csdnimg.cn/186f70a729eb4511b3b834bd83576cae.png"></p>
<p>使用的工具是 <span class="exturl" data-url="aHR0cHM6Ly9mYW5jeW5vZGUuY29tLmNuL3B4Y29vaw==">PxCook<i class="fa fa-external-link-alt"></i></span>，方便我们量取图片设计尺寸</p>
<span id="more"></span>

<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><blockquote>
<p>初步实现大致样式，明日进行细节优化，2022.4.3</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/f2fa74b322d740048d7feeb9d246dff4.png"></p>
<p>图中标识位置尚未优化，下面是该部分实现源码</p>
<h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-02 22:39:35</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-03 20:00:34</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tencent - navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- width=&quot;77&quot; height=&quot;18&quot; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tencent-logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>最新活动<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>解决方案<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>定价<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文档<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>企业中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云市场<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>开发者支持<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>合作与生态<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>云服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>轻量应用服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>域名注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>网站备案<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>对象存储<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>云硬盘<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>云数据库<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>云数据库<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>批量计算<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span>容器服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">            云从业者培训及认证</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">            好好学习，天天向上</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                    在线课程</span><br><span class="line">                    <span class="comment">&lt;!-- width=&quot;580px&quot; height=&quot;347px&quot; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/right.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;middle-pic&quot;</span> <span class="attr">width</span>=<span class="string">&quot;415&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    本课程专为云计算初学者、学生、个人开发者打造，购买云+校园任意套餐可免费观<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    看课程视频本课程专为云计算初学者、学生、个人开发者打造，购买云+校园任意套<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    餐可免费观看课程视频本课程专为云计算初学者、学生、个人开发者打造，购买云<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    +校园任意套餐可免费观看课程视频本课程专为云计算初学者、学生、个人开发者打<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    造，购买云+校园任意套餐可免费观看课程视频本课程专为云计算初学者、学生、个<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    人开发者打造，购买云+校园任意套餐可免费观看课程视频</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>开始学习<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span>腾讯云计算<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云市场<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户案例<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品发布台<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网站备案<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>认证信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>许可证说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>隐私声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span>解决方案<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>金融<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电商<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>人脸核身<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>在线教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微信小程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微信小程序音视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span>资源与社区<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>免费套餐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>入门中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>定价中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>资源中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>腾讯云大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云+社区<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>专栏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>问答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>沙龙<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span>合作与生态<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>合作伙伴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>合作伙伴学院<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>推广奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云+公益<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云+校园<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云+创业<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Techo 开发者大会<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>腾讯数字生态大会<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云启产业计划<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>腾讯云启创新基地<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span>&gt;</span>管理与支持<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公告<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>控制台<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>续费管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>访问管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>安全中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>举报平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Copyright © 2013 - 2020<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tencent Cloud. All Rights Reserved.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>腾讯云 版权所有<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buy&quot;</span>&gt;</span></span><br><span class="line">                    购买咨询</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导航 */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2b303b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1680px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="comment">/* 行高=上边距+文字高度+下边距 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面上部分 */</span></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1680px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/banner.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面上部分 列表 */</span></span><br><span class="line"><span class="selector-class">.top</span> <span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1b2a3f</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> <span class="selector-class">.list</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">54px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arrows</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* padding-left: 138px; */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面中间部分内容 */</span></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1680px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">740px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-class">.txt</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">31px</span> auto <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="comment">/* 圆角尺寸 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="comment">/* 自动内减 */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">562px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">46px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="comment">/* border-bottom: 2px solid #cccccc; */</span></span><br><span class="line">    <span class="comment">/* 不再使用 border 控制,看做一个空 div 用伪元素控制 实现效果如下*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* border 宽度 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">128px</span>;</span><br><span class="line">    <span class="comment">/* border 高度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="comment">/* border 位置 absolute(绝对定位) */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">295px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">745px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">918px</span>;</span><br><span class="line">    <span class="comment">/* right: 0px; */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">76px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.txt</span> <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">49px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="comment">/* 自动内减 */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ffa50b</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.study</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/* a 标签 切换显示模式 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1680px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2e3033</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1155px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">222px</span>;</span><br><span class="line">    <span class="comment">/* background-color: peru; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">135px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">192px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-right</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">27px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-left</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-left</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">126px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">230px</span>;</span><br><span class="line">    <span class="comment">/* background-color: white; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第五个列表右侧 margin 值为 0 */</span></span><br><span class="line"><span class="selector-class">.footer-left</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-left</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-left</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">29px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-right</span> <span class="selector-class">.buy</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">191px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-right</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后期重点解释下过程中出现的问题及解决方案，源码相应位置均有注释。初次上手，恳请各位大佬斧正</p>
<hr>
<p>注：以上练习题目来自黑马程序员，仅供学习交流使用，侵删致歉</p>
<p>参考资料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtnNDExVDd0OQ==">WEB 前端视频课程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Web 前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML + CSS】模仿腾讯云页面——细节优化</title>
    <url>/2022/04/04/tencent-page02/</url>
    <content><![CDATA[<blockquote>
<p>对导航栏、列表进行细节优化</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/838eaca47b224097871468ccc815c498.png"></p>
<span id="more"></span>

<h1 id="1-导航栏"><a href="#1-导航栏" class="headerlink" title="1.导航栏"></a>1.导航栏</h1><p>初稿我们的样式中，导航栏的显示效果并不完美，logo 位置正常，但是显然后侧的文字效果并未实现精准定位，首先给出实现后的样式效果，清除需要优化的位置</p>
<p><img src="https://img-blog.csdnimg.cn/a5d5c98800864ab8a7d08a0d4d012f13.png"></p>
<h2 id="图像位置定位"><a href="#图像位置定位" class="headerlink" title="图像位置定位"></a>图像位置定位</h2><p>分析源码可知，初稿中将 <code>img-logo</code> 和 <code>container</code> 合并布局，造成无法留出间隔距离的情况</p>
<p><img src="https://img-blog.csdnimg.cn/8b9d9888b07d4620b35f84c4a040f67c.png"></p>
<p>这次我们单独布局并设置浮动效果，留出间隔</p>
<h3 id="index-nav-html"><a href="#index-nav-html" class="headerlink" title="index-nav.html"></a>index-nav.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 将 logo 和右侧导航分开布局 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tencent-logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      	<span class="comment">&lt;!-- ...... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在原来单独的 <code>img</code> 标签嵌套格式中，为 <code>img</code> 标签添加 <code>h1</code> 标签，并一定注意<strong>显示模式</strong>的转换，否则后侧文字会靠下显示（如图）</p>
<p><img src="https://img-blog.csdnimg.cn/b2f7f38259e4454daf868af47fdc0d5b.png"></p>
<h3 id="css-nav-css"><a href="#css-nav-css" class="headerlink" title="css-nav.css"></a>css-nav.css</h3><p>注释掉的颜色方便我们实现精准定位，清除标签的位置，定位完成后注释掉即可，可以当做小技巧来用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导航 */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1680px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2b303b</span>;</span><br><span class="line">    <span class="comment">/* background-color: orange; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="comment">/* 不转换 h1 显示模式 后面 container 会换行显示 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">240px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">638px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化位置示意</p>
<p><img src="https://img-blog.csdnimg.cn/1b0a33039e254d9ab9f717ee0c340949.png"></p>
<h1 id="2-列表装饰元素"><a href="#2-列表装饰元素" class="headerlink" title="2.列表装饰元素"></a>2.列表装饰元素</h1><p>不知道大家有没有发现，<code>Tencent-logo</code> 下方列表对应字体后方有个装饰性的小标签，英文状态下的 <code>&gt;</code> 符号，初稿使用<strong>伪元素</strong>实现，但是装饰元素和字体间的距离并没有控制</p>
<p><img src="https://img-blog.csdnimg.cn/c4691d71052047b196f40229d8532d1a.png"></p>
<p>今天换一种思路解决该问题</p>
<p>在字体后添加装饰元素：英文状态下的 <code>&gt;</code> 符号，添加<strong>浮动</strong>效果，设置 <code>margin-right</code> 尺寸即可</p>
<h2 id="top-list-html"><a href="#top-list-html" class="headerlink" title="top-list.html"></a>top-list.html</h2><p>不再使用伪元素控制，更新为添加 <code>float:right</code> 浮动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    云服务器</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                        &gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>轻量应用服务器<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>域名注册<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网站备案<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>对象存储<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云硬盘<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云数据库<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云数据库<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>批量计算<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>容器服务<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="top-list-css"><a href="#top-list-css" class="headerlink" title="top-list.css"></a>top-list.css</h2><p>控制浮动、边距尺寸</p>
<p>量取边距像素值</p>
<p><img src="https://img-blog.csdnimg.cn/b7290f012fab4800867ccf83c1093cfa.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.top</span> <span class="selector-class">.list</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css-更新位置"><a href="#css-更新位置" class="headerlink" title="css 更新位置"></a>css 更新位置</h3><p><img src="https://img-blog.csdnimg.cn/7f2aaeb120a34559845fbc4d3445b2c0.png"></p>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://img-blog.csdnimg.cn/dc605aea1ec14bc09f02868d7033ee5d.png"></p>
<p>两处细节优化完成 ing~</p>
]]></content>
      <categories>
        <category>Web 前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>实用工具【开发必备】</title>
    <url>/2021/08/06/tools-develop/</url>
    <content><![CDATA[<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>今天给大家分享几个我们开发、学习中必不可少的工具，有了它们效率倍增。你用过几个呢（评论区见）?如果你有更好的开发工具或实用软件，欢迎留言&#x2F;私信！</p>
<span id="more"></span>

<h1 id="Everthing"><a href="#Everthing" class="headerlink" title="Everthing"></a>Everthing</h1><p>Everything是一款输入文件名可快速搜索到资源的搜索引擎，对Windows平台的用户支持非常友好。它的界面简洁，后台资源占用低，能够实现文件的快速索引，以及磁盘文件实时更新等功能。上千个的文件，它仅用一秒就能精准定位，显示文件路径，毫不夸张。使用方式也非常简单，在搜索框中填入待查找文件即可</p>
<img src="https://img-blog.csdnimg.cn/96711f5b139d4e3eaad8173f9065905f.png" width="60%">

<h1 id="Geek-Uninstaller"><a href="#Geek-Uninstaller" class="headerlink" title="Geek Uninstaller"></a>Geek Uninstaller</h1><p>你是否也曾遇到过这样的情况：软件卸载不干净？捆绑软件卸了又来？注册表冗杂？那么恭喜你找到了它们的克星—Geek Uninstaller<br>在卸载软件时，它不仅能使用常规操作执行相关软件的卸载程序，而且在卸载程序执行完毕后还能自动扫描系统注册表，检索并选择删除残留无效信息。对于一些流氓软件，它也支持 “强制删除” 操作，一个不留</p>
<image src="https://img-blog.csdnimg.cn/65c48faf07044a4db6976084f411fc3a.png" width="45%">

<h1 id="Dev-C"><a href="#Dev-C" class="headerlink" title="Dev-C++"></a>Dev-C++</h1><p>虽说官方对该软件的支持早已停止，但是软件使用方面对于刚入门的初学者还是非常友好的。可以设置中文模式，不至于被一下子 “劝退” ，它对于新手更加友好体现在编译出错信息可以自动翻译为中文，现在能有这样功能的IDE实属稀少。不得不说，英语还是要好好学啊！<br>现在能找到的最新版本是由国人自主优化的一个版本，版本号为 5.15 ，支持常用的调试、自动保存、代码格式化等功能，集成Mingw64的编译器、GDB调试器、优秀的源码编辑器，界面同官方公布的版本也有较大更新</p>
<image src="https://img-blog.csdnimg.cn/975ff773c3064610a337b6fe03888e94.png" width="95%">

<h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><p>Vscode是微软官方于2015年4月30日在Build开发者大会上正式宣布推出的一款轻量化代码编辑器，它免费、开源且功能强大<br>支持几乎所有主流的程序语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。对于跨平台的支持也是非常兼容，可在 Linux、MacOS X、Windows操作系统上正常运行</p>
<image src="https://img-blog.csdnimg.cn/438207391266404d8cc7db2fa247206f.png" width="95%">

<p>个人最喜欢的还是其对于 C++、Java、Python、C#、PHP、Go 等编程语言扩展工具的强大支持，只有想不到，没有找不到</p>
<image src="https://img-blog.csdnimg.cn/4c5bfc39608a440a96095fbc1fc77149.png" width="95%">

<h1 id="资源直达"><a href="#资源直达" class="headerlink" title="资源直达"></a>资源直达</h1><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXlkZXlIbWdPbHZsTERvN000Uk1kaVE=">点我下载<i class="fa fa-external-link-alt"></i></span>所有资源，提取码：peng </p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底卸载 Visual Studio 2019【完整版】</title>
    <url>/2021/09/01/uninstall-visualstudio-entirly/</url>
    <content><![CDATA[<h1 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h1><p><img src="https://img-blog.csdnimg.cn/cf0417ff7a21496c99b51a8ad4680c09.png"></p>
<p>不得不说，VS这款宇宙第一IDE的实力属实强劲。但也正是它如此强大的能力，才让我有些 “无法驾驭”，完全卸载便是其中之一。</p>
<p>既然你看到了这篇博客，说明你已经遇到了常规方法不能解决的问题，这里我们直接给出正常卸载无法进行的解决方案。</p>
<span id="more"></span>

<h1 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h1><ol>
<li>尝试运行 InstallCleanup.exe，程序路径：<code>%programfiles(x86)%\Microsoft Visual Studio\Installer\resources\app\layout\InstallCleanup.exe”</code>；</li>
<li>使用微软官方 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9WaXN1YWxTdHVkaW9Vbmluc3RhbGxlci9yZWxlYXNlcw==">清理工具<i class="fa fa-external-link-alt"></i></span> ，<a href="%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1bw2_zPk4Azhj3ZArjO5bNA">传送门</a> 密码：peng，管理员身份运行程序 Setup.ForcedUninstall.exe，输入 y 开始卸载；</li>
<li>尝试使用清理工具 <span class="exturl" data-url="aHR0cHM6Ly9nZWVrdW5pbnN0YWxsZXIuY29tL2Rvd25sb2Fk">Geek Uninstaller<i class="fa fa-external-link-alt"></i></span> 强制删除；</li>
<li>若VS安装在C盘，找到安装路径，删除路径下所有文件，其他盘符请忽略；</li>
<li>在C盘下搜索 visual studio，删除所有匹配文件（如果机器同时安装有VSC，请注意区分），可用 <span class="exturl" data-url="aHR0cHM6Ly9kcC1qc29uLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzExOTQ2NDI3Mg==">Everthing<i class="fa fa-external-link-alt"></i></span> 工具条件搜索；</li>
<li>C盘下继续搜索 visualstudio（无空格），删除匹配文件；</li>
<li>组合键 <a class="btn" href="#">Win</a> +<a class="btn" href="#">R</a> ，输入 regedit 打开注册表，删除文件夹<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio</code>；</li>
</ol>
<hr>
<p>工作还得继续啊！不聊了，马上重装继续找错去了，bai~~<br><image src="https://img-blog.csdnimg.cn/9e55aba6adbb46548cdca2768d1bfca0.jpg" width="50%"></p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 VHDL 的 Vivado2017.4 使用教程</title>
    <url>/2021/06/09/vhdl-vivado-course/</url>
    <content><![CDATA[<h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>首先打开vivado2017.4</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913192255246.png"></p>
<p>点击create project</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515091137.png"></p>
<span id="more"></span>

<p>点击next</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913192919382.png"></p>
<p>为新建的工程起名字，路径和名字都不要有中文<br>起好名字后点击next</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913193042643.png"></p>
<p>选择RTL project，勾选do not specify sources at this time, 表示以后再配置资源文件<br>选好了之后点击next  </p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913193239829.png"></p>
<p>输入你的FPGA板的型号，我的是xc7a100tcsg424<br>然后点击next  </p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913193512237.png"></p>
<p>finish之后，如图所示，可以配置语言，这里选择的是VHDL</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913194024475.png"></p>
<p>然后我们开始新建&#x2F;添加文件，点击+</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913194213997.png"></p>
<p>选择add or create design sources</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913194318122.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913195733882.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913195803692.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913195823404.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/2018091319585611.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913195917516.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913195937120.png"></p>
<p>双击你所建立的source之后，就可以开始写程序了</p>
<h1 id="写程序"><a href="#写程序" class="headerlink" title="写程序"></a>写程序</h1><p>在这里我提供一个简单的程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">library IEEE;</span><br><span class="line">use IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">entity <span class="built_in">test</span> is</span><br><span class="line">Port ( </span><br><span class="line">        led:out std_logic;</span><br><span class="line">        switch:<span class="keyword">in</span> std_logic</span><br><span class="line">        );</span><br><span class="line">end <span class="built_in">test</span>;</span><br><span class="line"></span><br><span class="line">architecture Behavioral of <span class="built_in">test</span> is</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">process(switch)</span><br><span class="line">begin</span><br><span class="line">    <span class="keyword">if</span> switch=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">    led&amp;lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    led&amp;lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br><span class="line"></span><br><span class="line">end Behavioral;</span><br></pre></td></tr></table></figure>

<p>然后我们开始写仿真程序, 同样建立一个仿真文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200221125.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200244599.png"></p>
<p>仿真文件的命名通常为test_bench</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200254547.png"></p>
<p>这里我也提供对应的仿真程序，以供参考</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">library IEEE;</span><br><span class="line">use IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">entity test_bench is</span><br><span class="line">end test_bench;</span><br><span class="line"></span><br><span class="line">architecture Behavioral of test_bench is</span><br><span class="line">component <span class="built_in">test</span> port(</span><br><span class="line">    led :out std_logic;</span><br><span class="line">    switch:<span class="keyword">in</span> std_logic);</span><br><span class="line">end component;</span><br><span class="line">signal led:std_logic:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">signal switch:std_logic:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">begin</span><br><span class="line">dut:<span class="built_in">test</span> port map(</span><br><span class="line">    led=&amp;gt;led,switch=&amp;gt;switch</span><br><span class="line">    );</span><br><span class="line">process</span><br><span class="line">begin</span><br><span class="line">    switch&amp;lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="built_in">wait</span> <span class="keyword">for</span> 10ms;</span><br><span class="line">    switch&amp;lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">wait</span> <span class="keyword">for</span> 10ms;</span><br><span class="line">end process;</span><br><span class="line">end Behavioral;</span><br></pre></td></tr></table></figure>

<p>写完之后点击保存</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200339733.png"></p>
<h1 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h1><p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/2018091320051774.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200543561.png"></p>
<p>仿真界面的上方有三个键：a是重新开始仿真，b是开始仿真直到点击break(F5), c是仿真指定的时间，我这里设置的是100ms</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200558838.png"></p>
<p>点击红色圆圈里的是看到所有仿真波形</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913200819971.png">  </p>
<p>仿真波形没有错误，开始综合</p>
<h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><p>点击 run synthesis, 等待一段时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20220515092558.png">  </p>
<p>跳出一个对话框，点击cancel</p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>如果你没有现成的约束文件，就自己约束了<br>先点击 open synthsized design</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913201853848.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913202155174.png"></p>
<p>打开开发板的使用指南</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913202209308.png"></p>
<p>例如：我想约束为<br>led对应LD0（H17）<br>switch对应switch0（J15）</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913202454763.png"></p>
<p>约束之后，保存CTRL+S，跳出来对话框，点击确定<br>然后为约束文件命名</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913202657750.png"></p>
<p>然后重新执行综合</p>
<h1 id="实现以及生成二进制文件"><a href="#实现以及生成二进制文件" class="headerlink" title="实现以及生成二进制文件"></a>实现以及生成二进制文件</h1><p>实现</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913203241132-1.png"></p>
<p>生成二进制文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/PDPENG/jason-storage/blog-img/20180913203830914.png"></p>
<p>然后 open hardware manager<br>点击open target<br>点击device program<br>程序下载完毕后观察实验现象  </p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Vivado</tag>
      </tags>
  </entry>
  <entry>
    <title>《我的 Vivado 实战——单周期 CPU 指令分析》</title>
    <url>/2021/08/06/vivado-single-cycle-cpu/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>不知道你是否和我有过同样的感受，《计算机组成原理》这门学科学起来如此的艰难：一节课下来，教室黑板上留下了满满的 “足迹”，看上去也挺简单的，不就是 0 和 1 嘛。但这些看起来简简单单的 0 1 码却成为了我当时学习路上的绊脚石。源码、反码、补码等等等等，各种的码制转换令我一头雾水，我曾一度怀疑这就是计算机干的活儿吗？</p>
<p>随着后面慢慢了解《计算机组成原理》后，我愿称计算机为世界上最麻烦的电子产品。也形象的将计算机描述为一套有电源、有身体、有框架，但就是没有思想的空壳儿。这时候，我们的人类社会才萌生了许许多多“ 利用 ”它们的主人—程序“ 猿 ”</p>
<p>程序员就是要为计算机这个富有 ” 聪明 “潜质的伙伴编写一套一套的 “程序” ，告诉它们应该去做什么亦或是怎么去做。正是由于它们能吃苦、不怕累的精神再加上完美程序的契合，我们的生活质量得以大幅度提升</p>
<p><img src="https://img-blog.csdnimg.cn/d9e29e873bc84ad29fe504d8c01d22c9.jpg"></p>
<p>即使你不是计算机专业的学生，相信对于CPU你也有所了解。正所谓CPU（Central Processing Unit），也就是中央处理器。负责解释计算机指令以及处理计算机软件中的数据。中央处理器主要包含控制器、运算器两部分，其中还包括cache以及实现它们之间信息互换的数据、总线<br>可千万别小看这个不起眼的 “小东西” ，它可是程序执行、机器正常运转必不可少的元器件。作为电子计算机三大核心部件（CPU、内存、I&#x2F;O设备）之一的CPU，在计算机体系结构中承载着控制调配硬件资源、执行通用运算等重要职责。下面我们来了解较为简单的单周期CPU功能指令</p>
<span id="more"></span>
<hr>
<h1 id="上机实验"><a href="#上机实验" class="headerlink" title="上机实验"></a>上机实验</h1><p>分析实现单周期CPU的14条指令计算结果，比较理论与实践结果的正确性</p>
<h2 id="Addi"><a href="#Addi" class="headerlink" title="Addi"></a>Addi</h2><p><img src="https://img-blog.csdnimg.cn/ba85a8085bd8402897ac6cf03bda40c0.png">分析第一个周期，指令地址为041008，在程序测试段中，可以看到，本条指令为addi，那么现在开始检验指令addi的实现过程：指令addi的功能是rt←rs + (sign-extend)immediate； immediate符号扩展再参加“加”运算</p>
<p>首先找到rs在本周期中存放的源操作数地址，rs&#x3D;00；然后在Objects中添加immediate组件，找到立即数的值，immediate&#x3D;8；最后进入ALU分析计算结果，在ALU的代码文件中有两个引脚，ALUSrcA和ALUSrcB，它们在第一个周期中的值分别是0和1，则A端口进行ReadData1，B端口进行extend，计算结果为result&#x3D;8，指令执行正确，可以实现数据相加功能</p>
<p><img src="https://img-blog.csdnimg.cn/6f8709919cd443a3a8c0888ad370ce45.png"></p>
<h2 id="Ori"><a href="#Ori" class="headerlink" title="Ori"></a>Ori</h2><p><img src="https://img-blog.csdnimg.cn/c0dd475546ad4e30aeeb8e4fdb391d05.png"></p>
<p>分析第二个周期，指令地址为40020002，在程序测试段中，可以看到，本条指令为ori，那么现在开始检验指令ori的实现过程：指令ori的功能是rt←rs | (zero-extend)immediate； immediate符号扩展再参加“或”运算。寄存器源操作数地址：rs&#x3D;0，immediate&#x3D;2；<br>进行zero-extend后，值为2</p>
<p><img src="https://img-blog.csdnimg.cn/d707e234fec54ee8b057751db692f5ca.png"></p>
<p>进行“或”运算，ALU两个引脚输入端口值为</p>
<p><img src="https://img-blog.csdnimg.cn/1132e1365c894d69bdaa318dbdc2143e.png"></p>
<p>计算结果为</p>
<p><img src="https://img-blog.csdnimg.cn/70d71de7cc7e45f4abeed363dbf2743b.png"></p>
<p>指令计算结果无误，指令运行正常</p>
<h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><p><img src="https://img-blog.csdnimg.cn/4f42e234992f497aa416aafd950da353.png"></p>
<p>分析第三个周期，指令地址为0411800，在程序测试段中，可以看到，本条指令为add，那么现在开始检验指令add的实现过程：指令add的功能是rd←rs + rt。源操作数地址：rs&#x3D;2，rt&#x3D;1；ALU两个引脚值都是0，读寄存器中的值，此时存入结果为03，程序运行正常，功能实现</p>
<p><img src="https://img-blog.csdnimg.cn/f0ba839ffdaf4592819415a13dc9414e.png"></p>
<h2 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a>Sub</h2><p><img src="https://img-blog.csdnimg.cn/2dceddf99f2a47beb0e18971311a12e7.png"></p>
<p>分析第四个周期，指令地址为08622800，在程序测试段中，可以看到，本条指令为sub，那么现在开始检验指令sub的实现过程：指令sub的功能是rd←rs - rt。源操作数地址：rs&#x3D;3，rt&#x3D;2；ALU两个引脚值皆为0，程序读取寄存器中的值，此时存入结果为5，程序运行正常，功能完好</p>
<p><img src="https://img-blog.csdnimg.cn/0827be61b81448d58c7a5c3e5bece093.png"></p>
<h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p><img src="https://img-blog.csdnimg.cn/fa60197cf2d64ee385dcdc3228d26281.png"></p>
<p>分析第五个周期，指令地址为44a22000，在程序测试段中，可以看到，本条指令为and，那么现在开始检验指令and的实现过程：指令and的功能是rd←rs &amp; rt；（逻辑与运算）。源操作数寄存器地址：rs&#x3D;5，rt&#x3D;2；ALU引脚值为0，读取ALU计算结果为00000000，分别对源操作数5和2转为2进制为：0101、0010按位与后值为0，结果吻合，该单元工作正常，功能实现</p>
<p><img src="https://img-blog.csdnimg.cn/9a9f74d997c84f62a6252f24d99ed877.png"></p>
<h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><p><img src="https://img-blog.csdnimg.cn/3e779ca5a7724e2f972cd1865a96ce99.png"></p>
<p>分析第六个周期，指令地址为48824000，在程序测试段中，可以看到，本条指令为or，那么现在开始检验指令or的实现过程：指令or的功能是rd←rs | rt；（逻辑或运算）。源操作数寄存器地址：rs&#x3D;04，rt&#x3D;02；ALU双引脚值为0，读取寄存器堆中的值，可以看到存放真值为0和2（取最后结果）。读取值为2</p>
<p>分别对源操作数4和2转为2进制并按位或后值为2，与程序运行结果吻合，该单元工作正常，功能实现</p>
<p><img src="https://img-blog.csdnimg.cn/d921a5397b664867917ec2b46e93d1c3.png"></p>
<h2 id="sll"><a href="#sll" class="headerlink" title="sll"></a>sll</h2><p><img src="https://img-blog.csdnimg.cn/780db27a9c4f49049c31e0d9fc7499a0.png"></p>
<p>分析第七个周期，指令地址为60084040，在程序测试段中，可以看到，本条指令为sll，那么现在开始检验指令sll的实现过程：指令sll的功能是rd&lt;－rt&lt;&lt;(zero-extend)sa，左移sa位 ，(zero-extend)sa。源操作数寄存器地址：rt&#x3D;08 ，寻求真值，移位数sa&#x3D;1,程序运行后 。在二进制数据计算中，左移一位就相当于乘以2，故程序结果正确，该单元工作正常</p>
<h2 id="bne"><a href="#bne" class="headerlink" title="bne"></a>bne</h2><p><img src="https://img-blog.csdnimg.cn/69aea7d3a2e243898e9b41d19da3ae49.png"></p>
<p>分析第八个周期，指令地址为c501fffe，在程序测试段中，可以看到，本条指令为bne，那么现在开始检验指令bne的实现过程：指令bne的功能是：if(rs!&#x3D;rt) pc←pc + 4 + (sign-extend)immediate &lt;&lt;2  else pc ←pc + 4【与beq不同：不等时转移，相等时顺序执行。】在寄存器堆中找到源操作数地址，寻得真值，找寻计算结果，结果吻合，单元工作正常</p>
<p><img src="https://img-blog.csdnimg.cn/2418243ddb294a308fe208c2c8cd98fa.png"></p>
<h2 id="slti"><a href="#slti" class="headerlink" title="slti"></a>slti</h2><p><img src="https://img-blog.csdnimg.cn/17de34a564c045e3aa7244f26222d2f4.png"></p>
<p>分析第九个周期，指令地址为6c460008，在程序测试段中，可以看到，本条指令为slti，那么现在开始检验指令slti的实现过程：指令slti的功能是：if (rs &lt;(sign-extend)immediate)  rt &#x3D;1 else  rt&#x3D;0，源操作数地址找到后，对立即数进行sign-extend，然后判断是否满足if（）中的给定条件，程序结果完整无误，本单元工作正常</p>
<p><img src="https://img-blog.csdnimg.cn/b16162cd12044c59bb598391f0ac2c51.png"></p>
<h2 id="beq"><a href="#beq" class="headerlink" title="beq"></a>beq</h2><p><img src="https://img-blog.csdnimg.cn/01132021d3744f38a52b30bcd0b45bbc.png"></p>
<p>第14个周期中，指令地址为c0e1fffe，在程序测试段中，可以看到，本条指令为beq，那么现在开始检验指令beq的实现过程：指令beq的功能是：if(rs&#x3D;rt) pc←pc + 4 + (sign-extend)immediate &lt;&lt;2  else pc ←pc + 4,immediate是从PC+4地址开始和转移到的指令之间指令条数</p>
<p>immediate符号扩展之后左移2位再相加。左移2位是由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，已经右移两位，这与上文 “指令之间指令条数”相契合。运算结果符合事实，单元工作正常</p>
<p><img src="https://img-blog.csdnimg.cn/2b9d5421c8a34e0bb9876455e7ff2f08.png"></p>
<h2 id="sw"><a href="#sw" class="headerlink" title="sw"></a>sw</h2><p><img src="https://img-blog.csdnimg.cn/945306ae6f2f42199b7928a6ecfe5083.png"></p>
<p>第19个周期中，指令地址为98220004，在程序测试段中，可以看到，本条指令为sw，那么现在开始检验指令sw的实现过程：指令sw的功能是：memory[rs+ (sign-extend)immediate]←rt；immediate符号扩展再相加</p>
<p>将rt寄存器的内容保存到rs寄存器内容和立即数符号扩展后的数相加作为地址的内存单元中。同样的依次找到源操作数在寄存器中的值，进入ALU运算后，检验结果，过程图展示如下，结果无误，单元功能实现完好</p>
<p><img src="https://img-blog.csdnimg.cn/f13fca4fb6ec4362811231cb1ebd2f3c.png"></p>
<h2 id="lw"><a href="#lw" class="headerlink" title="lw"></a>lw</h2><p><img src="https://img-blog.csdnimg.cn/0efbc72459be4029a494a7d8c297c25a.png"></p>
<p>第20个周期中，指令地址为9c290004，在程序测试段中，可以看到，本条指令为lw，那么现在开始检验指令lw的实现过程：指令lw的功能是：rt ← memory[rs + (sign-extend)immediate]；immediate符号扩展再相加</p>
<p>读取rs寄存器内容和立即数符号扩展后的数相加作为地址的内存单元中的数，然后保存到rt寄存器中。同样的依次找到源操作数在寄存器中的值，进入ALU运算后，检验结果，过程图展示如下，结果无误，单元功能实现完好</p>
<p><img src="https://img-blog.csdnimg.cn/a11ee093c5d246d493ca8d581087e876.png"></p>
<h2 id="j"><a href="#j" class="headerlink" title="j"></a>j</h2><p><img src="https://img-blog.csdnimg.cn/4cf52e7f6ba047439747bf11fc8bb0b1.png"></p>
<p>第21个周期中，指令地址为e0000010，在程序测试段中，可以看到，本条指令为j，那么现在开始检验指令j的实现过程：指令j的功能是：pc &lt;－{(pc+4)[31..28],addr[27..2],2{0}}，无条件跳转</p>
<p>由于MIPS32的指令代码长度占4个字节，所以指令地址二进制数最低2位均为0，将指令地址放进指令代码中时，可省掉！这样，除了最高6位操作码外，还有26位可用于存放地址，事实上，可存放28位地址了，剩下最高4位由pc+4最高4位拼接上。指令验证过程如下，最后结论为：单元工作正常，功能实现完好</p>
<p><img src="https://img-blog.csdnimg.cn/28181332ce9c4e84bba938c04968e332.png"></p>
<h2 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h2><p><img src="https://img-blog.csdnimg.cn/d8e73ac8cbf342c5a331339f77f6ea0c.png"></p>
<p>第22个周期中，指令地址为fc000000，在程序测试段中，可以看到，本条指令为Halt，那么现在开始检验指令Halt的实现过程：指令Halt的功能是：停机；不改变PC的值，PC保持不变。从仿真后的波形图中，可以清晰看到，波形图在本指令后，电平恒定，不再发生变化，所以本指令功能实现，模块单元工作正常</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>深刻了解了一个简单单周期CPU的设计方法，无论是复杂亦或是简单的系统，最好的办法就是采用分层和模块化的设计方法。在众多信号状态中，首先从最高层开始梳理逻辑，划分模块，进而到每个模块的内部核心处继续划分，这样就避免了在信号条件变动很多的情况下不能够清晰的理清的问题</p>
<p>硬件设施的不足让人感觉整个课程在“云端”，讲授的内容不能很好的和现有知识的应用契合，虽然第一次接触VerilogHDL硬件描述语言，但是这门语言的思想和我所学的C++语言使用了同样的逻辑架构，采用了自顶向下、分而治之的思想逐步剖析，正所谓“大厦的建立绝非一朝一夕”，采用“分步”的设计思想完成最终单周期CPU的设计与实现</p>
<p>有些许遗憾的是未能在硬件上实现，如果能在开发板上烧写程序，接触到实物，应该能有更为深刻的理解，在模块调用使用端口绑定时，有一个小技巧：勿完全按照顺序赋值；因为这样的方法可以尽量减少程序出错的概率，而对于我们后期检查源文件时也无需完全分辨每一个参数的值，减少工作量</p>
<p>维基百科、谷歌学术是非常不错的平台</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Vivado</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode 搭建 C / C++ 开发环境</title>
    <url>/2022/04/04/vscode-envc/</url>
    <content><![CDATA[<blockquote>
<p>将士出征，怎能没有一把利器，本文基于 VSC 搭建 C++ 开发环境</p>
</blockquote>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>相信多数计算机专业的同学都和我一样，步入大学首先要学习的就是 C 语言。那么，我想下面这个东西你一定见过</p>
<p><img src="https://img-blog.csdnimg.cn/ccd1ad9d89554b9d93db6c69a27f2bfd.png"></p>
<p>记得当时令我好奇的就是，为什么这个 VC++6.0 里，行号、插件、快捷键……什么都没有呢？？于是，历经 CodeBlocks、DevC++、VC++6.0 等编辑器后，我找到了致胜的法宝，今天的主角——VScode，这款工具在之前的博文中就有过推荐，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTk0NjQyNzI=">点我直达<i class="fa fa-external-link-alt"></i></span></p>
<p>下面我们来一起配置下 C++ 的开发环境</p>
<span id="more"></span>

<h1 id="Vscode-—-编辑器"><a href="#Vscode-—-编辑器" class="headerlink" title="Vscode — 编辑器"></a>Vscode — 编辑器</h1><blockquote>
<p>编辑器就是你写代码的地方，一款好的编辑器支持语法高亮、超多快捷键、代码提示等诸多功能</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">访问官网<i class="fa fa-external-link-alt"></i></span>下载，不做细节介绍，一个字“好”</p>
<p><img src="https://img-blog.csdnimg.cn/096921d398ad49e1bd81d51915a41c29.png"></p>
<p>傻瓜式操作，直接下一步即可安装成功</p>
<h1 id="mingw64-—-编译器"><a href="#mingw64-—-编译器" class="headerlink" title="mingw64 — 编译器"></a>mingw64 — 编译器</h1><blockquote>
<p>将源码文件编译为计算机能够执行的二进制代码文件，简单来说，代码是写给人看的，二进制文件是电脑看的，代码是人和机器交流的通道</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzLw==">访问链接<i class="fa fa-external-link-alt"></i></span>，下载编译器</p>
<p><img src="https://img-blog.csdnimg.cn/1b6634ba3d9543e9910009a6e2d1c046.png"></p>
<p>将下载下来的文件解压后，放到 <code>C:\Program Files</code> 文件夹下</p>
<p><img src="https://img-blog.csdnimg.cn/65de7205aa1140c8abd02cd1ceec8a82.png"></p>
<p>添加环境变量 <strong>Path</strong> ，<code>系统-&gt;关于-&gt;高级系统设置</code></p>
<p><img src="https://img-blog.csdnimg.cn/b054d54bdcaa4797aa0caa331ee1dfdc.png"></p>
<p>编辑 <strong>Path</strong> 变量</p>
<p><img src="https://img-blog.csdnimg.cn/deb3e3b2ff2c44d49a429c50aa871165.png"></p>
<p>加入 <code>C:\Program Files\mingw64\bin</code>，然后一路确定下去</p>
<p><code>cmd</code> 窗口键入 <code>gcc --version</code> 验证配置状态</p>
<p><img src="https://img-blog.csdnimg.cn/4227d319774242d6b8478f5ea836d84a.png"></p>
<p>显示图示信息则配置成功</p>
<h1 id="插件支持"><a href="#插件支持" class="headerlink" title="插件支持"></a>插件支持</h1><p>安装 C++ 语言支持拓展包</p>
<p><img src="https://img-blog.csdnimg.cn/2cde183ba5634d468b4bbeb6fba52885.png"></p>
<p>安装 coderunner （一键执行源程序）</p>
<p><img src="https://img-blog.csdnimg.cn/a163d61f64114da5a5884b4dfc343471.png"></p>
<h1 id="vscode-配置文件"><a href="#vscode-配置文件" class="headerlink" title=".vscode 配置文件"></a>.vscode 配置文件</h1><p>打开 vscode，导入一个空文件夹</p>
<p><img src="https://img-blog.csdnimg.cn/6cbc7f33f64f48c9bcf3bb266db59128.png"></p>
<p>点击<strong>新建文件夹</strong>按钮</p>
<p><img src="https://img-blog.csdnimg.cn/37b1e135b0e24327b58b2269a7307a48.png"></p>
<p>命名为 <code>.vscode</code>，然后点击<strong>新建文件</strong>按钮，依次建立图示文件结构</p>
<p><img src="https://img-blog.csdnimg.cn/e650d803fd4f4d82b2f10025563fde72.png"></p>
<p>其实对应的文件名称在后期编译时，vscode 会自动生成，但由于默认配置不太友好（比如生成的 exe 文件都在源文件下方，非常混乱），我们对此进行优化配置，&#x3D;&#x3D;注意对应的路径请填写你的配置路径&#x3D;&#x3D;</p>
<blockquote>
<p>下面给出常用的配置文件(包含 .exe 重定向)，可直接保存使用，定向 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYxL2FydGljbGUvZGV0YWlscy8xMTk2ODEyNDk=">详细参考<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.17763.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gcc.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//包含Debug配置</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc.exe - 生成和调试活动文件&quot;</span><span class="punctuation">,</span><span class="comment">//配置名称</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">//配置类型,对应cpptools提供的调试功能</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">//请求配置类型,可以是启动/附加类型[launch/attach]</span></span><br><span class="line">            <span class="comment">//&quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span><span class="comment">//待调试程序本地路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//程序调试时传递给程序的命令行参数,设为空值</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span><span class="comment">//改为true时程序暂停在程序入口位置,即main处打上断点</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//调试程序时的工作目录,这里表示源码目录</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//环境变量,设为空值</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">//true:cmd窗口; false:Vscode的内置终端输出</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">//指定连接的调试器,gdb为minGW64中调试程序</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//指定调试器所在路径,安装位置不同注意需要修改,间隔为\\</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span> <span class="comment">//调试开始前执行需要执行的任务,调试前要编译构建 名称要和tasks.json的label保持一致</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="comment">//构建配置项</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;shell&quot;</span><span class="punctuation">,</span><span class="comment">//任务类型,Vscode将预定义变量转义解析后直接传给command;shell-&gt;先打开shell再输入命令,因此args会经过shell再次解析</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span><span class="punctuation">,</span><span class="comment">//任务名称</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gcc.exe&quot;</span><span class="punctuation">,</span><span class="comment">//本地编译器路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//包含传给gcc命令的参数,用于实现特定功能</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">//生成和调试有关的信息</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//指定编译文件为当前文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span><span class="comment">//指定输出文件的路径和名称</span></span><br><span class="line">                <span class="comment">//&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="comment">//修改.exe文件生成位置</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">//&quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\mingw64\\bin&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//包含很多task,归为group</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span><span class="comment">//表名该组任务类型是构建</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="comment">//表明此任务为此组任务中的默认任务</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="环境验证"><a href="#环境验证" class="headerlink" title="环境验证"></a>环境验证</h1><p>输入经典的 HelloWorld 程序，测试下环境</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: coder-jason</span></span><br><span class="line"><span class="comment"> * @Date: 2022-04-04 09:57:31</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-04-04 09:57:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你是用了上方的配置文件，请在根目录下新建 <code>build</code> 文件夹，<code>exe</code> 文件会自动归类到此文件下<br><img src="https://img-blog.csdnimg.cn/a139814c838b40c0ad4e147ebae6d4db.png"></p>
<p>如果没有新建 build 文件夹，系统会提示你没有这样的文件夹，也就是<strong>找不到输出目录</strong></p>
<p><img src="https://img-blog.csdnimg.cn/5a04732ee6624a55a8362b73b3403996.png"></p>
]]></content>
      <categories>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode修改.exe文件生成位置</title>
    <url>/2021/08/13/vscode-modify-exefile-place/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>今天在写C语言练习题时，发现Vscode工作区中出现了这样的情况</p>
<p><img src="https://img-blog.csdnimg.cn/1c0ba776ffff45578d04bfa026e69cc8.png"></p>
<p>程序运行产生的可执行文件和源码混在一起，作为一名强迫症，我怎能容忍它 “如此放肆”，特意查看了一波<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9jcHAvY29uZmlnLW1pbmd3">官方文档<i class="fa fa-external-link-alt"></i></span>后终于找到了解决办法，这是对<code>.exe</code>文件位置重定向后的工作区文件目录</p>
<p><img src="https://img-blog.csdnimg.cn/8c22d60ff7d64a86b78df21b04534180.png"></p>
<p>怎么样？看起来是不是舒服多了？emmm……强迫症表示非常友好哦，下面就带大家看看我是如何解决的</p>
<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="文件建立"><a href="#文件建立" class="headerlink" title="文件建立"></a>文件建立</h2><p>现在关闭Vscode，在桌面新建一个文件夹，命名随意，然后直接拖拽到Vscode图标处打开，这个文件就是我们的工作区</p>
<image src="https://img-blog.csdnimg.cn/4567e72239e741108ee40a57221d88d5.gif" width="70%">

<p>打开之后我们新建文件夹 <strong>Demo</strong> ，其下新建文件 <strong>Hello.c</strong> ，输入代码以便我们后续测试</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击左侧的调试按钮-&gt;创建<code>launch.json</code>文件</p>
<p><img src="https://img-blog.csdnimg.cn/1c551eaf4b4d4c67a290d7296c9b7f54.png"></p>
<p>选择<code>C++(GDB/LLDB)</code></p>
<p><img src="https://img-blog.csdnimg.cn/df5e54f772654496a00e2cab6d1a359e.png"></p>
<p>选择<code>gcc.exe-生成和调试活动文件</code></p>
<p><img src="https://img-blog.csdnimg.cn/5e6884df435447308e2b78a9ef4b3180.png"></p>
<p>返回工作区文件目录，发现生成了.vscode文件夹，包含<code>launch.json</code>和<code>tasks.json</code>文件。简单了解下：<code>tasks</code>用于编译，<code>launch</code>用于执行编译后的文件，详情<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9jcHAvY29uZmlnLXdzbCNfY3JlYXRlLWEtYnVpbGQtdGFzaw==">点击这里<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>为了方便大家修改，直接给出文件，修改位置有特殊标注。可以使用 <a class="btn" href="#">Ctrl</a> +<a class="btn" href="#">F</a> 组合键搜索，简单粗暴的可以直接删除生成的文件内容，复制下面对应文件操作</p>
<h4 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;//构建配置项</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;shell&quot;</span>,//任务类型,<span class="type">Vscode</span>将预定义变量转义解析后直接传给<span class="type">command</span>;<span class="type">shell</span>-&gt;先打开<span class="type">shell</span>再输入命令,因此<span class="type">args</span>会经过<span class="type">shell</span>再次解析</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span>,//任务名称</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gcc.exe&quot;</span>,//本地编译器路径</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [ //包含传给<span class="type">gcc</span>命令的参数,用于实现特定功能</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>, //生成和调试有关的信息</span><br><span class="line">                <span class="string">&quot;<span class="variable">$</span>&#123;file&#125;&quot;</span>, //指定编译文件为当前文件</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,//指定输出文件的路径和名称</span><br><span class="line">                <span class="string">&quot;<span class="variable">$</span>&#123;workspaceFolder&#125;\\build\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span>//修改<span class="type">.exe</span>文件生成位置</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;C:\\Program Files\\mingw64\\bin&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;<span class="variable">$gcc</span>&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: &#123;//包含很多<span class="type">task</span>,归为<span class="type">group</span></span><br><span class="line">                <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,//表名该组任务类型是构建</span><br><span class="line">                <span class="string">&quot;isDefault&quot;</span>: <span class="type">true</span>//表明此任务为此组任务中的默认任务</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）将命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;<span class="variable">$</span>&#123;fileDirname&#125;\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;<span class="variable">$</span>&#123;workspaceFolder&#125;\\build\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>（2）将命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$</span>&#123;fileDirname&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;C:\\Program Files\\mingw64\\bin&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;//包含<span class="type">Debug</span>配置</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;gcc.exe - 生成和调试活动文件&quot;</span>,//配置名称</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>, //配置类型,对应<span class="type">cpptools</span>提供的调试功能</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>, //请求配置类型,可以是启动/附加类型[<span class="type">launch</span>/<span class="type">attach</span>]</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$</span>&#123;workspaceFolder&#125;\\build\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,//待调试程序本地路径</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [], //程序调试时传递给程序的命令行参数,设为空值</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="type">false</span>,//改为<span class="type">true</span>时程序暂停在程序入口位置,即<span class="type">main</span>处打上断点</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$</span>&#123;fileDirname&#125;&quot;</span>, //调试程序时的工作目录,这里表示源码目录</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: [], //环境变量,设为空值</span><br><span class="line">            <span class="string">&quot;externalConsole&quot;</span>: <span class="type">false</span>, //<span class="type">true</span>:<span class="type">cmd</span>窗口; <span class="type">false</span>:<span class="type">Vscode</span>的内置终端输出</span><br><span class="line">            <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>, //指定连接的调试器,<span class="type">minGW64</span>中调试程序-&gt;<span class="type">gdb</span></span><br><span class="line">            <span class="string">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;C:\\Program Files\\mingw64\\bin\\gdb.exe&quot;</span>, //指定调试器所在路径,安装位置不同注意需要修改,间隔为\\</span><br><span class="line">            <span class="string">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="type">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span> //调试开始前执行需要执行的任务,调试前要编译构建 名称要和<span class="type">tasks.json</span>的<span class="type">label</span>保持一致</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$</span>&#123;fileDirname&#125;\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$</span>&#123;workspaceFolder&#125;\\build\\<span class="variable">$</span>&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br></pre></td></tr></table></figure>
<h4 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h4><p>点击<code>Edit in settings.json</code>打开配置项，由于Code Runner中配置文件较多，我们只修改相关部分即可</p>
<p><img src="https://img-blog.csdnimg.cn/892f538dac8a404eb9923e030c12e64f.png"></p>
<p>（1）将命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp; gcc <span class="variable">$fileName</span> -o <span class="variable">$fileNameWithoutExt</span> &amp;&amp; <span class="variable">$dir</span><span class="variable">$fileNameWithoutExt</span>&quot;</span>, </span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp; gcc <span class="variable">$fileName</span> -o <span class="variable">$workspaceRoot</span>/build/<span class="variable">$fileNameWithoutExt</span> &amp;&amp; <span class="variable">$workspaceRoot</span>/build/<span class="variable">$fileNameWithoutExt</span>&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>（2）将命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cpp&quot;</span>: <span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp; g++ <span class="variable">$fileName</span> -o <span class="variable">$fileNameWithoutExt</span> &amp;&amp; <span class="variable">$dir</span><span class="variable">$fileNameWithoutExt</span>&quot;</span>, </span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cpp&quot;</span>: <span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp; g++ <span class="variable">$fileName</span> -o <span class="variable">$workspaceRoot</span>/build/<span class="variable">$fileNameWithoutExt</span> &amp;&amp; <span class="variable">$workspaceRoot</span>/build/<span class="variable">$fileNameWithoutExt</span>&quot;</span>, </span><br></pre></td></tr></table></figure>
<p>最后在工作区新建文件夹<strong>build</strong>，作为<strong>Test</strong>文件子项，确定好文件从属关系</p>
<p><img src="https://img-blog.csdnimg.cn/43fb85e5f92a488bb402192085aa5699.png"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://img-blog.csdnimg.cn/9887a5f0e6aa4f178195e73d74abef84.gif"></p>
<p><img src="https://img-blog.csdnimg.cn/6c703ec866584978ba2c0f28f8731f89.png"></p>
<p>完成，强迫症表示很su服~~</p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>修改 Vscode 终端为 git bash</title>
    <url>/2022/02/20/vscode-terminal-gitbash/</url>
    <content><![CDATA[<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>组合键 <code>Ctrl</code> + <code>,</code> 打开设置，搜索 <code>Shell: Windows</code></p>
<p><img src="https://img-blog.csdnimg.cn/123e2ace406b4e4ea718de981c5d50c6.png"></p>
<p>打开 <code>settings.json</code> 配置文件，尾部添加这一行代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\IDE\\Git\\bin\\bash.exe&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/a16e3f61fe264aa8b886aa93e62e4e23.png"></p>
<p>注意：</p>
<ul>
<li><code>IDE</code> 位置配置为你的 git 安装路径</li>
<li>上一行代码结尾添加逗号 <code>,</code></li>
<li>复制的路径中 <code>\</code> 修改为<code>\\</code></li>
</ul>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>如图，打开终端</p>
<p><img src="https://img-blog.csdnimg.cn/64d512381ed24b229be468f51de856cf.png"></p>
<p>可以发现已经显示了 <code>bash</code></p>
<p><img src="https://img-blog.csdnimg.cn/baace9ff0ffa4402a8993097fa58c13a.png"></p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>什么？你居然不会微信分身</title>
    <url>/2022/06/20/wechat-rolled/</url>
    <content><![CDATA[<blockquote>
<p>👲👲<font color=#a2a837 size=3>作者主页</font>：🔗<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMjY5OTYx">杰森的博客<i class="fa fa-external-link-alt"></i></span><br>📒📒<font color=#20b9cd size=3>本文摘要</font>：<strong>微信分身（多开）教程</strong><br>💖💖如果本文帮助到你的话，还请各位小伙伴👍点赞➕收藏⭐➕评论💭支持杰森呀✌️</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2ba19d080eb940e99ced56cc6a8ce6e7.png#pic_center"></p>
<hr>
<blockquote>
<p>系统环境：Windows 11</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微信，相信已经是我们生活中离不开的东西之一了，但随着使用时间增多，我们添加的好友也越来越多。本来想着分分类，让工作和生活分离开来。但看着近千人的通讯录列表实在是苦于操作，于是我们注册了另一个账户。亦称，“小号”、“工作号”</p>
<p>但随之而来的麻烦又来了，电脑只能登录一个微信账户。那这时候就有同学说了：“来回切换账户发消息，不累么？”</p>
<p>当然，伟大的程序猿们怎么能浪费时间在这种事情上呢！那今天杰森教大家微信分身，一台电脑同时登录<strong>多个</strong>微信账户</p>
<span id="more"></span>

<h1 id="微信分身教程"><a href="#微信分身教程" class="headerlink" title="微信分身教程"></a>微信分身教程</h1><h2 id="1-脚本文件"><a href="#1-脚本文件" class="headerlink" title="1.脚本文件"></a>1.脚本文件</h2><p>桌面找到微信快捷方式，快捷键 <code>alt</code> + <code>enter</code> 查看快捷方式 <strong>目标位置</strong> 并复制路径</p>
<p><img src="https://img-blog.csdnimg.cn/e9dae819b0ab48e19b2a5c2b2cf55d6b.png"></p>
<p>桌面空白位置右击，新建 <strong>文本文档</strong>，需要同时登录几个微信就复制几条以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start C:\IDE\SoftWare\WeChat\WeChat.exe -- 修改为你的微信目标路径</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/34be9a3e56e142a4b64f27dd0099394c.png"></p>
<p>组合键  <code>ctrl</code>+ <code>shift</code> + <code>s</code> 另存为 <code>WeChat.bat</code>，此处 <strong>注意编码格式</strong></p>
<p><img src="https://img-blog.csdnimg.cn/add528259ae64b01a1a91f63ad19e4f5.png"></p>
<h2 id="2-快捷方式"><a href="#2-快捷方式" class="headerlink" title="2.快捷方式"></a>2.快捷方式</h2><p>将 <code>WeChat.bat</code> 文件放在 <strong>除 C 盘外的其他盘符下</strong> ，右键 <code>WeChat.bat</code> 文件选择 <strong>发送到桌面快捷方式</strong> </p>
<p><img src="https://img-blog.csdnimg.cn/4a2e3aaa676c437ea573696af6f31eef.png"></p>
<p>找一个自己喜欢的图标文件 （<code>.ico</code> 格式），选中桌面快捷方式， <code>alt</code> + <code>enter</code> 键更改快捷方式图标</p>
<blockquote>
<p>网站推荐：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v">阿里巴巴矢量图标库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWNvbnZlcnQuY29tL2NuL2ljb24vcG5nLXRvLWljby8=">在线图片格式转换<i class="fa fa-external-link-alt"></i></span>（<code>.png</code> ~ <code>.ico</code>）</li>
</ol>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/f93b037c7c2f436289a31d173571f3f1.png"></p>
<p>选中快捷方式，<code>F2</code> 重命名，效果如下</p>
<p><img src="https://img-blog.csdnimg.cn/827eb739f4f24b4bbbe971e743af4673.png"></p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>双击 <strong>杰森</strong> 图标，拖拽登录框（重叠），分别登录就可以双开啦</p>
<p><img src="https://img-blog.csdnimg.cn/61c6189e8ac64dbdb7e5c902c07b07dd.png"></p>
<hr>
<center><strong><font size=5>🐳又能愉快的和产品经理xx了🐳</font></strong></center>

<p><img src="https://img-blog.csdnimg.cn/aba090e89e89495d8ca89d882bbb0171.png#pic_center"></p>
]]></content>
      <categories>
        <category>资源合集</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>WARNING：The remote SSH server rejected X11 forwarding request.</title>
    <url>/2022/04/11/xshell-ssh-warning/</url>
    <content><![CDATA[<blockquote>
<p>正式踏入 linux 学习历程，记录日常 BUG，总结提升</p>
</blockquote>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>作为学习 Linux 的小白来说，无论什么样的操作，必须不能影响到主机的健全，为此，专门搞了台服务器来耍一耍</p>
<p>连接服务器肯定是需要终端的，不错的软件推荐来啦。<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS9lbi94c2hlbGwv">XShell<i class="fa fa-external-link-alt"></i></span>，大家都说好那必须是没毛病，闭眼冲</p>
<p>如果你是学生（其实不用验证，发下邮件就好啦），是可以免费使用 XShell 的，进入官网后下滑，找到这里</p>
<p><img src="https://img-blog.csdnimg.cn/9ccd28bbd103452fb9fb8fb0e6d2608a.png"></p>
<p>然后你就会收到官方的邮件，点击里面的下载链接，安装就好</p>
<span id="more"></span>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天使用 XShell 连接服务器的时候，总是弹出这么一个警告信息，很是烦人</p>
<blockquote>
<p>WARNING：The remote SSH server rejected X11 forwarding request.</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/3882acfa5c264680beefaa3b5cf30dc4.png"></p>
<p>解决办法如下，非常简单就能解决，强迫症患者滴福音诶</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在<strong>会话管理器</strong>中找到当前会话</p>
<p><img src="https://img-blog.csdnimg.cn/42b5c69c98164f98b034771b5679bd56.png"></p>
<p><strong>右键</strong>选择<strong>属性</strong></p>
<p><img src="https://img-blog.csdnimg.cn/ef2294c806d747899e27ce772ee3dd20.png"></p>
<p>点击<strong>隧道</strong>取消选中<strong>转发X11连接到（X)</strong></p>
<p><img src="https://img-blog.csdnimg.cn/7f242d4605934f4a802db8fd844a56eb.png"></p>
<p>点击<strong>确定</strong>，双击会话重新连接</p>
<p><img src="https://img-blog.csdnimg.cn/9a2fdfdd92eb48b7af9aa65bb426ac24.png"></p>
<p>警告消失，问题解决</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
